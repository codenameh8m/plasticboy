// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
let adminMap;
let adminMarkers = [];
let isAddMode = false;
let currentPassword = '';
let allPoints = [];
let currentQRCode = '';

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
const ALMATY_CENTER = [43.2220, 76.8512];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    const savedPassword = sessionStorage.getItem('adminPassword');
    if (savedPassword) {
        currentPassword = savedPassword;
        showAdminPanel();
    }
});

// –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
function adminLogin() {
    const password = document.getElementById('adminPassword').value;
    
    if (!password) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', 'error');
        return;
    }
    
    currentPassword = password;
    sessionStorage.setItem('adminPassword', password);
    showAdminPanel();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async function showAdminPanel() {
    document.getElementById('loginForm').style.display = 'none';
    document.getElementById('adminPanel').style.display = 'block';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    initAdminMap();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏
    await loadAdminPoints();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –∫–∞—Ä—Ç—ã
function initAdminMap() {
    if (adminMap) {
        adminMap.remove();
    }
    
    adminMap = L.map('adminMap').setView(ALMATY_CENTER, 12);
    
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors',
        maxZoom: 18
    }).addTo(adminMap);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
    adminMap.on('click', function(e) {
        if (isAddMode) {
            openAddPointModal(e.latlng);
        }
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞
async function loadAdminPoints() {
    try {
        const response = await fetch('/api/admin/points', {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'X-Admin-Password': encodeURIComponent(currentPassword)
            }
        });
        
        if (!response.ok) {
            if (response.status === 401) {
                showNotification('Invalid password', 'error');
                sessionStorage.removeItem('adminPassword');
                location.reload();
                return;
            }
            throw new Error('Failed to load points');
        }
        
        allPoints = await response.json();
        updateAdminMap();
        updateAdminStats();
        updatePointsList();
        
    } catch (error) {
        console.error('Error loading points:', error);
        showNotification('Error loading data', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω –∫–∞—Ä—Ç—ã
function updateAdminMap() {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    adminMarkers.forEach(marker => adminMap.removeLayer(marker));
    adminMarkers = [];
    
    allPoints.forEach(point => {
        const now = new Date();
        const isScheduled = new Date(point.scheduledTime) > now;
        const isCollected = point.status === 'collected';
        
        let iconColor = '#4CAF50'; // –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        if (isCollected) iconColor = '#f44336'; // –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö
        else if (isScheduled) iconColor = '#ff9800'; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        
        const icon = L.divIcon({
            className: 'admin-marker',
            html: `<div class="admin-marker-dot" style="background: ${iconColor};">
                     ${isScheduled ? '‚è±Ô∏è' : (isCollected ? '‚úÖ' : 'üì¶')}
                   </div>`,
            iconSize: [30, 30],
            iconAnchor: [15, 15]
        });
        
        const marker = L.marker([point.coordinates.lat, point.coordinates.lng], { icon })
            .addTo(adminMap);
        
        // Popup –¥–ª—è –∞–¥–º–∏–Ω–∞
        let popupContent = `
            <div class="admin-popup">
                <h3>${point.name}</h3>
                <p><strong>ID:</strong> ${point.id}</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${getStatusText(point, isScheduled)}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${new Date(point.createdAt).toLocaleString('ru-RU')}</p>
        `;
        
        if (isScheduled) {
            popupContent += `<p><strong>–ü–æ—è–≤–∏—Ç—Å—è:</strong> ${new Date(point.scheduledTime).toLocaleString('ru-RU')}</p>`;
        }
        
        if (point.status === 'collected') {
            popupContent += `
                <p><strong>–°–æ–±—Ä–∞–Ω–∞:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
                <p><strong>–°–±–æ—Ä—â–∏–∫:</strong> ${point.collectorInfo.name}</p>
            `;
        }
        
        popupContent += `
                <button onclick="showQRCode('${point.id}')" class="admin-btn">–ü–æ–∫–∞–∑–∞—Ç—å QR</button>
                <button onclick="deletePoint('${point.id}')" class="admin-btn delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        
        marker.bindPopup(popupContent);
        adminMarkers.push(marker);
    });
    
    addAdminMarkerStyles();
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(point, isScheduled) {
    if (point.status === 'collected') return 'üî¥ –°–æ–±—Ä–∞–Ω–∞';
    if (isScheduled) return 'üü° –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞';
    return 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateAdminStats() {
    const now = new Date();
    const total = allPoints.length;
    const scheduled = allPoints.filter(p => new Date(p.scheduledTime) > now && p.status !== 'collected').length;
    const active = allPoints.filter(p => new Date(p.scheduledTime) <= now && p.status === 'available').length;
    
    document.getElementById('totalPoints').textContent = total;
    document.getElementById('activePoints').textContent = active;
    document.getElementById('scheduledPoints').textContent = scheduled;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫
function updatePointsList() {
    const container = document.getElementById('pointsList');
    
    if (allPoints.length === 0) {
        container.innerHTML = '<p>–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫</p>';
        return;
    }
    
    const sortedPoints = [...allPoints].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    
    container.innerHTML = sortedPoints.map(point => {
        const now = new Date();
        const isScheduled = new Date(point.scheduledTime) > now;
        const statusClass = point.status === 'collected' ? 'collected' : (isScheduled ? 'scheduled' : 'available');
        
        return `
            <div class="point-item ${statusClass}">
                <div class="point-header">
                    <h4>${point.name}</h4>
                    <span class="point-status">${getStatusText(point, isScheduled)}</span>
                </div>
                <p><strong>ID:</strong> ${point.id}</p>
                <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${point.coordinates.lat.toFixed(6)}, ${point.coordinates.lng.toFixed(6)}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${new Date(point.createdAt).toLocaleString('ru-RU')}</p>
                ${isScheduled ? `<p><strong>–ü–æ—è–≤–∏—Ç—Å—è:</strong> ${new Date(point.scheduledTime).toLocaleString('ru-RU')}</p>` : ''}
                ${point.status === 'collected' ? `
                    <p><strong>–°–æ–±—Ä–∞–Ω–∞:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
                    <p><strong>–°–±–æ—Ä—â–∏–∫:</strong> ${point.collectorInfo.name}</p>
                ` : ''}
                <div class="point-actions">
                    <button onclick="showQRCode('${point.id}')" class="admin-btn">QR –∫–æ–¥</button>
                    <button onclick="deletePoint('${point.id}')" class="admin-btn delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
    }).join('');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function toggleAddMode() {
    isAddMode = !isAddMode;
    const btn = document.getElementById('addModeBtn');
    
    if (isAddMode) {
        btn.textContent = '–†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: –í–ö–õ';
        btn.classList.add('active');
        adminMap.getContainer().style.cursor = 'crosshair';
        showNotification('–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏', 'info');
    } else {
        btn.textContent = '–†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: –í–´–ö–õ';
        btn.classList.remove('active');
        adminMap.getContainer().style.cursor = '';
    }
}

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏
function openAddPointModal(latlng) {
    window.tempCoordinates = latlng;
    document.getElementById('addPointModal').style.display = 'block';
    document.getElementById('modelName').focus();
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function closeAddModal() {
    document.getElementById('addPointModal').style.display = 'none';
    document.getElementById('addPointForm').reset();
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ POST body
async function createPointAlternative(pointData) {
    try {
        const response = await fetch('/api/admin/points/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            body: JSON.stringify({
                ...pointData,
                adminPassword: currentPassword
            })
        });
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || 'Server error');
        }
        
        return await response.json();
    } catch (error) {
        throw error;
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥ –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏
function showQRCodeForNewPoint(point) {
    currentQRCode = point.qrCode;
    
    document.getElementById('qrCodeDisplay').innerHTML = `
        <img src="${point.qrCode}" alt="QR –∫–æ–¥ –¥–ª—è ${point.name}">
        <p><strong>${point.name}</strong></p>
        <p>ID: ${point.id}</p>
    `;
    
    document.getElementById('qrModal').style.display = 'block';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('addPointForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const name = document.getElementById('modelName').value;
        const delayMinutes = document.getElementById('delayMinutes').value;
        
        if (!window.tempCoordinates) {
            showNotification('Coordinate error', 'error');
            return;
        }
        
        try {
            const requestData = {
                name: name,
                coordinates: {
                    lat: window.tempCoordinates.lat,
                    lng: window.tempCoordinates.lng
                },
                delayMinutes: delayMinutes || 0
            };

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
            let response;
            let newPoint;
            
            try {
                response = await fetch('/api/admin/points', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json; charset=utf-8',
                        'X-Admin-Password': encodeURIComponent(currentPassword)
                    },
                    body: JSON.stringify(requestData)
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Server error');
                }
                
                newPoint = await response.json();
                
            } catch (fetchError) {
                // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
                console.log('Using alternative method...');
                newPoint = await createPointAlternative(requestData);
            }
            
            closeAddModal();
            showNotification('Point created successfully!', 'success');
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ –ë–ï–ó –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞–π—Ç–∏ –µ—ë –≤ —Å—Ç–∞—Ä–æ–º —Å–ø–∏—Å–∫–µ
            showQRCodeForNewPoint(newPoint);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await loadAdminPoints();
            
        } catch (error) {
            console.error('Error creating point:', error);
            showNotification(error.message, 'error');
        }
    });
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ QR –∫–æ–¥–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—á–µ–∫
function showQRCode(pointId, qrCodeData = null) {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –≥–æ—Ç–æ–≤—ã–π QR –∫–æ–¥ (–¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ—á–µ–∫), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (qrCodeData) {
        currentQRCode = qrCodeData;
        document.getElementById('qrCodeDisplay').innerHTML = `
            <img src="${qrCodeData}" alt="QR –∫–æ–¥">
            <p>ID: ${pointId}</p>
        `;
        document.getElementById('qrModal').style.display = 'block';
        return;
    }
    
    // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—á–µ–∫ –∏—â–µ–º –≤ —Å–ø–∏—Å–∫–µ
    const point = allPoints.find(p => p.id === pointId);
    if (!point) {
        showNotification('–¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        return;
    }
    
    currentQRCode = point.qrCode;
    
    document.getElementById('qrCodeDisplay').innerHTML = `
        <img src="${point.qrCode}" alt="QR –∫–æ–¥ –¥–ª—è ${point.name}">
        <p><strong>${point.name}</strong></p>
        <p>ID: ${pointId}</p>
    `;
    
    document.getElementById('qrModal').style.display = 'block';
}

// –ó–∞–∫—Ä—ã—Ç—å QR –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeQrModal() {
    document.getElementById('qrModal').style.display = 'none';
}

// –°–∫–∞—á–∞—Ç—å QR –∫–æ–¥
function downloadQR() {
    if (!currentQRCode) return;
    
    const link = document.createElement('a');
    link.download = `plasticboy-qr-${Date.now()}.png`;
    link.href = currentQRCode;
    link.click();
}

// –£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É
async function deletePoint(pointId) {
    if (!confirm('Are you sure you want to delete this point?')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/admin/points/${pointId}`, {
            method: 'DELETE',
            headers: {
                'Accept': 'application/json',
                'X-Admin-Password': encodeURIComponent(currentPassword)
            }
        });
        
        if (!response.ok) {
            throw new Error('Failed to delete point');
        }
        
        showNotification('Point deleted', 'success');
        await loadAdminPoints();
        
    } catch (error) {
        console.error('Delete error:', error);
        showNotification('Error deleting point', 'error');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω –º–∞—Ä–∫–µ—Ä–æ–≤
function addAdminMarkerStyles() {
    if (!document.getElementById('admin-marker-styles')) {
        const style = document.createElement('style');
        style.id = 'admin-marker-styles';
        style.textContent = `
            .admin-marker {
                background: none !important;
                border: none !important;
            }
            
            .admin-marker-dot {
                width: 30px;
                height: 30px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                border: 3px solid white;
                box-shadow: 0 2px 10px rgba(0,0,0,0.3);
                font-size: 14px;
                color: white;
                font-weight: bold;
            }
            
            .admin-popup {
                min-width: 200px;
            }
            
            .admin-popup h3 {
                margin: 0 0 10px 0;
                color: #333;
            }
            
            .admin-popup p {
                margin: 5px 0;
                font-size: 0.9rem;
            }
            
            .admin-btn {
                background: #667eea;
                color: white;
                border: none;
                padding: 8px 12px;
                border-radius: 6px;
                cursor: pointer;
                font-size: 0.8rem;
                margin: 5px 5px 0 0;
                min-width: 80px;
            }
            
            .admin-btn:hover {
                background: #5a67d8;
            }
            
            .delete-btn {
                background: #f44336 !important;
            }
            
            .delete-btn:hover {
                background: #d32f2f !important;
            }
            
            .point-item {
                border-radius: 10px;
                padding: 15px;
                margin-bottom: 15px;
                background: white;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }
            
            .point-item.available {
                border-left: 4px solid #4CAF50;
            }
            
            .point-item.collected {
                border-left: 4px solid #f44336;
            }
            
            .point-item.scheduled {
                border-left: 4px solid #ff9800;
            }
            
            .point-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 10px;
            }
            
            .point-header h4 {
                margin: 0;
                color: #333;
            }
            
            .point-status {
                font-size: 0.9rem;
                font-weight: 600;
            }
            
            .point-actions {
                margin-top: 10px;
                padding-top: 10px;
                border-top: 1px solid #eee;
            }
        `;
        document.head.appendChild(style);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span>${message}</span>
            <button onclick="this.parentElement.parentElement.remove()">√ó</button>
        </div>
    `;
    
    if (!document.getElementById('notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            .notification {
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 2000;
                background: white;
                border-radius: 10px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.15);
                padding: 15px;
                min-width: 250px;
                max-width: 350px;
                animation: slideIn 0.3s ease-out;
            }
            
            .notification.error {
                border-left: 4px solid #f44336;
            }
            
            .notification.success {
                border-left: 4px solid #4CAF50;
            }
            
            .notification.info {
                border-left: 4px solid #2196F3;
            }
            
            .notification-content {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .notification-content button {
                background: none;
                border: none;
                font-size: 1.2rem;
                cursor: pointer;
                color: #999;
                padding: 0;
                margin: 0;
                width: auto;
                margin-left: 10px;
            }
            
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(style);
    }
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
window.addEventListener('click', function(event) {
    const addModal = document.getElementById('addPointModal');
    const qrModal = document.getElementById('qrModal');
    
    if (event.target === addModal) {
        closeAddModal();
    }
    
    if (event.target === qrModal) {
        closeQrModal();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('adminPassword').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            adminLogin();
        }
    });
});
