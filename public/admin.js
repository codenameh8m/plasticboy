// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
let adminMap;
let adminMarkers = [];
let isAddMode = false;
let currentPassword = '';
let allPoints = [];
let currentQRCode = '';

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
const ALMATY_CENTER = [43.2220, 76.8512];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
document.addEventListener('DOMContentLoaded', function() {
    console.log('üõ°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    const savedPassword = sessionStorage.getItem('adminPassword');
    if (savedPassword) {
        currentPassword = savedPassword;
        showAdminPanel();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞
    initAdminControlButtons();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
function initAdminControlButtons() {
    const checkAdminPanel = setInterval(() => {
        const adminPanel = document.getElementById('adminPanel');
        if (adminPanel && adminPanel.style.display !== 'none') {
            const locationBtn = document.querySelector('.location-btn');
            
            if (locationBtn) {
                locationBtn.addEventListener('mousedown', function() {
                    this.style.transform = 'translateY(-1px)';
                });
                
                locationBtn.addEventListener('mouseup', function() {
                    this.style.transform = '';
                });
                
                clearInterval(checkAdminPanel);
            }
        }
    }, 100);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
    const passwordInput = document.getElementById('adminPassword');
    if (passwordInput) {
        passwordInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                adminLogin();
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏
    const form = document.getElementById('addPointForm');
    if (form) {
        form.addEventListener('submit', handleAddPointSubmit);
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    window.addEventListener('click', function(event) {
        const addModal = document.getElementById('addPointModal');
        const qrModal = document.getElementById('qrModal');
        
        if (event.target === addModal) {
            closeAddModal();
        }
        
        if (event.target === qrModal) {
            closeQrModal();
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω –∫–∞—Ä—Ç—ã
    window.addEventListener('resize', function() {
        if (adminMap) {
            clearTimeout(window.adminResizeTimeout);
            window.adminResizeTimeout = setTimeout(() => {
                adminMap.invalidateSize();
            }, 150);
        }
    });

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à –¥–ª—è –∞–¥–º–∏–Ω–∞
    document.addEventListener('keydown', function(event) {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ Escape
        if (event.key === 'Escape') {
            closeAddModal();
            closeQrModal();
        }
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ Ctrl+L
        if (event.ctrlKey && event.key === 'l') {
            const adminPanel = document.getElementById('adminPanel');
            if (adminPanel && adminPanel.style.display !== 'none') {
                event.preventDefault();
                getAdminLocation();
            }
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ Ctrl+A
        if (event.ctrlKey && event.key === 'a') {
            const adminPanel = document.getElementById('adminPanel');
            if (adminPanel && adminPanel.style.display !== 'none') {
                event.preventDefault();
                toggleAddMode();
            }
        }
    });
}

// –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async function adminLogin() {
    const password = document.getElementById('adminPassword').value;
    
    if (!password) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', 'error');
        return;
    }
    
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValid = await checkPassword(password);
    if (!isValid) {
        showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error');
        return;
    }
    
    currentPassword = password;
    sessionStorage.setItem('adminPassword', password);
    showAdminPanel();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function checkPassword(password) {
    try {
        console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
        
        const response = await fetch('/api/admin/points', {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': password
            }
        });
        
        console.log('üì° –û—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', response.status);
        
        if (response.status === 401) {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
            return false;
        }
        
        if (!response.ok) {
            console.warn('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
            return false;
        }
        
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        return false;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async function showAdminPanel() {
    try {
        document.getElementById('loginForm').style.display = 'none';
        document.getElementById('adminPanel').style.display = 'block';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        await initAdminMap();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏
        await loadAdminPoints();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏', 'error');
        
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞
        document.getElementById('adminPanel').style.display = 'none';
        document.getElementById('loginForm').style.display = 'block';
        sessionStorage.removeItem('adminPassword');
        currentPassword = '';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –∫–∞—Ä—Ç—ã
function initAdminMap() {
    return new Promise((resolve, reject) => {
        try {
            if (adminMap) {
                adminMap.remove();
                adminMap = null;
            }
            
            console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –∫–∞—Ä—Ç—ã');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Leaflet
            if (typeof L === 'undefined') {
                throw new Error('Leaflet –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
            
            const mapElement = document.getElementById('adminMap');
            if (!mapElement) {
                throw new Error('–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            adminMap = L.map('adminMap').setView(ALMATY_CENTER, 13);
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors',
                maxZoom: 18
            }).addTo(adminMap);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
            adminMap.on('click', function(e) {
                if (isAddMode) {
                    openAddPointModal(e.latlng);
                }
            });
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            setTimeout(() => {
                if (adminMap) {
                    adminMap.invalidateSize();
                    console.log('‚úÖ –ê–¥–º–∏–Ω –∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞');
                    resolve();
                }
            }, 200);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω –∫–∞—Ä—Ç—ã:', error);
            reject(error);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
function getAdminLocation() {
    const locationBtn = document.querySelector('.location-btn');
    
    if (!navigator.geolocation) {
        showNotification('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
        return;
    }
    
    if (!adminMap) {
        showNotification('–ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞', 'error');
        return;
    }
    
    const originalText = locationBtn.innerHTML;
    locationBtn.innerHTML = '‚è≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...';
    locationBtn.disabled = true;
    locationBtn.style.opacity = '0.8';
    
    navigator.geolocation.getCurrentPosition(
        function(position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞
            const userIcon = L.divIcon({
                className: 'admin-user-location-marker',
                html: `<div style="
                    background: linear-gradient(45deg, #667eea, #764ba2);
                    width: 26px; 
                    height: 26px; 
                    border-radius: 50%; 
                    border: 3px solid white; 
                    box-shadow: 0 4px 15px rgba(0,0,0,0.3);
                    position: relative;
                    transition: all 0.3s ease;
                ">
                    <div style="
                        position: absolute;
                        top: -6px;
                        left: -6px;
                        right: -6px;
                        bottom: -6px;
                        border-radius: 50%;
                        border: 2px solid #667eea;
                        opacity: 0.3;
                        animation: adminUserPulse 2s infinite;
                    "></div>
                </div>`,
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—É–ª—å—Å–∞ –∞–¥–º–∏–Ω–∞
            addAdminUserPulseStyles();
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (window.adminUserMarker) {
                adminMap.removeLayer(window.adminUserMarker);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
            window.adminUserMarker = L.marker([lat, lng], { icon: userIcon })
                .addTo(adminMap)
                .bindPopup(`
                    <div style="text-align: center; min-width: 150px;">
                        <strong>üõ°Ô∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞</strong><br>
                        <small style="color: #666;">
                            ${lat.toFixed(6)}, ${lng.toFixed(6)}
                        </small>
                    </div>
                `);
            
            // –ü–ª–∞–≤–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –∞–¥–º–∏–Ω–µ
            adminMap.flyTo([lat, lng], 16, {
                duration: 1.5,
                easeLinearity: 0.5
            });
            
            showNotification('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ', 'success');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
            locationBtn.style.opacity = '';
        },
        function(error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
            
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    errorMessage = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω';
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
                    break;
                case error.TIMEOUT:
                    errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
                    break;
            }
            
            showNotification(errorMessage, 'error');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
            locationBtn.style.opacity = '';
        },
        {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 300000
        }
    );
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—É–ª—å—Å–∞ –∞–¥–º–∏–Ω–∞
function addAdminUserPulseStyles() {
    if (!document.getElementById('admin-user-pulse-styles')) {
        const style = document.createElement('style');
        style.id = 'admin-user-pulse-styles';
        style.textContent = `
            @keyframes adminUserPulse {
                0% {
                    transform: scale(1);
                    opacity: 0.7;
                }
                50% {
                    opacity: 0.2;
                }
                100% {
                    transform: scale(2.2);
                    opacity: 0;
                }
            }
            
            .admin-user-location-marker:hover > div {
                transform: scale(1.1);
                box-shadow: 0 6px 20px rgba(0,0,0,0.4);
            }
        `;
        document.head.appendChild(style);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞
async function loadAdminPoints() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞...');
        
        const response = await fetch('/api/admin/points', {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': currentPassword
            }
        });
        
        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω —Ç–æ—á–µ–∫:', response.status);
        
        if (!response.ok) {
            if (response.status === 401) {
                showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å', 'error');
                sessionStorage.removeItem('adminPassword');
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞
                document.getElementById('adminPanel').style.display = 'none';
                document.getElementById('loginForm').style.display = 'block';
                document.getElementById('adminPassword').value = '';
                currentPassword = '';
                
                return;
            }
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
            throw new Error(`Server error: ${response.status}`);
        }
        
        allPoints = await response.json();
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞:', allPoints.length);
        
        updateAdminMap();
        updateAdminStats();
        updatePointsList();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞:', error);
        showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
        
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞
        if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
            sessionStorage.removeItem('adminPassword');
            document.getElementById('adminPanel').style.display = 'none';
            document.getElementById('loginForm').style.display = 'block';
            document.getElementById('adminPassword').value = '';
            currentPassword = '';
            showNotification('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω –∫–∞—Ä—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
function updateAdminMap() {
    if (!adminMap || !allPoints) {
        console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –∏–ª–∏ —Ç–æ—á–∫–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    adminMarkers.forEach(marker => {
        if (adminMap.hasLayer(marker)) {
            adminMap.removeLayer(marker);
        }
    });
    adminMarkers = [];
    
    allPoints.forEach(point => {
        try {
            const now = new Date();
            const isScheduled = new Date(point.scheduledTime) > now;
            const isCollected = point.status === 'collected';
            
            let iconColor = '#4CAF50'; // –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            if (isCollected) iconColor = '#f44336'; // –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö
            else if (isScheduled) iconColor = '#ff9800'; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            
            const icon = L.divIcon({
                className: 'admin-marker',
                html: `<div class="admin-marker-dot" style="background: ${iconColor};">
                         ${isScheduled ? '‚è±Ô∏è' : (isCollected ? '‚úÖ' : 'üì¶')}
                       </div>`,
                iconSize: [32, 32],
                iconAnchor: [16, 16]
            });
            
            const marker = L.marker([point.coordinates.lat, point.coordinates.lng], { icon })
                .addTo(adminMap);
            
            // –£–ª—É—á—à–µ–Ω–Ω—ã–π popup –¥–ª—è –∞–¥–º–∏–Ω–∞
            let popupContent = `
                <div class="admin-popup">
                    <h3>${point.name}</h3>
                    <p><strong>ID:</strong> ${point.id}</p>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${getStatusText(point, isScheduled)}</p>
                    <p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${new Date(point.createdAt).toLocaleString('ru-RU')}</p>
            `;
            
            if (isScheduled) {
                popupContent += `<p><strong>–ü–æ—è–≤–∏—Ç—Å—è:</strong> ${new Date(point.scheduledTime).toLocaleString('ru-RU')}</p>`;
            }
            
            if (point.status === 'collected') {
                popupContent += `
                    <p><strong>–°–æ–±—Ä–∞–Ω–∞:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
                    <p><strong>–°–±–æ—Ä—â–∏–∫:</strong> ${point.collectorInfo.name}</p>
                `;
            }
            
            popupContent += `
                    <div style="margin-top: 12px;">
                        <button onclick="showQRCode('${point.id}')" class="admin-btn">–ü–æ–∫–∞–∑–∞—Ç—å QR</button>
                        <button onclick="deletePoint('${point.id}')" class="admin-btn delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                </div>
            `;
            
            marker.bindPopup(popupContent);
            adminMarkers.push(marker);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞:', error, point);
        }
    });
    
    addAdminMarkerStyles();
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(point, isScheduled) {
    if (point.status === 'collected') return 'üî¥ –°–æ–±—Ä–∞–Ω–∞';
    if (isScheduled) return 'üü° –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞';
    return 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
function updateAdminStats() {
    const now = new Date();
    const total = allPoints.length;
    const scheduled = allPoints.filter(p => new Date(p.scheduledTime) > now && p.status !== 'collected').length;
    const active = allPoints.filter(p => new Date(p.scheduledTime) <= now && p.status === 'available').length;
    
    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    animateAdminNumber(document.getElementById('totalPoints'), total);
    animateAdminNumber(document.getElementById('activePoints'), active);
    animateAdminNumber(document.getElementById('scheduledPoints'), scheduled);
}

// –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
function animateAdminNumber(element, targetValue) {
    if (!element) return;
    
    const currentValue = parseInt(element.textContent) || 0;
    if (currentValue === targetValue) return;
    
    const duration = 600;
    const steps = 20;
    const stepValue = (targetValue - currentValue) / steps;
    const stepDuration = duration / steps;
    
    let current = currentValue;
    let step = 0;
    
    element.style.transform = 'scale(1.1)';
    element.style.transition = 'transform 0.3s ease';
    
    const timer = setInterval(() => {
        step++;
        current += stepValue;
        
        if (step >= steps) {
            element.textContent = targetValue;
            element.style.transform = 'scale(1)';
            clearInterval(timer);
        } else {
            element.textContent = Math.round(current);
        }
    }, stepDuration);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫
function updatePointsList() {
    const container = document.getElementById('pointsList');
    
    if (!container) {
        console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    if (allPoints.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫</p>';
        return;
    }
    
    const sortedPoints = [...allPoints].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    
    container.innerHTML = sortedPoints.map(point => {
        const now = new Date();
        const isScheduled = new Date(point.scheduledTime) > now;
        const statusClass = point.status === 'collected' ? 'collected' : (isScheduled ? 'scheduled' : 'available');
        
        return `
            <div class="point-item ${statusClass}">
                <div class="point-header">
                    <h4>${point.name}</h4>
                    <span class="point-status">${getStatusText(point, isScheduled)}</span>
                </div>
                <p><strong>ID:</strong> ${point.id}</p>
                <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${point.coordinates.lat.toFixed(6)}, ${point.coordinates.lng.toFixed(6)}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${new Date(point.createdAt).toLocaleString('ru-RU')}</p>
                ${isScheduled ? `<p><strong>–ü–æ—è–≤–∏—Ç—Å—è:</strong> ${new Date(point.scheduledTime).toLocaleString('ru-RU')}</p>` : ''}
                ${point.status === 'collected' ? `
                    <p><strong>–°–æ–±—Ä–∞–Ω–∞:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
                    <p><strong>–°–±–æ—Ä—â–∏–∫:</strong> ${point.collectorInfo.name}</p>
                ` : ''}
                <div class="point-actions">
                    <button onclick="showQRCode('${point.id}')" class="admin-btn">QR –∫–æ–¥</button>
                    <button onclick="deletePoint('${point.id}')" class="admin-btn delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
    }).join('');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function toggleAddMode() {
    isAddMode = !isAddMode;
    const btn = document.getElementById('addModeBtn');
    
    if (!btn) {
        console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    if (isAddMode) {
        btn.textContent = '–†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: –í–ö–õ';
        btn.classList.add('active');
        if (adminMap) {
            adminMap.getContainer().style.cursor = 'crosshair';
        }
        showNotification('–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏', 'info');
    } else {
        btn.textContent = '–†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: –í–´–ö–õ';
        btn.classList.remove('active');
        if (adminMap) {
            adminMap.getContainer().style.cursor = '';
        }
    }
}

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏
function openAddPointModal(latlng) {
    window.tempCoordinates = latlng;
    const modal = document.getElementById('addPointModal');
    const input = document.getElementById('modelName');
    
    if (modal && input) {
        modal.style.display = 'block';
        input.focus();
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function closeAddModal() {
    const modal = document.getElementById('addPointModal');
    const form = document.getElementById('addPointForm');
    
    if (modal) {
        modal.style.display = 'none';
    }
    if (form) {
        form.reset();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏
async function handleAddPointSubmit(e) {
    e.preventDefault();
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏...');
    
    const name = document.getElementById('modelName').value;
    const delayMinutes = document.getElementById('delayMinutes').value;
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', { name, delayMinutes });
    
    if (!window.tempCoordinates) {
        console.error('‚ùå –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç', 'error');
        return;
    }
    
    console.log('üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', window.tempCoordinates);
    
    if (!name || !name.trim()) {
        console.error('‚ùå –ò–º—è —Ç–æ—á–∫–∏ –ø—É—Å—Ç–æ–µ');
        showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏', 'error');
        return;
    }
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalHTML = submitBtn.innerHTML;
    
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span style="animation: spin 1s linear infinite;">‚è≥</span> –°–æ–∑–¥–∞–Ω–∏–µ...';
    submitBtn.style.opacity = '0.8';

    try {
        const requestData = {
            name: name.trim(),
            coordinates: {
                lat: parseFloat(window.tempCoordinates.lat),
                lng: parseFloat(window.tempCoordinates.lng)
            },
            delayMinutes: delayMinutes ? parseInt(delayMinutes) : 0
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', requestData);
        console.log('üîë –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞:', currentPassword ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

        const response = await fetch('/api/admin/points', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': currentPassword
            },
            body: JSON.stringify(requestData)
        });
        
        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
            status: response.status,
            statusText: response.statusText,
            headers: Object.fromEntries(response.headers.entries())
        });
        
        let responseData;
        const contentType = response.headers.get('content-type');
        
        if (contentType && contentType.includes('application/json')) {
            responseData = await response.json();
        } else {
            const textResponse = await response.text();
            console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON:', textResponse);
            throw new Error(`Server returned invalid response: ${textResponse.substring(0, 100)}`);
        }
        
        console.log('üì• –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', responseData);
        
        if (!response.ok) {
            if (response.status === 401) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞');
                showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error');
                sessionStorage.removeItem('adminPassword');
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞
                document.getElementById('adminPanel').style.display = 'none';
                document.getElementById('loginForm').style.display = 'block';
                document.getElementById('adminPassword').value = '';
                currentPassword = '';
                
                setTimeout(() => location.reload(), 2000);
                return;
            }
            
            const errorMessage = responseData.error || `HTTP ${response.status}: ${response.statusText}`;
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorMessage);
            throw new Error(errorMessage);
        }
        
        console.log('‚úÖ –¢–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', responseData);
        
        closeAddModal();
        showNotification('–¢–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', 'success');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
        if (responseData.qrCode) {
            showQRCodeForNewPoint(responseData);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await loadAdminPoints();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏:', error);
        console.error('‚ùå Stack trace:', error.stack);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        
        if (error.message.includes('Failed to fetch')) {
            errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
        } else if (error.message.includes('NetworkError')) {
            errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (error.message.includes('Invalid')) {
            errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ' + error.message;
        } else {
            errorMessage = error.message;
        }
        
        showNotification(errorMessage, 'error');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalHTML;
        submitBtn.style.opacity = '';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥ –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏
function showQRCodeForNewPoint(point) {
    currentQRCode = point.qrCode;
    
    const qrDisplay = document.getElementById('qrCodeDisplay');
    if (qrDisplay) {
        qrDisplay.innerHTML = `
            <img src="${point.qrCode}" alt="QR –∫–æ–¥ –¥–ª—è ${point.name}" style="max-width: 280px; border-radius: 12px;">
            <p style="font-weight: 600; margin-top: 15px;"><strong>${point.name}</strong></p>
            <p style="color: #666;">ID: ${point.id}</p>
        `;
    }
    
    const modal = document.getElementById('qrModal');
    if (modal) {
        modal.style.display = 'block';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—á–µ–∫
function showQRCode(pointId, qrCodeData = null) {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –≥–æ—Ç–æ–≤—ã–π QR –∫–æ–¥ (–¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ—á–µ–∫), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (qrCodeData) {
        currentQRCode = qrCodeData;
        const qrDisplay = document.getElementById('qrCodeDisplay');
        if (qrDisplay) {
            qrDisplay.innerHTML = `
                <img src="${qrCodeData}" alt="QR –∫–æ–¥" style="max-width: 280px; border-radius: 12px;">
                <p style="color: #666; margin-top: 15px;">ID: ${pointId}</p>
            `;
        }
        const modal = document.getElementById('qrModal');
        if (modal) {
            modal.style.display = 'block';
        }
        return;
    }
    
    // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—á–µ–∫ –∏—â–µ–º –≤ —Å–ø–∏—Å–∫–µ
    const point = allPoints.find(p => p.id === pointId);
    if (!point) {
        showNotification('–¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        return;
    }
    
    currentQRCode = point.qrCode;
    
    const qrDisplay = document.getElementById('qrCodeDisplay');
    if (qrDisplay) {
        qrDisplay.innerHTML = `
            <img src="${point.qrCode}" alt="QR –∫–æ–¥ –¥–ª—è ${point.name}" style="max-width: 280px; border-radius: 12px;">
            <p style="font-weight: 600; margin-top: 15px;"><strong>${point.name}</strong></p>
            <p style="color: #666;">ID: ${pointId}</p>
        `;
    }
    
    const modal = document.getElementById('qrModal');
    if (modal) {
        modal.style.display = 'block';
    }
}

// –ó–∞–∫—Ä—ã—Ç—å QR –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeQrModal() {
    const modal = document.getElementById('qrModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

// –°–∫–∞—á–∞—Ç—å QR –∫–æ–¥
function downloadQR() {
    if (!currentQRCode) return;
    
    const link = document.createElement('a');
    link.download = `plasticboy-qr-${Date.now()}.png`;
    link.href = currentQRCode;
    link.click();
}

// –£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É
async function deletePoint(pointId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç–æ—á–∫—É?')) {
        return;
    }
    
    try {
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫—É:', pointId);
        
        const response = await fetch(`/api/admin/points/${pointId}`, {
            method: 'DELETE',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': currentPassword
            }
        });
        
        console.log('üì° –û—Ç–≤–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ:', response.status);
        
        if (!response.ok) {
            if (response.status === 401) {
                showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error');
                sessionStorage.removeItem('adminPassword');
                location.reload();
                return;
            }
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to delete point');
        }
        
        showNotification('–¢–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
        await loadAdminPoints();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏: ' + error.message, 'error');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω –º–∞—Ä–∫–µ—Ä–æ–≤
function addAdminMarkerStyles() {
    if (!document.getElementById('admin-marker-styles')) {
        const style = document.createElement('style');
        style.id = 'admin-marker-styles';
        style.textContent = `
            .admin-marker {
                background: none !important;
                border: none !important;
            }
            
            .admin-marker-dot {
                width: 32px;
                height: 32px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                border: 3px solid white;
                box-shadow: 0 4px 15px rgba(0,0,0,0.25);
                font-size: 16px;
                color: white;
                font-weight: bold;
                transition: all 0.3s ease;
                cursor: pointer;
            }
            
            .admin-marker-dot:hover {
                transform: scale(1.1);
                box-shadow: 0 6px 20px rgba(0,0,0,0.35);
            }
            
            .admin-popup {
                min-width: 220px;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            }
            
            .admin-popup h3 {
                margin: 0 0 12px 0;
                color: #333;
                font-size: 1.1rem;
                font-weight: 600;
            }
            
            .admin-popup p {
                margin: 6px 0;
                font-size: 0.9rem;
            }
            
            .admin-btn {
                background: linear-gradient(45deg, #667eea, #764ba2);
                color: white;
                border: none;
                padding: 8px 14px;
                border-radius: 6px;
                cursor: pointer;
                font-size: 0.85rem;
                margin: 6px 6px 0 0;
                min-width: 90px;
                transition: all 0.3s;
                font-weight: 500;
            }
            
            .admin-btn:hover {
                background: linear-gradient(45deg, #5a67d8, #6b46c1);
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
            }
            
            .delete-btn {
                background: linear-gradient(45deg, #f44336, #e53935) !important;
            }
            
            .delete-btn:hover {
                background: linear-gradient(45deg, #d32f2f, #c62828) !important;
                box-shadow: 0 4px 12px rgba(244, 67, 54, 0.3) !important;
            }
            
            .point-item {
                border-radius: 12px;
                padding: 16px;
                margin-bottom: 16px;
                background: white;
                box-shadow: 0 4px 12px rgba(0,0,0,0.08);
                transition: all 0.3s ease;
            }
            
            .point-item:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.12);
            }
            
            .point-item.available {
                border-left: 4px solid #4CAF50;
            }
            
            .point-item.collected {
                border-left: 4px solid #f44336;
            }
            
            .point-item.scheduled {
                border-left: 4px solid #ff9800;
            }
            
            .point-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 12px;
            }
            
            .point-header h4 {
                margin: 0;
                color: #333;
                font-size: 1.1rem;
                font-weight: 600;
            }
            
            .point-status {
                font-size: 0.9rem;
                font-weight: 600;
                padding: 4px 8px;
                border-radius: 12px;
                background: rgba(255,255,255,0.8);
            }
            
            .point-actions {
                margin-top: 12px;
                padding-top: 12px;
                border-top: 1px solid #eee;
            }
        `;
        document.head.appendChild(style);
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞
function showNotification(message, type = 'info') {
    console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${type} - ${message}`);
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span>${getNotificationIcon(type)} ${message}</span>
            <button onclick="this.parentElement.parentElement.remove()">√ó</button>
        </div>
    `;
    
    if (!document.getElementById('notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            .notification {
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 2000;
                background: rgba(255, 255, 255, 0.98);
                border-radius: 12px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.15);
                backdrop-filter: blur(10px);
                padding: 16px;
                min-width: 280px;
                max-width: 400px;
                animation: slideIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                border: 1px solid rgba(255,255,255,0.2);
                font-weight: 500;
            }
            
            .notification.error {
                border-left: 4px solid #f44336;
                background: linear-gradient(135deg, rgba(244, 67, 54, 0.05), rgba(255, 255, 255, 0.98));
            }
            
            .notification.success {
                border-left: 4px solid #4CAF50;
                background: linear-gradient(135deg, rgba(76, 175, 80, 0.05), rgba(255, 255, 255, 0.98));
            }
            
            .notification.info {
                border-left: 4px solid #2196F3;
                background: linear-gradient(135deg, rgba(33, 150, 243, 0.05), rgba(255, 255, 255, 0.98));
            }
            
            .notification.warning {
                border-left: 4px solid #ff9800;
                background: linear-gradient(135deg, rgba(255, 152, 0, 0.05), rgba(255, 255, 255, 0.98));
            }
            
            .notification-content {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .notification-content button {
                background: none;
                border: none;
                font-size: 1.3rem;
                cursor: pointer;
                color: #999;
                padding: 0;
                margin: 0;
                width: auto;
                margin-left: 12px;
                transition: color 0.3s;
            }
            
            .notification-content button:hover {
                color: #666;
            }
            
            @keyframes slideIn {
                from {
                    transform: translateX(100%) scale(0.9);
                    opacity: 0;
                }
                to {
                    transform: translateX(0) scale(1);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(style);
    }
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function getNotificationIcon(type) {
    const icons = {
        error: '‚ùå',
        success: '‚úÖ',
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è'
    };
    return icons[type] || icons.info;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function debugAdminState() {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:', {
        currentPassword: currentPassword ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        isAddMode: isAddMode,
        allPointsCount: allPoints.length,
        adminMapReady: !!adminMap,
        tempCoordinates: window.tempCoordinates
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
window.adminLogin = adminLogin;
window.toggleAddMode = toggleAddMode;
window.getAdminLocation = getAdminLocation;
window.showQRCode = showQRCode;
window.deletePoint = deletePoint;
window.closeAddModal = closeAddModal;
window.closeQrModal = closeQrModal;
window.downloadQR = downloadQR;
window.debugAdminState = debugAdminState;
window.checkPassword = checkPassword;
