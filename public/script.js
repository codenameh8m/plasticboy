// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è script.js –¥–ª—è PlasticBoy - —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–æ—á–µ–∫
let map;
let markers = [];
let markersLayer;

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
const ALMATY_CENTER = [43.2220, 76.8512];

// –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isAppInitialized = false;
let pointsCache = null;
let abortController = null;

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function debugLog(message, data = null) {
    console.log(`üîç [PlasticBoy] ${message}`, data || '');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function validateCoordinates(lat, lng) {
    const isValidLat = typeof lat === 'number' && lat >= -90 && lat <= 90 && !isNaN(lat);
    const isValidLng = typeof lng === 'number' && lng >= -180 && lng <= 180 && !isNaN(lng);
    return isValidLat && isValidLng;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
function safeNotifyLoader() {
    try {
        if (typeof window.PlasticBoyLoader !== 'undefined' && 
            typeof window.PlasticBoyLoader.onPointsLoaded === 'function') {
            window.PlasticBoyLoader.onPointsLoaded();
            debugLog('‚úÖ –ó–∞–≥—Ä—É–∑—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–æ—á–µ–∫');
        }
    } catch (error) {
        debugLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    debugLog('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ PlasticBoy');
    
    setTimeout(() => {
        initializeApp();
    }, 100);
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initializeApp() {
    debugLog('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PlasticBoy...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
    addMarkerStyles();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    initControlButtons();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Leaflet
    if (typeof L !== 'undefined') {
        debugLog('Leaflet –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É');
        initMap();
    } else {
        debugLog('–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Leaflet...');
        waitForLeaflet();
    }
}

// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Leaflet
function waitForLeaflet() {
    let attempts = 0;
    const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
    
    const checkInterval = setInterval(() => {
        attempts++;
        
        if (typeof L !== 'undefined') {
            clearInterval(checkInterval);
            debugLog('Leaflet –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É');
            initMap();
        } else if (attempts >= maxAttempts) {
            clearInterval(checkInterval);
            debugLog('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Leaflet –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è');
            showErrorNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }
    }, 100);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
function addMarkerStyles() {
    if (document.getElementById('plasticboy-marker-styles')) {
        return; // –°—Ç–∏–ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
    }
    
    const style = document.createElement('style');
    style.id = 'plasticboy-marker-styles';
    style.textContent = `
        .plasticboy-marker {
            background: none !important;
            border: none !important;
        }
        
        .plasticboy-dot {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: bold;
            color: white;
            position: relative;
        }
        
        .plasticboy-dot:hover {
            transform: scale(1.2);
            box-shadow: 0 6px 20px rgba(0,0,0,0.4);
        }
        
        .plasticboy-dot.available {
            background: linear-gradient(45deg, #4CAF50, #45a049);
        }
        
        .plasticboy-dot.collected {
            background: linear-gradient(45deg, #f44336, #e53935);
        }
        
        .plasticboy-dot.available::before {
            content: 'üì¶';
            font-size: 12px;
        }
        
        .plasticboy-dot.collected::before {
            content: '‚úÖ';
            font-size: 12px;
        }
        
        .plasticboy-popup {
            min-width: 220px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }
        
        .plasticboy-popup h3 {
            margin: 0 0 12px 0;
            color: #333;
            font-size: 1.1rem;
            font-weight: 600;
        }
        
        .plasticboy-status {
            margin: 8px 0;
            font-weight: 600;
            padding: 6px 12px;
            border-radius: 20px;
            text-align: center;
            font-size: 0.9rem;
        }
        
        .plasticboy-status.available { 
            background: #e8f5e8;
            color: #2e7d32; 
        }
        
        .plasticboy-status.collected { 
            background: #ffebee;
            color: #c62828; 
        }
        
        .plasticboy-collector-info {
            background: #f8f9fa;
            padding: 12px;
            border-radius: 8px;
            margin: 10px 0;
            border-left: 4px solid #667eea;
        }
        
        .plasticboy-collector-info p {
            margin: 4px 0;
            font-size: 0.9rem;
        }
        
        .plasticboy-collector-info strong {
            color: #333;
        }
    `;
    document.head.appendChild(style);
    debugLog('‚úÖ –°—Ç–∏–ª–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    if (isAppInitialized) {
        debugLog('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return;
    }
    
    debugLog('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—Ç—ã
        const mapElement = document.getElementById('map');
        if (!mapElement) {
            throw new Error('–≠–ª–µ–º–µ–Ω—Ç #map –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        map = L.map('map', {
            center: ALMATY_CENTER,
            zoom: 13,
            zoomControl: true,
            attributionControl: true,
            preferCanvas: false,
            maxZoom: 18,
            minZoom: 10
        });
        
        debugLog('‚úÖ –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª—ã
        const tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors',
            maxZoom: 18
        });
        
        tileLayer.addTo(map);
        debugLog('‚úÖ –¢–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
        markersLayer = L.layerGroup();
        markersLayer.addTo(map);
        debugLog('‚úÖ –ì—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∞');
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ä—Ç–µ
        window.map = map;
        window.markersLayer = markersLayer;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
            map.invalidateSize();
            debugLog('‚úÖ –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω');
        }, 200);
        
        isAppInitialized = true;
        debugLog('‚úÖ –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏
        loadPoints();
        
    } catch (error) {
        debugLog('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', error);
        showErrorNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: ' + error.message);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫
async function loadPoints() {
    debugLog('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ—á–µ–∫...');
    
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    if (abortController) {
        abortController.abort();
    }
    abortController = new AbortController();
    
    try {
        debugLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ /api/points');
        
        const response = await fetch('/api/points', {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Cache-Control': 'no-cache'
            },
            signal: abortController.signal
        });
        
        debugLog('–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
            status: response.status,
            statusText: response.statusText,
            ok: response.ok,
            headers: Object.fromEntries(response.headers.entries())
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON –æ—Ç–≤–µ—Ç: ' + contentType);
        }
        
        const points = await response.json();
        debugLog('–î–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –ø–æ–ª—É—á–µ–Ω—ã:', {
            type: typeof points,
            isArray: Array.isArray(points),
            length: points ? points.length : 'undefined',
            sample: points ? points.slice(0, 2) : 'none'
        });
        
        if (!Array.isArray(points)) {
            throw new Error('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º: ' + typeof points);
        }
        
        pointsCache = points;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateMapMarkers(points);
        updateStatistics(points);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏
        safeNotifyLoader();
        
        debugLog(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${points.length} —Ç–æ—á–µ–∫`);
        
        if (points.length === 0) {
            showInfoNotification('–ù–∞ –∫–∞—Ä—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è —Å–±–æ—Ä–∞');
        } else {
            showSuccessNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${points.length} —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç—É`);
        }
        
    } catch (error) {
        if (error.name === 'AbortError') {
            debugLog('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω');
            return;
        }
        
        debugLog('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ—á–µ–∫:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        showErrorNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        
        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            debugLog('–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏');
            createTestPoints();
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        safeNotifyLoader();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function createTestPoints() {
    const testPoints = [
        {
            id: 'test1',
            name: '–¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å - –ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ',
            coordinates: { lat: 43.2220, lng: 76.8512 },
            status: 'available',
            createdAt: new Date().toISOString()
        },
        {
            id: 'test2',
            name: '–¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å - –ü–ª–æ—â–∞–¥—å –†–µ—Å–ø—É–±–ª–∏–∫–∏',
            coordinates: { lat: 43.2380, lng: 76.8840 },
            status: 'collected',
            collectorInfo: {
                name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                signature: '–ü–µ—Ä–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞!'
            },
            collectedAt: new Date(Date.now() - 3600000).toISOString()
        },
        {
            id: 'test3',
            name: '–¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å - –ö–æ–∫-–¢–æ–±–µ',
            coordinates: { lat: 43.2050, lng: 76.9080 },
            status: 'available',
            createdAt: new Date().toISOString()
        }
    ];
    
    debugLog('–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏:', testPoints);
    
    pointsCache = testPoints;
    updateMapMarkers(testPoints);
    updateStatistics(testPoints);
    safeNotifyLoader();
    
    showInfoNotification('–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
function updateMapMarkers(points) {
    if (!map || !markersLayer) {
        debugLog('‚ùå –ö–∞—Ä—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ –≥–æ—Ç–æ–≤—ã');
        return;
    }
    
    debugLog('–û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ...');
    
    try {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
        markersLayer.clearLayers();
        markers.length = 0;
        debugLog('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã');
        
        if (points.length === 0) {
            debugLog('‚ö†Ô∏è –ù–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return;
        }
        
        let successCount = 0;
        let errorCount = 0;
        
        points.forEach((point, index) => {
            try {
                // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—á–∫–∏
                if (!point.coordinates) {
                    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
                }
                
                const lat = parseFloat(point.coordinates.lat);
                const lng = parseFloat(point.coordinates.lng);
                
                if (!validateCoordinates(lat, lng)) {
                    throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat=${lat}, lng=${lng}`);
                }
                
                const isAvailable = point.status === 'available';
                
                debugLog(`–°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä ${index + 1}: ${point.name} [${lat}, ${lng}] - ${point.status}`);
                
                // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –º–∞—Ä–∫–µ—Ä–∞
                const icon = L.divIcon({
                    className: 'plasticboy-marker',
                    html: `<div class="plasticboy-dot ${isAvailable ? 'available' : 'collected'}"></div>`,
                    iconSize: [24, 24],
                    iconAnchor: [12, 12]
                });
                
                // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
                const marker = L.marker([lat, lng], { icon });
                
                // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ popup
                let popupContent = `
                    <div class="plasticboy-popup">
                        <h3>${point.name}</h3>
                        <div class="plasticboy-status ${point.status}">
                            ${isAvailable ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞' : 'üî¥ –£–∂–µ —Å–æ–±—Ä–∞–Ω–∞'}
                        </div>
                        <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${lat.toFixed(6)}, ${lng.toFixed(6)}</p>
                `;
                
                if (point.createdAt) {
                    popupContent += `<p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${new Date(point.createdAt).toLocaleString('ru-RU')}</p>`;
                }
                
                if (!isAvailable && point.collectorInfo) {
                    popupContent += `
                        <div class="plasticboy-collector-info">
                            <p><strong>–°–æ–±—Ä–∞–ª:</strong> ${point.collectorInfo.name}</p>
                            ${point.collectorInfo.signature ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${point.collectorInfo.signature}</p>` : ''}
                            ${point.collectedAt ? `<p><strong>–í—Ä–µ–º—è —Å–±–æ—Ä–∞:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>` : ''}
                        </div>
                    `;
                }
                
                popupContent += '</div>';
                
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º popup –∫ –º–∞—Ä–∫–µ—Ä—É
                marker.bindPopup(popupContent, {
                    maxWidth: 300,
                    className: 'plasticboy-popup-wrapper'
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É
                markersLayer.addLayer(marker);
                markers.push(marker);
                successCount++;
                
                debugLog(`‚úÖ –ú–∞—Ä–∫–µ—Ä ${index + 1} –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                
            } catch (error) {
                errorCount++;
                debugLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞ ${index + 1}:`, error);
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
        window.markers = markers;
        
        debugLog(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —É—Å–ø–µ—à–Ω–æ=${successCount}, –æ—à–∏–±–æ–∫=${errorCount}`);
        
        if (successCount > 0) {
            debugLog(`‚úÖ –ù–∞ –∫–∞—Ä—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${successCount} –º–∞—Ä–∫–µ—Ä–æ–≤`);
        }
        
        if (errorCount > 0) {
            debugLog(`‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤: ${errorCount}`);
        }
        
    } catch (error) {
        debugLog('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤:', error);
        showErrorNotification('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatistics(points) {
    debugLog('–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    
    try {
        const available = points.filter(p => p.status === 'available').length;
        const collected = points.filter(p => p.status === 'collected').length;
        
        debugLog('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', { available, collected, total: points.length });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        updateStatElement('availableCount', available);
        updateStatElement('collectedCount', collected);
        
    } catch (error) {
        debugLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
function updateStatElement(elementId, newValue) {
    const element = document.getElementById(elementId);
    if (!element) {
        debugLog(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç ${elementId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
    }
    
    const currentValue = parseInt(element.textContent) || 0;
    
    if (currentValue === newValue) {
        return; // –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞
    const duration = 800;
    const steps = 20;
    const stepValue = (newValue - currentValue) / steps;
    const stepDuration = duration / steps;
    
    let current = currentValue;
    let step = 0;
    
    const timer = setInterval(() => {
        step++;
        current += stepValue;
        
        if (step >= steps) {
            element.textContent = newValue;
            clearInterval(timer);
        } else {
            element.textContent = Math.round(current);
        }
    }, stepDuration);
}

// –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getCurrentLocation() {
    debugLog('–ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const locationBtn = document.querySelector('.location-btn');
    if (!locationBtn) {
        debugLog('‚ùå –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    if (!navigator.geolocation) {
        debugLog('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
        showErrorNotification('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
        return;
    }
    
    const originalText = locationBtn.innerHTML;
    locationBtn.innerHTML = '‚è≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...';
    locationBtn.disabled = true;
    
    navigator.geolocation.getCurrentPosition(
        function(position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            debugLog('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', { lat, lng, accuracy: position.coords.accuracy });
            
            // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userIcon = L.divIcon({
                className: 'plasticboy-user-marker',
                html: `<div style="
                    background: linear-gradient(45deg, #2196F3, #1976D2);
                    width: 20px; 
                    height: 20px; 
                    border-radius: 50%; 
                    border: 3px solid white; 
                    box-shadow: 0 4px 12px rgba(33, 150, 243, 0.4);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-weight: bold;
                    font-size: 10px;
                    position: relative;
                ">üë§
                    <div style="
                        position: absolute;
                        top: -3px; left: -3px; right: -3px; bottom: -3px;
                        border: 2px solid #2196F3;
                        border-radius: 50%;
                        opacity: 0.6;
                        animation: userPulse 2s infinite;
                    "></div>
                </div>`,
                iconSize: [20, 20],
                iconAnchor: [10, 10]
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!document.getElementById('user-pulse-animation')) {
                const style = document.createElement('style');
                style.id = 'user-pulse-animation';
                style.textContent = `
                    @keyframes userPulse {
                        0% { transform: scale(1); opacity: 0.7; }
                        50% { opacity: 0.3; }
                        100% { transform: scale(2); opacity: 0; }
                    }
                `;
                document.head.appendChild(style);
            }
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (window.userMarker) {
                map.removeLayer(window.userMarker);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
            window.userMarker = L.marker([lat, lng], { icon: userIcon })
                .addTo(map)
                .bindPopup(`
                    <div style="text-align: center; min-width: 150px;">
                        <strong>üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong><br>
                        <small style="color: #666;">
                            –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${lat.toFixed(6)}, ${lng.toFixed(6)}<br>
                            –¢–æ—á–Ω–æ—Å—Ç—å: ¬±${Math.round(position.coords.accuracy)}–º
                        </small>
                    </div>
                `, {
                    className: 'user-location-popup'
                });
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            map.setView([lat, lng], Math.max(map.getZoom(), 15));
            
            showSuccessNotification('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ!');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
            
        },
        function(error) {
            debugLog('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            
            let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    errorMessage = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
                    break;
                case error.TIMEOUT:
                    errorMessage = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
                    break;
            }
            
            showErrorNotification(errorMessage);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
        },
        {
            enableHighAccuracy: true,
            timeout: 15000,
            maximumAge: 300000 // 5 –º–∏–Ω—É—Ç
        }
    );
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function initControlButtons() {
    const locationBtn = document.querySelector('.location-btn');
    if (locationBtn) {
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        locationBtn.removeEventListener('click', getCurrentLocation);
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        locationBtn.addEventListener('click', getCurrentLocation);
        debugLog('‚úÖ –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    } else {
        debugLog('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM');
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showSuccessNotification(message) {
    showNotification(message, 'success');
}

function showErrorNotification(message) {
    showNotification(message, 'error');
}

function showInfoNotification(message) {
    showNotification(message, 'info');
}

function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `plasticboy-notification ${type}`;
    
    const icons = {
        error: '‚ùå',
        success: '‚úÖ',
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è'
    };
    
    const colors = {
        error: '#f44336',
        success: '#4CAF50',
        info: '#2196F3',
        warning: '#ff9800'
    };
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 3000;
        background: white;
        border-left: 4px solid ${colors[type]};
        border-radius: 8px;
        padding: 16px 20px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        max-width: 350px;
        font-size: 14px;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 10px;
        animation: slideInNotification 0.3s ease-out;
    `;
    
    notification.innerHTML = `
        <span>${icons[type]}</span>
        <span style="flex: 1;">${message}</span>
        <button onclick="this.parentElement.remove()" style="
            background: none; border: none; font-size: 18px; 
            cursor: pointer; color: #999; padding: 0; margin: 0;
        ">√ó</button>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∞–Ω–∏–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!document.getElementById('notification-animation')) {
        const style = document.createElement('style');
        style.id = 'notification-animation';
        style.textContent = `
            @keyframes slideInNotification {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
        `;
        document.head.appendChild(style);
    }
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'slideInNotification 0.3s ease-out reverse';
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
    
    debugLog(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ: [${type}] ${message}`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
window.addEventListener('resize', function() {
    if (map) {
        debugLog('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É');
        setTimeout(() => {
            map.invalidateSize();
        }, 100);
    }
});

// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener('keydown', function(event) {
    // Ctrl + L - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    if (event.ctrlKey && event.key === 'l') {
        event.preventDefault();
        getCurrentLocation();
    }
    
    // Ctrl + R - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—á–∫–∏
    if (event.ctrlKey && event.key === 'r') {
        event.preventDefault();
        if (isAppInitialized) {
            debugLog('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫');
            loadPoints();
        }
    }
    
    // Ctrl + D - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if (event.ctrlKey && event.key === 'd') {
        event.preventDefault();
        showDiagnostics();
    }
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
function showDiagnostics() {
    const diagnostics = {
        '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ': isAppInitialized,
        'Leaflet –¥–æ—Å—Ç—É–ø–µ–Ω': typeof L !== 'undefined',
        '–ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞': !!map,
        '–ì—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤': !!markersLayer,
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤': markers ? markers.length : 0,
        '–ö—ç—à —Ç–æ—á–µ–∫': pointsCache ? pointsCache.length : '–Ω–µ—Ç',
        'URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã': window.location.href,
        'User Agent': navigator.userAgent.substring(0, 50) + '...'
    };
    
    console.group('üîç PlasticBoy –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
    Object.entries(diagnostics).forEach(([key, value]) => {
        console.log(`${key}:`, value);
    });
    console.groupEnd();
    
    showInfoNotification('–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å');
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.PlasticBoy = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    map: () => map,
    markers: () => markers,
    markersLayer: () => markersLayer,
    
    // –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    loadPoints,
    getCurrentLocation,
    initMap,
    
    // –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    debugLog,
    showNotification,
    isInitialized: () => isAppInitialized,
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    diagnostics: showDiagnostics,
    getPointsCache: () => pointsCache
};

// –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–º
window.showNotification = showNotification;
window.updateMap = updateMapMarkers;
window.updateStats = updateStatistics;
window.loadPoints = loadPoints;
window.initMap = initMap;

// –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
debugLog('‚úÖ PlasticBoy script.js –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
debugLog('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: Ctrl+L (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è), Ctrl+R (–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å), Ctrl+D (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)');
