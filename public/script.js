// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
let map;
let markers = [];

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
const ALMATY_CENTER = [43.2220, 76.8512];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initMap();
    loadPoints();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(loadPoints, 30000);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    initRefreshButton();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å —Å–µ—Ä–æ-–±–µ–ª–æ–π —Ç–µ–º–æ–π
function initMap() {
    map = L.map('map').setView(ALMATY_CENTER, 12);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ—Ç–ª—É—é –∫–∞—Ä—Ç—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä–æ-–±–µ–ª—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors',
        maxZoom: 18,
        className: 'map-tiles'
    }).addTo(map);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä–æ-–±–µ–ª—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∫–∞—Ä—Ç–µ
    map.getContainer().style.filter = 'grayscale(100%) contrast(1.1) brightness(1.05)';
    map.getContainer().style.background = '#f8f9fa';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ä—Ç—ã
    addMapCustomStyles();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è –∫–∞—Ä—Ç—ã
function addMapCustomStyles() {
    if (!document.getElementById('map-custom-styles')) {
        const style = document.createElement('style');
        style.id = 'map-custom-styles';
        style.textContent = `
            /* –°–µ—Ä–æ-–±–µ–ª–∞—è —Ç–µ–º–∞ –¥–ª—è Leaflet –∫–∞—Ä—Ç—ã */
            .leaflet-container {
                background: #f8f9fa !important;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
            }
            
            .leaflet-tile {
                filter: grayscale(100%) contrast(1.1) brightness(1.05) !important;
            }
            
            .leaflet-control-zoom a {
                background-color: rgba(255, 255, 255, 0.95) !important;
                color: #495057 !important;
                border: 1px solid rgba(108, 117, 125, 0.2) !important;
                backdrop-filter: blur(10px) !important;
                transition: all 0.3s !important;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
            }
            
            .leaflet-control-zoom a:hover {
                background-color: #f8f9fa !important;
                color: #343a40 !important;
                transform: scale(1.05) !important;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
            }
            
            .leaflet-control-attribution {
                background-color: rgba(255, 255, 255, 0.9) !important;
                color: #6c757d !important;
                font-size: 0.7rem !important;
                border-radius: 8px !important;
                backdrop-filter: blur(10px) !important;
                border: 1px solid rgba(108, 117, 125, 0.1) !important;
                padding: 2px 5px !important;
            }
            
            .leaflet-popup-content-wrapper {
                background: rgba(255, 255, 255, 0.98) !important;
                border-radius: 12px !important;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15) !important;
                backdrop-filter: blur(15px) !important;
                border: 1px solid rgba(255, 255, 255, 0.2) !important;
            }
            
            .leaflet-popup-tip {
                background: rgba(255, 255, 255, 0.98) !important;
                border: 1px solid rgba(255, 255, 255, 0.2) !important;
            }
            
            .leaflet-popup-close-button {
                color: #6c757d !important;
                font-size: 18px !important;
                padding: 8px !important;
                transition: color 0.3s !important;
                font-weight: bold !important;
            }
            
            .leaflet-popup-close-button:hover {
                color: #495057 !important;
                background: none !important;
            }
        `;
        document.head.appendChild(style);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadPoints() {
    try {
        const response = await fetch('/api/points', {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });
        if (!response.ok) {
            throw new Error('Failed to load points');
        }
        
        const points = await response.json();
        updateMap(points);
        updateStats(points);
        
    } catch (error) {
        console.error('Error loading points:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
function updateMap(points) {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    markers.forEach(marker => map.removeLayer(marker));
    markers = [];
    
    points.forEach(point => {
        const isAvailable = point.status === 'available';
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        const icon = L.divIcon({
            className: 'custom-marker',
            html: `<div class="marker-dot ${isAvailable ? 'available' : 'collected'}">
                     <div class="marker-pulse ${isAvailable ? 'pulse' : ''}"></div>
                     <div class="marker-inner">${isAvailable ? 'üì¶' : '‚úÖ'}</div>
                   </div>`,
            iconSize: [24, 24],
            iconAnchor: [12, 12]
        });
        
        const marker = L.marker([point.coordinates.lat, point.coordinates.lng], { icon })
            .addTo(map);
        
        // –î–æ–±–∞–≤–ª—è–µ–º popup —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        let popupContent = `
            <div class="popup-content">
                <h3>${point.name}</h3>
                <p class="status ${point.status}">
                    ${isAvailable ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞' : 'üî¥ –£–∂–µ —Å–æ–±—Ä–∞–Ω–∞'}
                </p>
        `;
        
        if (!isAvailable && point.collectorInfo) {
            popupContent += `
                <div class="collector-info">
                    <p><strong>–°–æ–±—Ä–∞–ª:</strong> ${point.collectorInfo.name}</p>
                    ${point.collectorInfo.signature ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${point.collectorInfo.signature}</p>` : ''}
                    <p><strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
                </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π
            popupContent += `<button onclick="showPointDetails('${point.id}')" class="details-btn">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>`;
        }
        
        popupContent += '</div>';
        marker.bindPopup(popupContent);
        markers.push(marker);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
    addMarkerStyles();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
function addMarkerStyles() {
    if (!document.getElementById('marker-styles')) {
        const style = document.createElement('style');
        style.id = 'marker-styles';
        style.textContent = `
            .custom-marker {
                background: none !important;
                border: none !important;
            }
            
            .marker-dot {
                width: 24px;
                height: 24px;
                border-radius: 50%;
                position: relative;
                border: 3px solid rgba(255, 255, 255, 0.95);
                box-shadow: 
                    0 4px 16px rgba(0, 0, 0, 0.25),
                    0 2px 8px rgba(0, 0, 0, 0.15);
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            }
            
            .marker-dot:hover {
                transform: scale(1.1);
                box-shadow: 
                    0 6px 20px rgba(0, 0, 0, 0.3),
                    0 3px 10px rgba(0, 0, 0, 0.2);
            }
            
            .marker-dot.available {
                background: linear-gradient(45deg, #28a745, #20c997);
            }
            
            .marker-dot.collected {
                background: linear-gradient(45deg, #dc3545, #e74c3c);
            }
            
            .marker-inner {
                font-size: 10px;
                color: white;
                font-weight: bold;
                z-index: 2;
                position: relative;
            }
            
            .marker-pulse {
                position: absolute;
                top: -3px;
                left: -3px;
                right: -3px;
                bottom: -3px;
                border-radius: 50%;
                border: 2px solid #28a745;
                opacity: 0;
            }
            
            .marker-pulse.pulse {
                animation: pulse 2s infinite;
            }
            
            @keyframes pulse {
                0% {
                    transform: scale(1);
                    opacity: 1;
                }
                50% {
                    opacity: 0.3;
                }
                100% {
                    transform: scale(1.5);
                    opacity: 0;
                }
            }
            
            .popup-content {
                min-width: 220px;
            }
            
            .popup-content h3 {
                margin: 0 0 12px 0;
                color: #495057;
                font-size: 1.1rem;
                font-weight: 700;
            }
            
            .status {
                margin: 12px 0;
                font-weight: 600;
                font-size: 0.95rem;
            }
            
            .status.available {
                color: #28a745;
            }
            
            .status.collected {
                color: #dc3545;
            }
            
            .collector-info {
                background: linear-gradient(135deg, #f8f9fa, #e9ecef);
                padding: 12px;
                border-radius: 10px;
                margin: 12px 0;
                font-size: 0.9rem;
                border: 1px solid rgba(108, 117, 125, 0.1);
            }
            
            .collector-info p {
                margin: 6px 0;
                color: #495057;
            }
            
            .details-btn {
                background: linear-gradient(45deg, #495057, #6c757d);
                color: white;
                border: none;
                padding: 10px 18px;
                border-radius: 8px;
                cursor: pointer;
                font-size: 0.9rem;
                font-weight: 600;
                margin-top: 12px;
                width: 100%;
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                box-shadow: 0 2px 8px rgba(73, 80, 87, 0.2);
            }
            
            .details-btn:hover {
                background: linear-gradient(45deg, #343a40, #495057);
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(73, 80, 87, 0.3);
            }
        `;
        document.head.appendChild(style);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats(points) {
    const available = points.filter(p => p.status === 'available').length;
    const collected = points.filter(p => p.status === 'collected').length;
    
    const availableElement = document.getElementById('availableCount');
    const collectedElement = document.getElementById('collectedCount');
    
    if (availableElement && collectedElement) {
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä
        animateNumber(availableElement, parseInt(availableElement.textContent) || 0, available);
        animateNumber(collectedElement, parseInt(collectedElement.textContent) || 0, collected);
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞
function animateNumber(element, from, to) {
    if (from === to) return;
    
    const duration = 500;
    const steps = 20;
    const stepValue = (to - from) / steps;
    const stepDuration = duration / steps;
    
    let current = from;
    let step = 0;
    
    const timer = setInterval(() => {
        step++;
        current += stepValue;
        
        if (step >= steps) {
            element.textContent = to;
            clearInterval(timer);
        } else {
            element.textContent = Math.round(current);
        }
    }, stepDuration);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç–æ—á–∫–∏
async function showPointDetails(pointId) {
    try {
        const response = await fetch(`/api/point/${pointId}/info`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
        }
        
        const point = await response.json();
        
        let modalContent = `
            <h3>${point.name}</h3>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${point.status === 'collected' ? '–°–æ–±—Ä–∞–Ω–∞' : '–î–æ—Å—Ç—É–ø–Ω–∞'}</p>
            <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${point.coordinates.lat.toFixed(6)}, ${point.coordinates.lng.toFixed(6)}</p>
        `;
        
        if (point.status === 'collected' && point.collectorInfo) {
            modalContent += `
                <hr style="margin: 15px 0; border: 1px solid #e9ecef;">
                <h4 style="color: #495057;">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä—â–∏–∫–µ:</h4>
                <p><strong>–ò–º—è:</strong> ${point.collectorInfo.name}</p>
                ${point.collectorInfo.signature ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${point.collectorInfo.signature}</p>` : ''}
                <p><strong>–í—Ä–µ–º—è —Å–±–æ—Ä–∞:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
            `;
            
            if (point.collectorInfo.selfie) {
                modalContent += `
                    <div style="margin-top: 15px;">
                        <strong>–°–µ–ª—Ñ–∏ —Å –º–µ—Å—Ç–∞ –Ω–∞—Ö–æ–¥–∫–∏:</strong><br>
                        <img src="${point.collectorInfo.selfie}" 
                             style="max-width: 100%; max-height: 300px; border-radius: 10px; margin-top: 10px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);"
                             alt="–°–µ–ª—Ñ–∏ —Å–±–æ—Ä—â–∏–∫–∞"
                             loading="lazy">
                    </div>
                `;
            }
        }
        
        document.getElementById('modalTitle').innerHTML = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏';
        document.getElementById('modalBody').innerHTML = modalContent;
        document.getElementById('infoModal').style.display = 'block';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const modal = document.getElementById('infoModal');
        modal.style.opacity = '0';
        setTimeout(() => {
            modal.style.opacity = '1';
            modal.style.transition = 'opacity 0.3s ease';
        }, 10);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—á–∫–µ', 'error');
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeModal() {
    const modal = document.getElementById('infoModal');
    modal.style.opacity = '0';
    setTimeout(() => {
        modal.style.display = 'none';
        modal.style.transition = '';
    }, 300);
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const icons = {
        error: '‚ùå',
        success: '‚úÖ',
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è'
    };
    
    notification.innerHTML = `
        <div class="notification-content">
            <span>${icons[type] || icons.info} ${message}</span>
            <button onclick="this.parentElement.parentElement.remove()">√ó</button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    addNotificationStyles();
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    notification.style.transform = 'translateX(100%)';
    notification.style.opacity = '0';
    
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
        notification.style.opacity = '1';
        notification.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
    }, 10);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.transform = 'translateX(100%)';
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 400);
        }
    }, 5000);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function addNotificationStyles() {
    if (!document.getElementById('notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            .notification {
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 2000;
                background: rgba(255, 255, 255, 0.98);
                border-radius: 12px;
                box-shadow: 
                    0 8px 32px rgba(0, 0, 0, 0.15),
                    0 4px 16px rgba(0, 0, 0, 0.1);
                padding: 16px 20px;
                min-width: 280px;
                max-width: 380px;
                backdrop-filter: blur(15px);
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            
            .notification.error {
                border-left: 4px solid #dc3545;
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.98), rgba(248, 215, 218, 0.3));
            }
            
            .notification.success {
                border-left: 4px solid #28a745;
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.98), rgba(212, 237, 218, 0.3));
            }
            
            .notification.info {
                border-left: 4px solid #495057;
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.98), rgba(248, 249, 250, 0.3));
            }
            
            .notification.warning {
                border-left: 4px solid #ffc107;
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.98), rgba(255, 243, 205, 0.3));
            }
            
            .notification-content {
                display: flex;
                justify-content: space-between;
                align-items: center;
                color: #495057;
                font-weight: 500;
            }
            
            .notification-content button {
                background: none;
                border: none;
                font-size: 1.3rem;
                cursor: pointer;
                color: #6c757d;
                padding: 0;
                margin: 0;
                width: auto;
                margin-left: 12px;
                transition: all 0.3s;
                line-height: 1;
            }
            
            .notification-content button:hover {
                color: #495057;
                transform: scale(1.1);
            }
        `;
        document.head.appendChild(style);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function initRefreshButton() {
    const refreshBtn = document.querySelector('.refresh-btn');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', function() {
            // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
            this.style.transform = 'rotate(360deg) scale(0.9)';
            this.style.transition = 'transform 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            loadPoints();
            
            setTimeout(() => {
                this.style.transform = '';
                this.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
            }, 600);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        refreshBtn.addEventListener('mouseenter', function() {
            if (!this.dataset.tooltip) {
                this.dataset.tooltip = 'true';
                const tooltip = document.createElement('div');
                tooltip.className = 'refresh-tooltip';
                tooltip.textContent = '–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É';
                tooltip.style.cssText = `
                    position: absolute;
                    bottom: 75px;
                    right: 0;
                    background: rgba(0, 0, 0, 0.8);
                    color: white;
                    padding: 8px 12px;
                    border-radius: 6px;
                    font-size: 0.8rem;
                    white-space: nowrap;
                    opacity: 0;
                    transition: opacity 0.3s;
                    pointer-events: none;
                `;
                this.style.position = 'relative';
                this.appendChild(tooltip);
                setTimeout(() => tooltip.style.opacity = '1', 10);
            }
        });
        
        refreshBtn.addEventListener('mouseleave', function() {
            const tooltip = this.querySelector('.refresh-tooltip');
            if (tooltip) {
                tooltip.style.opacity = '0';
                setTimeout(() => tooltip.remove(), 300);
                this.dataset.tooltip = '';
            }
        });
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.addEventListener('click', function(event) {
    const modal = document.getElementById('infoModal');
    if (event.target === modal) {
        closeModal();
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ ESC
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        const modal = document.getElementById('infoModal');
        if (modal && modal.style.display === 'block') {
            closeModal();
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
window.addEventListener('error', function(e) {
    if (e.target.tagName === 'IMG' && e.target.src.includes('openstreetmap')) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–æ–≤ –∫–∞—Ä—Ç—ã');
        showNotification('–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–∞—Ä—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.', 'error');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
window.addEventListener('resize', function() {
    if (map) {
        setTimeout(() => {
            map.invalidateSize();
        }, 100);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
window.addEventListener('online', function() {
    showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...', 'success');
    loadPoints();
});

window.addEventListener('offline', function() {
    showNotification('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 'warning');
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Service Worker –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
if ('serviceWorker' in navigator) {
    window.addEventListener('load', function() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é Service Worker –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–∞–±–æ—Ç—ã
        console.log('Service Worker –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –≤—Å–µ—Ö —Ç–æ—á–∫–∞—Ö
function fitMapToPoints() {
    if (markers.length > 0) {
        const group = new L.featureGroup(markers);
        map.fitBounds(group.getBounds().pad(0.1));
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getCurrentLocation() {
    if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(function(position) {
            const userLat = position.coords.latitude;
            const userLng = position.coords.longitude;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userIcon = L.divIcon({
                className: 'user-location-marker',
                html: '<div style="background: #007bff; width: 20px; height: 20px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 10px rgba(0,0,0,0.3);"></div>',
                iconSize: [20, 20],
                iconAnchor: [10, 10]
            });
            
            L.marker([userLat, userLng], { icon: userIcon })
                .addTo(map)
                .bindPopup('<div style="text-align: center;"><strong>üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong></div>');
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            map.setView([userLat, userLng], 14);
            
            showNotification('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ', 'success');
        }, function(error) {
            console.warn('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
            showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', 'warning');
        });
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
document.addEventListener('DOMContentLoaded', function() {
    const locationBtn = document.createElement('div');
    locationBtn.className = 'location-btn';
    locationBtn.innerHTML = 'üìç';
    locationBtn.style.cssText = `
        position: fixed;
        bottom: 100px;
        right: 25px;
        width: 50px;
        height: 50px;
        background: linear-gradient(45deg, #007bff, #0056b3);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
        box-shadow: 0 4px 16px rgba(0, 123, 255, 0.3);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        z-index: 1000;
    `;
    
    locationBtn.addEventListener('click', getCurrentLocation);
    locationBtn.addEventListener('mouseenter', function() {
        this.style.transform = 'scale(1.1)';
    });
    locationBtn.addEventListener('mouseleave', function() {
        this.style.transform = 'scale(1)';
    });
    
    document.body.appendChild(locationBtn);
});

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('unhandledrejection', function(event) {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', event.reason);
    showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', 'error');
    event.preventDefault();
});

// –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    console.log('üéØ PlasticBoy Debug Mode');
    console.log('üìç Almaty Center:', ALMATY_CENTER);
    console.log('üó∫Ô∏è Map initialized with grayscale theme');
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
window.PlasticBoy = {
    map,
    loadPoints,
    showNotification,
    getCurrentLocation,
    fitMapToPoints
};
