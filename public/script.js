// –°–£–ü–ï–†-–ë–´–°–¢–†–´–ô SCRIPT.JS –¥–ª—è PlasticBoy
// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫

let map;
let markers = [];
let markersLayer; // –ì—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
const ALMATY_CENTER = [43.2220, 76.8512];

// –§–ª–∞–≥–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
let isAppInitialized = false;
let pointsCache = null;
let lastUpdateTime = 0;
let isLoadingPoints = false;

// –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
const pointsById = new Map();
const markerPool = []; // –ü—É–ª –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤

// –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚ö° –°–£–ü–ï–†-–±—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PlasticBoy');
    initControlButtons();
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫ –º–∞—Ä–∫–µ—Ä–æ–≤
    preloadMarkerIcons();
});

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
function preloadMarkerIcons() {
    const iconPreloadStyles = `
        .marker-preload {
            position: absolute;
            left: -9999px;
            top: -9999px;
            opacity: 0;
            pointer-events: none;
        }
        .fast-marker-dot.available { background: linear-gradient(45deg, #4CAF50, #45a049); }
        .fast-marker-dot.collected { background: linear-gradient(45deg, #f44336, #e53935); }
    `;
    
    if (!document.getElementById('marker-preload-styles')) {
        const style = document.createElement('style');
        style.id = 'marker-preload-styles';
        style.textContent = iconPreloadStyles;
        document.head.appendChild(style);
    }
}

// –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    if (isAppInitialized) return;
    
    console.log('‚ö° –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã');
    
    map = L.map('map', {
        zoomControl: true,
        attributionControl: true,
        preferCanvas: true, // –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        maxZoom: 18,
        zoomAnimation: true,
        markerZoomAnimation: true,
        fadeAnimation: true,
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        updateWhenIdle: false,
        updateWhenZooming: false,
        keepBuffer: 4, // –ë–æ–ª—å—à–µ –±—É—Ñ–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        renderer: L.canvas() // Canvas —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±—ã—Å—Ç—Ä–µ–µ
    }).setView(ALMATY_CENTER, 13);
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    markersLayer = L.layerGroup().addTo(map);
    
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors',
        maxZoom: 18,
        keepBuffer: 4,
        updateWhenIdle: false,
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        crossOrigin: true,
        timeout: 5000,
        retryDelay: 500,
        maxRetry: 2
    }).addTo(map);
    
    // –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∏–ª–∏
    addFastGrayscaleMapStyles();
    
    // –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    map.invalidateSize();
    window.map = map;
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫
    setTimeout(() => {
        console.log('‚ö° –ó–∞–ø—É—Å–∫ –ú–ì–ù–û–í–ï–ù–ù–û–ô –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫');
        instantLoadPoints();
    }, 50);
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã)
    setInterval(() => {
        if (!isLoadingPoints) {
            fastLoadPoints();
        }
    }, 15000);
    
    isAppInitialized = true;
}

// –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫
async function instantLoadPoints() {
    if (isLoadingPoints) return;
    
    try {
        isLoadingPoints = true;
        const startTime = performance.now();
        
        console.log('‚ö° –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const response = await fetch('/api/points', {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Cache-Control': 'no-cache'
            },
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ–Ω—ã
            signal: AbortSignal.timeout(3000)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const points = await response.json();
        const loadTime = performance.now() - startTime;
        
        console.log(`‚ö° –ú–ì–ù–û–í–ï–ù–ù–û –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${points.length} —Ç–æ—á–µ–∫ –∑–∞ ${Math.round(loadTime)}ms`);
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pointsCache = points;
        lastUpdateTime = Date.now();
        
        // –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        buildPointsIndex(points);
        
        // –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await Promise.all([
            ultraFastUpdateMap(points),
            instantUpdateStats(points)
        ]);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏
        if (typeof window.PlasticBoyLoader !== 'undefined') {
            window.PlasticBoyLoader.onPointsLoaded();
        }
        
        return points;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (pointsCache) {
            console.log('‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            ultraFastUpdateMap(pointsCache);
            instantUpdateStats(pointsCache);
        } else {
            showFastNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫ ‚ö†Ô∏è', 'error');
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (typeof window.PlasticBoyLoader !== 'undefined') {
            window.PlasticBoyLoader.onPointsLoaded();
        }
    } finally {
        isLoadingPoints = false;
    }
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
function buildPointsIndex(points) {
    pointsById.clear();
    points.forEach(point => {
        pointsById.set(point.id, point);
    });
}

// –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
async function ultraFastUpdateMap(points) {
    if (!map || !markersLayer) {
        console.warn('–ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        return;
    }
    
    const updateStart = performance.now();
    console.log(`‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${points.length} –º–∞—Ä–∫–µ—Ä–æ–≤`);
    
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
    markersLayer.clearLayers();
    markers.length = 0;
    
    // –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
    const markersToAdd = [];
    const fragment = document.createDocumentFragment();
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const availablePoints = [];
    const collectedPoints = [];
    
    points.forEach(point => {
        if (point.status === 'available') {
            availablePoints.push(point);
        } else {
            collectedPoints.push(point);
        }
    });
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –ø–∞—á–∫–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const createMarkerBatch = (pointsBatch, isAvailable) => {
        return pointsBatch.map(point => {
            // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏–∑ –ø—É–ª–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            const marker = createFastMarker(point, isAvailable);
            markersToAdd.push(marker);
            return marker;
        });
    };
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –ø–∞—á–∫–∞–º–∏
    createMarkerBatch(availablePoints, true);
    createMarkerBatch(collectedPoints, false);
    
    // –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∫ —Å–ª–æ—é
    markersToAdd.forEach(marker => {
        markersLayer.addLayer(marker);
        markers.push(marker);
    });
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∑–∫–∏
    window.markers = markers;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    addUltraFastMarkerStyles();
    
    const updateTime = performance.now() - updateStart;
    console.log(`‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ ${Math.round(updateTime)}ms`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
function createFastMarker(point, isAvailable) {
    // –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –∏–∫–æ–Ω–∫–∞
    const icon = L.divIcon({
        className: 'ultra-fast-marker',
        html: `<div class="ultra-fast-dot ${isAvailable ? 'available' : 'collected'}">${isAvailable ? 'üì¶' : '‚úÖ'}</div>`,
        iconSize: [24, 24],
        iconAnchor: [12, 12],
        popupAnchor: [0, -12]
    });
    
    const marker = L.marker([point.coordinates.lat, point.coordinates.lng], { 
        icon,
        riseOnHover: true // –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    });
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π popup
    const popupContent = createFastPopup(point, isAvailable);
    marker.bindPopup(popupContent, {
        maxWidth: 250,
        className: 'ultra-fast-popup'
    });
    
    return marker;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ø–∞–ø–∞
function createFastPopup(point, isAvailable) {
    let content = `
        <div class="ultra-fast-popup-content">
            <h3>${point.name}</h3>
            <div class="status-badge ${point.status}">
                ${isAvailable ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞' : 'üî¥ –°–æ–±—Ä–∞–Ω–∞'}
            </div>
    `;
    
    if (!isAvailable && point.collectorInfo) {
        content += `
            <div class="collector-summary">
                <strong>–°–æ–±—Ä–∞–ª:</strong> ${point.collectorInfo.name}<br>
                <strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU', {
                    day: '2-digit',
                    month: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit'
                })}
            </div>
            <button onclick="showPointDetails('${point.id}')" class="ultra-fast-btn">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
        `;
    }
    
    content += '</div>';
    return content;
}

// –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function instantUpdateStats(points) {
    const available = points.filter(p => p.status === 'available').length;
    const collected = points.filter(p => p.status === 'collected').length;
    
    const availableElement = document.getElementById('availableCount');
    const collectedElement = document.getElementById('collectedCount');
    
    if (availableElement && collectedElement) {
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        const currentAvailable = parseInt(availableElement.textContent) || 0;
        const currentCollected = parseInt(collectedElement.textContent) || 0;
        
        if (currentAvailable === 0 && currentCollected === 0) {
            // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
            availableElement.textContent = available;
            collectedElement.textContent = collected;
        } else {
            // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –±—ã—Å—Ç—Ä–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
            ultraFastAnimateNumber(availableElement, currentAvailable, available);
            ultraFastAnimateNumber(collectedElement, currentCollected, collected);
        }
    }
    
    console.log(`‚ö° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ú–ì–ù–û–í–ï–ù–ù–û: ${available} –¥–æ—Å—Ç—É–ø–Ω–æ, ${collected} —Å–æ–±—Ä–∞–Ω–æ`);
}

// –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª
function ultraFastAnimateNumber(element, from, to) {
    if (from === to) return;
    
    const duration = 200; // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
    const steps = 8; // –ú–µ–Ω—å—à–µ —à–∞–≥–æ–≤
    const stepValue = (to - from) / steps;
    const stepDuration = duration / steps;
    
    let current = from;
    let step = 0;
    
    element.style.transform = 'scale(1.05)';
    element.style.transition = 'transform 0.15s ease';
    
    const timer = setInterval(() => {
        step++;
        current += stepValue;
        
        if (step >= steps) {
            element.textContent = to;
            element.style.transform = 'scale(1)';
            clearInterval(timer);
        } else {
            element.textContent = Math.round(current);
        }
    }, stepDuration);
}

// –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
function addUltraFastMarkerStyles() {
    if (!document.getElementById('ultra-fast-marker-styles')) {
        const style = document.createElement('style');
        style.id = 'ultra-fast-marker-styles';
        style.textContent = `
            .ultra-fast-marker {
                background: none !important;
                border: none !important;
            }
            
            .ultra-fast-dot {
                width: 24px;
                height: 24px;
                border-radius: 50%;
                border: 2px solid white;
                box-shadow: 0 2px 8px rgba(0,0,0,0.25);
                transition: transform 0.15s ease, box-shadow 0.15s ease;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 12px;
                color: white;
                text-shadow: 0 1px 2px rgba(0,0,0,0.5);
            }
            
            .ultra-fast-dot:hover {
                transform: scale(1.15);
                box-shadow: 0 4px 12px rgba(0,0,0,0.35);
            }
            
            .ultra-fast-dot.available {
                background: linear-gradient(45deg, #4CAF50, #45a049);
            }
            
            .ultra-fast-dot.collected {
                background: linear-gradient(45deg, #f44336, #e53935);
            }
            
            .ultra-fast-popup-content {
                min-width: 180px;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            }
            
            .ultra-fast-popup-content h3 {
                margin: 0 0 8px 0;
                color: #333;
                font-size: 1rem;
                font-weight: 600;
            }
            
            .status-badge {
                display: inline-block;
                padding: 4px 8px;
                border-radius: 12px;
                font-size: 0.8rem;
                font-weight: 600;
                margin-bottom: 8px;
            }
            
            .status-badge.available {
                background: rgba(76, 175, 80, 0.1);
                color: #4CAF50;
                border: 1px solid rgba(76, 175, 80, 0.3);
            }
            
            .status-badge.collected {
                background: rgba(244, 67, 54, 0.1);
                color: #f44336;
                border: 1px solid rgba(244, 67, 54, 0.3);
            }
            
            .collector-summary {
                background: #f8f9fa;
                padding: 6px 8px;
                border-radius: 6px;
                margin: 6px 0;
                font-size: 0.8rem;
                line-height: 1.3;
            }
            
            .ultra-fast-btn {
                background: linear-gradient(45deg, #667eea, #764ba2);
                color: white;
                border: none;
                padding: 6px 12px;
                border-radius: 6px;
                cursor: pointer;
                font-size: 0.8rem;
                margin-top: 6px;
                width: 100%;
                transition: background 0.15s;
            }
            
            .ultra-fast-btn:hover {
                background: linear-gradient(45deg, #5a67d8, #6b46c1);
            }
            
            .ultra-fast-popup {
                border-radius: 10px;
            }
        `;
        document.head.appendChild(style);
    }
}

// –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
function initControlButtons() {
    const locationBtn = document.querySelector('.location-btn');
    
    if (locationBtn) {
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        locationBtn.addEventListener('mousedown', function() {
            this.style.transform = 'translateY(-1px)';
        }, { passive: true });
        
        locationBtn.addEventListener('mouseup', function() {
            this.style.transform = '';
        }, { passive: true });
    }
}

// –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
function addFastGrayscaleMapStyles() {
    if (!document.getElementById('fast-grayscale-styles')) {
        const style = document.createElement('style');
        style.id = 'fast-grayscale-styles';
        style.textContent = `
            .leaflet-tile-pane {
                filter: grayscale(100%) contrast(1.1) brightness(1.05) !important;
                will-change: transform;
            }
            
            .leaflet-marker-pane,
            .leaflet-popup-pane,
            .leaflet-control-container {
                filter: none !important;
            }
            
            .leaflet-container {
                background: #f8f9fa !important;
            }
            
            .leaflet-control-zoom {
                margin-top: 15px !important;
                margin-left: 15px !important;
            }
            
            .leaflet-control-attribution {
                margin-bottom: 8px !important;
                margin-right: 8px !important;
            }
        `;
        document.head.appendChild(style);
    }
}

// –ë—ã—Å—Ç—Ä–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
function getCurrentLocation() {
    const locationBtn = document.querySelector('.location-btn');
    
    if (!navigator.geolocation) {
        showFastNotification('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
        return;
    }
    
    const originalText = locationBtn.innerHTML;
    locationBtn.innerHTML = '‚ö° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...';
    locationBtn.disabled = true;
    locationBtn.style.opacity = '0.8';
    
    navigator.geolocation.getCurrentPosition(
        function(position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            // –ë—ã—Å—Ç—Ä–∞—è –∏–∫–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userIcon = L.divIcon({
                className: 'fast-user-marker',
                html: `<div style="
                    background: linear-gradient(45deg, #007bff, #0056b3);
                    width: 22px; 
                    height: 22px; 
                    border-radius: 50%; 
                    border: 2px solid white; 
                    box-shadow: 0 3px 10px rgba(0,0,0,0.3);
                    transition: transform 0.2s ease;
                "></div>`,
                iconSize: [22, 22],
                iconAnchor: [11, 11]
            });
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä
            if (window.userMarker) {
                map.removeLayer(window.userMarker);
            }
            
            // –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
            window.userMarker = L.marker([lat, lng], { icon: userIcon })
                .addTo(map)
                .bindPopup(`
                    <div style="text-align: center; min-width: 140px;">
                        <strong>üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong><br>
                        <small style="color: #666;">
                            ${lat.toFixed(4)}, ${lng.toFixed(4)}
                        </small>
                    </div>
                `);
            
            // –ë—ã—Å—Ç—Ä–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
            map.flyTo([lat, lng], 16, {
                duration: 1,
                easeLinearity: 0.5
            });
            
            showFastNotification('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ ‚ö°', 'success');
            
            // –ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
            locationBtn.style.opacity = '';
        },
        function(error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
            
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    errorMessage = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω';
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
                    break;
                case error.TIMEOUT:
                    errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
                    break;
            }
            
            showFastNotification(errorMessage, 'error');
            
            // –ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
            locationBtn.style.opacity = '';
        },
        {
            enableHighAccuracy: true,
            timeout: 6000, // –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç
            maximumAge: 300000
        }
    );
}

// –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ (–ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async function loadPoints() {
    return await instantLoadPoints();
}

// –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ (–¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
async function fastLoadPoints() {
    return await instantLoadPoints();
}

// –ë—ã—Å—Ç—Ä—ã–µ –¥–µ—Ç–∞–ª–∏ —Ç–æ—á–∫–∏
async function showPointDetails(pointId) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cachedPoint = pointsById.get(pointId);
        if (cachedPoint) {
            displayPointDetails(cachedPoint);
            return;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º
        const response = await fetch(`/api/point/${pointId}/info`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        }
        
        const point = await response.json();
        displayPointDetails(point);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        showFastNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'error');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–æ—á–∫–∏
function displayPointDetails(point) {
    let modalContent = `
        <h3 style="color: #667eea; margin-bottom: 12px;">${point.name}</h3>
        <div style="background: #f8f9fa; padding: 12px; border-radius: 8px; margin-bottom: 12px;">
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: ${point.status === 'collected' ? '#f44336' : '#4CAF50'}">${point.status === 'collected' ? '–°–æ–±—Ä–∞–Ω–∞' : '–î–æ—Å—Ç—É–ø–Ω–∞'}</span></p>
            <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${point.coordinates.lat.toFixed(4)}, ${point.coordinates.lng.toFixed(4)}</p>
        </div>
    `;
    
    if (point.status === 'collected' && point.collectorInfo) {
        modalContent += `
            <div style="border-left: 3px solid #667eea; padding-left: 12px; margin: 12px 0;">
                <h4 style="color: #333; margin-bottom: 8px;">–°–±–æ—Ä—â–∏–∫:</h4>
                <p><strong>–ò–º—è:</strong> ${point.collectorInfo.name}</p>
                ${point.collectorInfo.signature ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> <em>"${point.collectorInfo.signature}"</em></p>` : ''}
                <p><strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
            </div>
        `;
        
        if (point.collectorInfo.selfie) {
            modalContent += `
                <div style="margin-top: 15px; text-align: center;">
                    <strong style="color: #667eea;">–°–µ–ª—Ñ–∏:</strong><br>
                    <img src="${point.collectorInfo.selfie}" 
                         style="max-width: 100%; max-height: 250px; border-radius: 8px; margin-top: 8px; box-shadow: 0 3px 10px rgba(0,0,0,0.1);"
                         alt="–°–µ–ª—Ñ–∏ —Å–±–æ—Ä—â–∏–∫–∞">
                </div>
            `;
        }
    }
    
    document.getElementById('modalTitle').innerHTML = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏';
    document.getElementById('modalBody').innerHTML = modalContent;
    document.getElementById('infoModal').style.display = 'block';
}

// –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    document.getElementById('infoModal').style.display = 'none';
}

// –ë—ã—Å—Ç—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showFastNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `fast-notification ${type}`;
    
    const icons = {
        error: '‚ùå',
        success: '‚úÖ',
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è'
    };
    
    notification.innerHTML = `
        <div class="fast-notification-content">
            <span>${icons[type] || icons.info} ${message}</span>
            <button onclick="this.parentElement.parentElement.remove()">√ó</button>
        </div>
    `;
    
    addFastNotificationStyles();
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'fastSlideOut 0.2s ease';
            setTimeout(() => notification.remove(), 200);
        }
    }, 3000);
}

// –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function addFastNotificationStyles() {
    if (!document.getElementById('fast-notification-styles')) {
        const style = document.createElement('style');
        style.id = 'fast-notification-styles';
        style.textContent = `
            .fast-notification {
                position: fixed;
                top: 15px;
                right: 15px;
                z-index: 2000;
                background: rgba(255, 255, 255, 0.98);
                border-radius: 8px;
                box-shadow: 0 6px 24px rgba(0,0,0,0.15);
                backdrop-filter: blur(8px);
                padding: 12px;
                min-width: 250px;
                max-width: 350px;
                animation: fastSlideIn 0.3s ease;
                border: 1px solid rgba(255,255,255,0.3);
                font-size: 0.9rem;
            }
            
            .fast-notification.error {
                border-left: 3px solid #f44336;
            }
            
            .fast-notification.success {
                border-left: 3px solid #4CAF50;
            }
            
            .fast-notification.info {
                border-left: 3px solid #2196F3;
            }
            
            .fast-notification.warning {
                border-left: 3px solid #ff9800;
            }
            
            .fast-notification-content {
                display: flex;
                justify-content: space-between;
                align-items: center;
                font-weight: 500;
            }
            
            .fast-notification-content button {
                background: none;
                border: none;
                font-size: 1.1rem;
                cursor: pointer;
                color: #999;
                padding: 0;
                margin-left: 10px;
                transition: color 0.2s;
            }
            
            .fast-notification-content button:hover {
                color: #666;
            }
            
            @keyframes fastSlideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
            
            @keyframes fastSlideOut {
                from {
                    transform: translateX(0);
                    opacity: 1;
                }
                to {
                    transform: translateX(100%);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);
    }
}

// –ë—ã—Å—Ç—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
window.addEventListener('click', function(event) {
    const modal = document.getElementById('infoModal');
    if (event.target === modal) {
        closeModal();
    }
}, { passive: true });

window.addEventListener('error', function(e) {
    if (e.target.tagName === 'IMG' && e.target.src.includes('openstreetmap')) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–æ–≤ –∫–∞—Ä—Ç—ã');
        showFastNotification('–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–æ–π', 'warning');
    }
}, { passive: true });

// –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
window.addEventListener('resize', function() {
    if (map) {
        clearTimeout(window.fastResizeTimeout);
        window.fastResizeTimeout = setTimeout(() => {
            map.invalidateSize();
        }, 50); // –ï—â–µ –±—ã—Å—Ç—Ä–µ–µ
    }
}, { passive: true });

// –ë—ã—Å—Ç—Ä—ã–µ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
window.addEventListener('online', function() {
    showFastNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚ö°', 'success');
    if (isAppInitialized && !isLoadingPoints) {
        setTimeout(() => instantLoadPoints(), 100);
    }
}, { passive: true });

window.addEventListener('offline', function() {
    showFastNotification('–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ‚ö†Ô∏è', 'warning');
}, { passive: true });

// –ë—ã—Å—Ç—Ä—ã–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeModal();
    }
    
    if (event.ctrlKey && event.key === 'l') {
        event.preventDefault();
        getCurrentLocation();
    }
    
    // –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ø–æ F5
    if (event.key === 'F5' && event.ctrlKey) {
        event.preventDefault();
        if (!isLoadingPoints) {
            showFastNotification('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ ‚ö°', 'info');
            instantLoadPoints();
        }
    }
}, { passive: false });

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
function preloadCriticalResources() {
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–∂–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    const preloadUrls = ['/api/points'];
    
    preloadUrls.forEach(url => {
        fetch(url, { 
            method: 'HEAD',
            mode: 'no-cors'
        }).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
    });
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function optimizePerformance() {
    // –í–∫–ª—é—á–∞–µ–º –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
    const styleOptimizations = `
        .ultra-fast-dot,
        .fast-notification,
        .ultra-fast-popup-content {
            will-change: transform;
            transform: translateZ(0);
        }
        
        .leaflet-zoom-animated {
            will-change: transform;
        }
        
        .leaflet-tile {
            will-change: transform;
        }
    `;
    
    if (!document.getElementById('performance-optimizations')) {
        const style = document.createElement('style');
        style.id = 'performance-optimizations';
        style.textContent = styleOptimizations;
        document.head.appendChild(style);
    }
}

// –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã
window.PlasticBoy = {
    map,
    markers,
    markersLayer,
    loadPoints: instantLoadPoints,
    fastLoadPoints: instantLoadPoints,
    showFastNotification,
    getCurrentLocation,
    showPointDetails,
    closeModal,
    initMap,
    ultraFastUpdateMap,
    instantUpdateStats,
    pointsCache,
    pointsById
};

// –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
window.showNotification = showFastNotification;
window.updateMap = ultraFastUpdateMap;
window.updateStats = instantUpdateStats;
window.loadPoints = instantLoadPoints;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    preloadCriticalResources();
    optimizePerformance();
});

console.log('‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–´–ô PlasticBoy script –≥–æ—Ç–æ–≤ –∫ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ');

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∑–∫–∏
if (typeof window.PlasticBoyLoader !== 'undefined') {
    window.PlasticBoyLoader.instantLoadPoints = instantLoadPoints;
    window.PlasticBoyLoader.ultraFastUpdateMap = ultraFastUpdateMap;
}
