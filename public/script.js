// PlasticBoy v2.0 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –¥–ª—è –ü–ö –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö
(function() {
    'use strict';
    
    console.log('üéØ PlasticBoy - FIXED Script initialization');
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let map = null;
    let markers = [];
    let isInitialized = false;
    let markersPool = []; // –ü—É–ª –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    let lastMarkersCount = 0;
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
    const ALMATY_CENTER = [43.2220, 76.8512];
    
    // –£–°–ö–û–†–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const FastCache = {
        key: 'plasticboy_points_v2_optimized',
        ttl: 3 * 60 * 1000, // 3 –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        save: function(data) {
            try {
                const item = JSON.stringify({
                    data: data,
                    timestamp: Date.now(),
                    version: '2.0'
                });
                localStorage.setItem(this.key, item);
                console.log('üíæ Cached ' + data.length + ' points');
            } catch (e) {
                console.warn('‚ö†Ô∏è Cache save failed:', e);
            }
        },
        
        load: function() {
            try {
                const item = localStorage.getItem(this.key);
                if (!item) return null;
                
                const parsed = JSON.parse(item);
                const age = Date.now() - parsed.timestamp;
                
                if (age > this.ttl) {
                    localStorage.removeItem(this.key);
                    console.log('‚è∞ Cache expired');
                    return null;
                }
                
                console.log('üì¶ Loaded ' + parsed.data.length + ' points from cache (age: ' + Math.round(age/1000) + 's)');
                return parsed.data;
            } catch (e) {
                console.warn('‚ö†Ô∏è Cache read failed:', e);
                localStorage.removeItem(this.key);
                return null;
            }
        },
        
        clear: function() {
            localStorage.removeItem(this.key);
            console.log('üóëÔ∏è Cache cleared');
        },
        
        getAge: function() {
            try {
                const item = localStorage.getItem(this.key);
                if (!item) return null;
                const parsed = JSON.parse(item);
                return Date.now() - parsed.timestamp;
            } catch (e) {
                return null;
            }
        }
    };
    
    // –î–µ–±–∞—É–Ω—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
    function isDOMReady() {
        return document.readyState === 'complete' || document.readyState === 'interactive';
    }
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
    function waitForDOM() {
        return new Promise((resolve) => {
            if (isDOMReady()) {
                resolve();
            } else {
                document.addEventListener('DOMContentLoaded', resolve, { once: true });
            }
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Leaflet
    function waitForLeaflet() {
        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 100; // 10 —Å–µ–∫—É–Ω–¥
            
            const checkLeaflet = () => {
                attempts++;
                
                if (typeof L !== 'undefined' && L.map && L.tileLayer) {
                    console.log('‚úÖ Leaflet ready in ' + attempts + ' attempts');
                    resolve();
                } else if (attempts >= maxAttempts) {
                    console.error('‚ùå Leaflet timeout after ' + attempts + ' attempts');
                    reject(new Error('Leaflet loading timeout'));
                } else {
                    setTimeout(checkLeaflet, 100);
                }
            };
            
            checkLeaflet();
        });
    }
    
    // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async function ultraFastInit() {
        try {
            console.log('üöÄ Starting ULTRA FAST initialization');
            const startTime = performance.now();
            
            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ DOM –∏ Leaflet
            await Promise.all([
                waitForDOM(),
                waitForLeaflet()
            ]);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
            if (window.AppLoader) {
                window.AppLoader.onLeafletReady && window.AppLoader.onLeafletReady();
                window.AppLoader.updateLoader && window.AppLoader.updateLoader();
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è –ü–ö
            await initMapFixed();
            
            // –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫
            await loadPointsLightning();
            
            const totalTime = performance.now() - startTime;
            console.log(`üéâ ULTRA FAST init completed in ${totalTime.toFixed(2)}ms`);
            
        } catch (error) {
            console.error('‚ùå Ultra fast init error:', error);
            // Fallback –∫ –æ–±—ã—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            setTimeout(() => fallbackInit(), 1000);
        }
    }
    
    // –†–µ–∑–µ—Ä–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async function fallbackInit() {
        try {
            console.log('üîÑ Fallback initialization...');
            
            await waitForDOM();
            await waitForLeaflet();
            await initMapFixed();
            await loadPointsLightning();
            
            console.log('‚úÖ Fallback init completed');
        } catch (error) {
            console.error('‚ùå Fallback init failed:', error);
            showErrorMessage('Application failed to load. Please refresh the page.');
        }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è –ü–ö
    function initMapFixed() {
        return new Promise((resolve, reject) => {
            if (isInitialized) {
                resolve();
                return;
            }
            
            const mapElement = document.getElementById('map');
            if (!mapElement) {
                reject(new Error('Map element missing'));
                return;
            }
            
            try {
                console.log('üó∫Ô∏è FIXED map creation for PC');
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                mapElement.style.width = '100%';
                mapElement.style.height = '500px';
                mapElement.style.minHeight = '500px';
                mapElement.style.display = 'block';
                mapElement.style.position = 'relative';
                mapElement.style.zIndex = '1';
                
                // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM
                setTimeout(() => {
                    try {
                        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ü–ö
                        map = L.map('map', {
                            center: ALMATY_CENTER,
                            zoom: 13,
                            zoomControl: true,
                            preferCanvas: false, // –ò–ó–ú–ï–ù–ï–ù–û: SVG —Ä–µ–Ω–¥–µ—Ä–µ—Ä –ª—É—á—à–µ –¥–ª—è –ü–ö
                            attributionControl: true,
                            scrollWheelZoom: true,
                            doubleClickZoom: true,
                            touchZoom: true,
                            keyboard: true,
                            dragging: true,
                            boxZoom: true,
                            tap: false, // –û—Ç–∫–ª—é—á–∞–µ–º tap –¥–ª—è –ü–ö
                            trackResize: true, // –í–ê–ñ–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
                            worldCopyJump: false,
                            closePopupOnClick: true,
                            maxBounds: null,
                            maxBoundsViscosity: 1.0,
                            inertia: true,
                            inertiaDeceleration: 3000,
                            inertiaMaxSpeed: Infinity,
                            easeLinearity: 0.2,
                            zoomSnap: 1, // –ò–ó–ú–ï–ù–ï–ù–û: –¶–µ–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑—É–º–∞ –¥–ª—è –ü–ö
                            zoomDelta: 1, // –ò–ó–ú–ï–ù–ï–ù–û: –®–∞–≥ –∑—É–º–∞ 1 –¥–ª—è –ü–ö
                            wheelPxPerZoomLevel: 60 // –ò–ó–ú–ï–ù–ï–ù–û: –ë–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–µ—Å–æ –º—ã—à–∏
                        });
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ü–ö
                        const tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                            attribution: '¬© OpenStreetMap contributors',
                            maxZoom: 18,
                            minZoom: 3,
                            tileSize: 256,
                            crossOrigin: true,
                            keepBuffer: 4, // –£–í–ï–õ–ò–ß–ï–ù–û: –ë–æ–ª—å—à–µ –±—É—Ñ–µ—Ä –¥–ª—è –ü–ö
                            updateWhenZooming: true, // –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∑—É–º–µ –Ω–∞ –ü–ö
                            updateWhenIdle: false, // –ò–ó–ú–ï–ù–ï–ù–û: –ù–µ –∂–¥–µ–º idle –Ω–∞ –ü–ö
                            detectRetina: true,
                            maxNativeZoom: 18,
                            subdomains: 'abc',
                            errorTileUrl: '',
                            zoomOffset: 0,
                            opacity: 1,
                            zIndex: 1,
                            unloadInvisibleTiles: true,
                            updateInterval: 200,
                            reuseTiles: true
                        });
                        
                        tileLayer.addTo(map);
                        
                        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
                        setTimeout(() => {
                            map.invalidateSize(true);
                            console.log('üó∫Ô∏è Map size invalidated');
                            
                            // –ï—â–µ –æ–¥–Ω–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                            setTimeout(() => {
                                map.invalidateSize(true);
                                console.log('üó∫Ô∏è Map size double-checked');
                            }, 1000);
                        }, 100);
                        
                        // –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
                        addOptimizedMapStyles();
                        
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
                        if (window.AppLoader && window.AppLoader.onMapReady) {
                            window.AppLoader.onMapReady();
                        }
                        
                        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç—ã
                        map.on('load', () => {
                            console.log('‚úÖ Map loaded event');
                            map.invalidateSize(true);
                        });
                        
                        map.on('resize', () => {
                            console.log('üîÑ Map resize event');
                            setTimeout(() => map.invalidateSize(true), 100);
                        });
                        
                        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã
                        map.whenReady(() => {
                            console.log('üó∫Ô∏è Map when ready triggered');
                            
                            // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
                            const invalidationAttempts = [50, 200, 500, 1000, 2000];
                            invalidationAttempts.forEach(delay => {
                                setTimeout(() => {
                                    if (map) {
                                        map.invalidateSize(true);
                                        console.log(`üîÑ Map invalidated at ${delay}ms`);
                                    }
                                }, delay);
                            });
                            
                            isInitialized = true;
                            console.log('‚úÖ FIXED map ready for PC');
                            
                            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
                            setInterval(loadPointsLightning, 45000);
                            
                            resolve();
                        });
                        
                    } catch (mapError) {
                        console.error('‚ùå Map creation error:', mapError);
                        reject(mapError);
                    }
                }, 200); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ü–ö
                
            } catch (error) {
                console.error('‚ùå Fixed map error:', error);
                reject(error);
            }
        });
    }
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–∞—Ä—Ç—ã —Å —Ñ–∏–∫—Å–∞–º–∏ –¥–ª—è –ü–ö
    function addOptimizedMapStyles() {
        if (document.getElementById('optimized-map-styles')) return;
        
        const style = document.createElement('style');
        style.id = 'optimized-map-styles';
        style.textContent = `
            /* –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–ò–ö–°–´ –î–õ–Ø –ü–ö */
            #map {
                width: 100% !important;
                height: 500px !important;
                min-height: 500px !important;
                display: block !important;
                position: relative !important;
                z-index: 1 !important;
                background: #f8f9fa !important;
            }
            
            .leaflet-container {
                width: 100% !important;
                height: 100% !important;
                position: relative !important;
                overflow: hidden !important;
                background: #f8f9fa !important;
                font-family: 'ABC Oracle', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
                font-weight: 500 !important;
            }
            
            .leaflet-map-pane {
                position: absolute !important;
                left: 0 !important;
                top: 0 !important;
                width: 100% !important;
                height: 100% !important;
            }
            
            .leaflet-tile-pane {
                position: absolute !important;
                left: 0 !important;
                top: 0 !important;
                width: 100% !important;
                height: 100% !important;
                z-index: 2 !important;
            }
            
            .leaflet-tile {
                position: absolute !important;
                left: 0 !important;
                top: 0 !important;
                width: 256px !important;
                height: 256px !important;
                border: none !important;
                margin: 0 !important;
                padding: 0 !important;
                display: block !important;
            }
            
            /* –ú–∞—Ä–∫–µ—Ä—ã */
            .marker-icon { background: none !important; border: none !important; }
            .marker-dot {
                width: 20px; height: 20px; border-radius: 50%;
                border: 2px solid white; box-shadow: 0 3px 8px rgba(0,0,0,0.3);
                transition: transform 0.2s ease; cursor: pointer;
                will-change: transform;
            }
            .marker-dot:hover { transform: scale(1.2); }
            .marker-dot.available { background: linear-gradient(45deg, #4CAF50, #45a049); }
            .marker-dot.collected { background: linear-gradient(45deg, #f44336, #e53935); }
            
            .user-marker { background: none !important; border: none !important; }
            .user-dot {
                width: 22px; height: 22px; border-radius: 50%;
                background: linear-gradient(45deg, #007bff, #0056b3);
                border: 2px solid white; box-shadow: 0 3px 10px rgba(0,0,0,0.3);
                position: relative;
            }
            .user-dot::after {
                content: ''; position: absolute; top: -4px; left: -4px; right: -4px; bottom: -4px;
                border-radius: 50%; border: 2px solid #007bff; opacity: 0.3;
                animation: userPulse 2s infinite;
            }
            @keyframes userPulse {
                0% { transform: scale(1); opacity: 0.7; }
                50% { opacity: 0.2; }
                100% { transform: scale(2); opacity: 0; }
            }
            
            /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ popup –¥–ª—è –ü–ö */
            .leaflet-popup-content-wrapper {
                background: rgba(255, 255, 255, 0.98) !important;
                border-radius: 12px !important;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15) !important;
                backdrop-filter: blur(15px) !important;
                border: 1px solid rgba(255, 255, 255, 0.2) !important;
                max-width: 320px !important; /* –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ü–ö */
                font-family: 'ABC Oracle', sans-serif !important;
                font-weight: 500 !important;
            }
            
            .leaflet-popup-content {
                margin: 12px 15px !important;
                line-height: 1.4 !important;
                text-align: center !important;
                font-size: 0.95rem !important; /* –ß—É—Ç—å –±–æ–ª—å—à–µ –¥–ª—è –ü–ö */
            }
            
            /* –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ popup */
            .popup-content {
                min-width: 220px; /* –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ü–ö */
                text-align: center !important;
                padding: 5px;
            }
            .popup-content h3 {
                margin: 0 0 10px 0; color: #333; font-size: 1.1rem;
                font-family: 'ABC Oracle', sans-serif; font-weight: 500;
                text-align: center !important;
            }
            .status {
                margin: 10px 0; font-weight: 500; text-align: center !important;
                display: block; width: 100%;
            }
            .status.available { color: #4CAF50; }
            .status.collected { color: #f44336; }
            
            .telegram-user-info {
                background: linear-gradient(135deg, #0088cc, #00a0ff);
                color: white; padding: 12px; border-radius: 10px;
                margin: 10px auto; text-align: center !important;
                box-shadow: 0 3px 10px rgba(0, 136, 204, 0.3);
                max-width: 100%; width: fit-content;
            }
            .telegram-avatar {
                width: 50px; height: 50px; border-radius: 50%;
                border: 2px solid white; margin: 0 auto 8px auto !important;
                display: block !important; box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            }
            .telegram-name {
                font-weight: 500; font-size: 1rem; margin-bottom: 4px;
                text-align: center !important;
            }
            .telegram-username {
                font-size: 0.85rem; opacity: 0.9; text-decoration: none;
                color: white; display: inline-flex; align-items: center; gap: 4px;
                transition: all 0.3s; padding: 4px 8px; border-radius: 15px;
                background: rgba(255,255,255,0.1); margin: 0 auto;
            }
            .telegram-username:hover {
                background: rgba(255,255,255,0.2); transform: translateY(-1px);
            }
            
            .collector-info-enhanced {
                background: #f8f9fa; padding: 12px; border-radius: 10px;
                margin: 10px auto; border-left: 4px solid #4CAF50;
                text-align: center !important; max-width: 100%;
            }
            .collector-info-enhanced h4 {
                margin: 0 0 8px 0; color: #333; font-size: 0.95rem;
                text-align: center !important;
            }
            .collector-detail {
                margin: 4px 0; font-size: 0.9rem; color: #666;
                text-align: center !important;
            }
            .collector-info {
                background: #f8f9fa; padding: 10px; border-radius: 8px;
                margin: 10px auto; font-size: 0.9rem;
                text-align: center !important; max-width: 100%;
            }
            .collector-info p {
                margin: 5px 0; text-align: center !important;
            }
            
            /* –ö–æ–Ω—Ç—Ä–æ–ª—ã Leaflet –¥–ª—è –ü–ö */
            .leaflet-control-zoom a {
                background-color: rgba(255, 255, 255, 0.95) !important;
                color: #495057 !important;
                border: 1px solid rgba(108, 117, 125, 0.2) !important;
                backdrop-filter: blur(10px) !important;
                transition: all 0.3s !important;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
                font-family: 'ABC Oracle', sans-serif !important;
                font-weight: 500 !important;
                width: 30px !important;
                height: 30px !important;
                line-height: 28px !important;
                text-align: center !important;
                font-size: 16px !important;
            }
            
            .leaflet-control-zoom a:hover {
                background-color: #f8f9fa !important;
                color: #343a40 !important;
                transform: scale(1.05) !important;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
            }
        `;
        document.head.appendChild(style);
    }
    
    // –ú–û–õ–ù–ò–ï–ù–û–°–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    function loadPointsLightning() {
        return new Promise((resolve) => {
            console.log('‚ö° Lightning points loading');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cachedPoints = FastCache.load();
            if (cachedPoints) {
                updateMapLightning(cachedPoints);
                updateStatsLightning(cachedPoints);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
                if (window.AppLoader && window.AppLoader.onPointsLoaded) {
                    window.AppLoader.onPointsLoaded();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ –µ—Å–ª–∏ –∫—ç—à —Å—Ç–∞—Ä—ã–π
                const cacheAge = FastCache.getAge();
                if (cacheAge && cacheAge > 90000) { // 1.5 –º–∏–Ω—É—Ç—ã
                    setTimeout(() => fetchPointsFromServerLightning(false), 500);
                }
                
                resolve();
                return;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
            fetchPointsFromServerLightning(true).then(resolve);
        });
    }
    
    // –ú–û–õ–ù–ò–ï–ù–û–°–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    function fetchPointsFromServerLightning(notifyLoader = true) {
        return new Promise((resolve) => {
            console.log('üåê Lightning server fetch');
            
            // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 —Å–µ–∫—É–Ω–¥
            
            fetch('/api/points', {
                method: 'GET',
                headers: { 
                    'Accept': 'application/json',
                    'Cache-Control': 'no-cache'
                },
                signal: controller.signal
            })
            .then(response => {
                clearTimeout(timeoutId);
                console.log('üì° Server response:', response.status);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                return response.json();
            })
            .then(points => {
                console.log('‚úÖ Lightning loaded ' + points.length + ' points');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                FastCache.save(points);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
                updateMapLightning(points);
                updateStatsLightning(points);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
                if (notifyLoader && window.AppLoader && window.AppLoader.onPointsLoaded) {
                    window.AppLoader.onPointsLoaded();
                }
                
                resolve();
            })
            .catch(error => {
                clearTimeout(timeoutId);
                console.error('‚ùå Lightning fetch error:', error);
                
                // Fallback –∫ –∫—ç—à—É
                const fallbackPoints = FastCache.load();
                if (fallbackPoints) {
                    console.log('üì¶ Using fallback cache');
                    updateMapLightning(fallbackPoints);
                    updateStatsLightning(fallbackPoints);
                }
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if (notifyLoader && window.AppLoader && window.AppLoader.onPointsLoaded) {
                    window.AppLoader.onPointsLoaded();
                }
                
                resolve();
            });
        });
    }
    
    // –ú–û–õ–ù–ò–ï–ù–û–°–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Ä–∫–µ—Ä–æ–≤
    function updateMapLightning(points) {
        if (!map || !points) {
            console.warn('‚ö†Ô∏è Map or points not ready');
            return;
        }
        
        console.log('üó∫Ô∏è Lightning map update (' + points.length + ' points)');
        
        try {
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            if (points.length === lastMarkersCount && markers.length === points.length) {
                console.log('üîÑ Updating existing markers');
                
                for (let i = 0; i < points.length; i++) {
                    const point = points[i];
                    const marker = markers[i];
                    
                    if (marker && marker._myPointId !== point.id) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º popup
                        const popupContent = createOptimizedPopupContent(point);
                        marker.setPopupContent(popupContent);
                        marker._myPointId = point.id;
                    }
                }
                
                console.log('‚úÖ Updated existing markers');
                return;
            }
            
            // –ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤
            clearMarkersLightning();
            
            const fragment = document.createDocumentFragment();
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            points.forEach(point => {
                try {
                    const isAvailable = point.status === 'available';
                    
                    const icon = L.divIcon({
                        className: 'marker-icon',
                        html: `<div class="marker-dot ${isAvailable ? 'available' : 'collected'}"></div>`,
                        iconSize: [20, 20],
                        iconAnchor: [10, 10]
                    });
                    
                    const marker = L.marker([point.coordinates.lat, point.coordinates.lng], { icon: icon });
                    
                    // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π popup
                    const popupContent = createOptimizedPopupContent(point);
                    marker.bindPopup(popupContent, {
                        maxWidth: 320, // –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ü–ö
                        className: 'custom-popup',
                        autoPan: true,
                        keepInView: true
                    });
                    
                    marker._myPointId = point.id;
                    marker.addTo(map);
                    markers.push(marker);
                } catch (error) {
                    console.error('‚ùå Marker error:', error);
                }
            });
            
            lastMarkersCount = points.length;
            console.log('‚úÖ Created ' + markers.length + ' lightning markers');
            
        } catch (error) {
            console.error('‚ùå Lightning map update error:', error);
        }
    }
    
    // –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
    function clearMarkersLightning() {
        markers.forEach(marker => {
            if (map.hasLayer(marker)) {
                map.removeLayer(marker);
            }
        });
        markers = [];
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ popup –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    function createOptimizedPopupContent(point) {
        const isAvailable = point.status === 'available';
        
        let popupContent = '<div class="popup-content">';
        popupContent += `<h3>${point.name}</h3>`;
        
        // –°—Ç–∞—Ç—É—Å
        popupContent += `<p class="status ${isAvailable ? 'available' : 'collected'}">`;
        popupContent += isAvailable ? 'üü¢ Available for collection' : 'üî¥ Already collected';
        popupContent += '</p>';
        
        if (!isAvailable && point.collectorInfo) {
            popupContent += '<div class="collector-info-enhanced">';
            popupContent += '<h4>Collector information:</h4>';
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram
            if (point.collectorInfo.authMethod === 'telegram' && point.collectorInfo.telegramData) {
                const tgData = point.collectorInfo.telegramData;
                
                popupContent += '<div class="telegram-user-info">';
                
                // –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (tgData.photo_url) {
                    popupContent += `<img src="${tgData.photo_url}" alt="Avatar" class="telegram-avatar" 
                                      onerror="this.style.display='none';">`;
                }
                
                // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const fullName = [tgData.first_name, tgData.last_name].filter(Boolean).join(' ');
                popupContent += `<div class="telegram-name">${fullName}</div>`;
                
                // –°—Å—ã–ª–∫–∞ –Ω–∞ Telegram –ø—Ä–æ—Ñ–∏–ª—å
                if (tgData.username) {
                    popupContent += `<a href="https://t.me/${tgData.username}" 
                                      target="_blank" class="telegram-username">
                                      <span>‚úàÔ∏è</span>
                                      @${tgData.username}
                                    </a>`;
                } else {
                    popupContent += `<div class="telegram-username" style="cursor: default;">
                                      <span>üÜî</span>
                                      ID: ${tgData.id}
                                    </div>`;
                }
                
                popupContent += '</div>';
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if (point.collectorInfo.signature) {
                    popupContent += `<div class="collector-detail">
                                      <strong>Message:</strong> ${point.collectorInfo.signature}
                                    </div>`;
                }
            } else {
                // –û–±—ã—á–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
                popupContent += `<div class="collector-detail">
                                  <span class="popup-collector-name">${point.collectorInfo.name}</span>
                                </div>`;
                
                if (point.collectorInfo.signature) {
                    popupContent += `<div class="collector-detail">
                                      <strong>Message:</strong> ${point.collectorInfo.signature}
                                    </div>`;
                }
            }
            
            popupContent += `<div class="collector-detail">
                              <strong>Collection time:</strong> ${new Date(point.collectedAt).toLocaleString('en-US')}
                            </div>`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª—Ñ–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å!)
            if (point.collectorInfo.selfie) {
                popupContent += '<div style="margin: 10px 0; text-align: center;">';
                popupContent += `<img src="${point.collectorInfo.selfie}" 
                                  style="max-width: 150px; max-height: 120px; border-radius: 8px; cursor: pointer; box-shadow: 0 2px 8px rgba(0,0,0,0.1); margin: 5px auto; display: block;" 
                                  onclick="showFullImage('${point.collectorInfo.selfie}', '${point.name}')" 
                                  title="Click to enlarge">`;
                popupContent += '</div>';
            }
            
            popupContent += '</div>';
        }
        
        popupContent += '</div>';
        return popupContent;
    }
    
    // –ú–û–õ–ù–ò–ï–ù–û–°–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    function updateStatsLightning(points) {
        const available = points.filter(p => p.status === 'available').length;
        const collected = points.filter(p => p.status === 'collected').length;
        
        const availableEl = document.getElementById('availableCount');
        const collectedEl = document.getElementById('collectedCount');
        
        if (availableEl) {
            lightningAnimateNumber(availableEl, available);
        }
        if (collectedEl) {
            lightningAnimateNumber(collectedEl, collected);
        }
        
        console.log('üìä Lightning stats: ' + available + ' available, ' + collected + ' collected');
    }
    
    // –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª
    function lightningAnimateNumber(element, targetValue) {
        const currentValue = parseInt(element.textContent) || 0;
        if (currentValue === targetValue) return;
        
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        element.textContent = targetValue;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        element.style.transform = 'scale(1.1)';
        element.style.transition = 'transform 0.2s ease';
        
        setTimeout(() => {
            element.style.transform = 'scale(1)';
        }, 200);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    function showErrorMessage(message) {
        const container = document.querySelector('.container');
        if (container) {
            const errorDiv = document.createElement('div');
            errorDiv.style.cssText = `
                background: rgba(244, 67, 54, 0.1);
                border: 1px solid #f44336; border-radius: 12px;
                padding: 20px; margin: 20px 0; text-align: center;
                color: #f44336; font-weight: 600;
            `;
            errorDiv.innerHTML = `
                <h3>‚ùå Loading error</h3>
                <p>${message}</p>
                <button onclick="window.location.reload()" style="
                    background: #f44336; color: white; border: none;
                    padding: 10px 20px; border-radius: 6px; cursor: pointer;
                    margin-top: 10px;
                ">Refresh page</button>
            `;
            container.appendChild(errorDiv);
        }
    }
    
    // –ì–õ–û–ë–ê–õ–¨–ù–´–ï —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!)
    window.getCurrentLocation = function() {
        const btn = document.querySelector('.location-btn');
        if (!navigator.geolocation || !map) {
            console.warn('‚ö†Ô∏è Geolocation unavailable');
            return;
        }
        
        const originalText = btn.innerHTML;
        btn.innerHTML = '‚è≥ Locating...';
        btn.disabled = true;
        
        navigator.geolocation.getCurrentPosition(
            function(position) {
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä
                if (window.userMarker && map.hasLayer(window.userMarker)) {
                    map.removeLayer(window.userMarker);
                }
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –ë–ï–ó popup (–∫–∞–∫ –∏ –±—ã–ª–æ)
                const userIcon = L.divIcon({
                    className: 'user-marker',
                    html: '<div class="user-dot"></div>',
                    iconSize: [22, 22],
                    iconAnchor: [11, 11]
                });
                
                window.userMarker = L.marker([lat, lng], { icon: userIcon })
                    .addTo(map);
                    // –ë–ï–ó .bindPopup() - –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ popup
                
                map.flyTo([lat, lng], 16, {
                    duration: 1.2,
                    easeLinearity: 0.3
                });
                console.log('‚úÖ Location found');
                
                btn.innerHTML = originalText;
                btn.disabled = false;
            },
            function(error) {
                console.error('‚ùå Geolocation error:', error);
                btn.innerHTML = originalText;
                btn.disabled = false;
            },
            {
                enableHighAccuracy: true,
                timeout: 8000,
                maximumAge: 300000
            }
        );
    };
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å!)
    window.showFullImage = function(imageSrc, title) {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(0,0,0,0.8); z-index: 3000;
            display: flex; align-items: center; justify-content: center;
            cursor: pointer;
        `;
        
        modal.innerHTML = `
            <div style="
                max-width: 90%; max-height: 90%; background: white;
                border-radius: 12px; overflow: hidden; cursor: default;
            " onclick="event.stopPropagation()">
                <div style="padding: 15px; background: #f8f9fa; text-align: center; font-weight: 600;">
                    ${title}
                </div>
                <img src="${imageSrc}" style="max-width: 100%; max-height: 70vh; display: block;">
            </div>
        `;
        
        modal.onclick = () => modal.remove();
        document.body.appendChild(modal);
    };
    
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò –î–õ–Ø –ü–ö
    window.addEventListener('resize', debounce(() => {
        if (map) {
            console.log('üîÑ Window resize detected');
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            const mapElement = document.getElementById('map');
            if (mapElement) {
                mapElement.style.width = '100%';
                mapElement.style.height = '500px';
                mapElement.style.minHeight = '500px';
            }
            
            // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            setTimeout(() => map.invalidateSize(true), 50);
            setTimeout(() => map.invalidateSize(true), 200);
            setTimeout(() => map.invalidateSize(true), 500);
        }
    }, 250));
    
    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', () => {
        if (!document.hidden && map) {
            console.log('üîÑ Page became visible - checking map');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç—ã
            setTimeout(() => {
                if (map) {
                    map.invalidateSize(true);
                    console.log('üó∫Ô∏è Map invalidated on visibility change');
                }
            }, 100);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            setTimeout(loadPointsLightning, 1000);
        }
    });
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ hover –Ω–∞ –∫–Ω–æ–ø–∫–∏
    const preloadOnHover = debounce(() => {
        if (!FastCache.load()) {
            loadPointsLightning();
        }
    }, 1000);
    
    document.addEventListener('mouseover', (e) => {
        if (e.target.matches('.control-btn, .leaderboard-btn')) {
            preloadOnHover();
        }
    });
    
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò –î–õ–Ø –ü–ö
    function performAdditionalPCChecks() {
        setTimeout(() => {
            const mapElement = document.getElementById('map');
            if (mapElement && map) {
                const rect = mapElement.getBoundingClientRect();
                console.log('üó∫Ô∏è Map element dimensions:', {
                    width: rect.width,
                    height: rect.height,
                    display: getComputedStyle(mapElement).display,
                    position: getComputedStyle(mapElement).position
                });
                
                if (rect.height === 0) {
                    console.error('‚ùå Map height is 0! Fixing...');
                    mapElement.style.height = '500px';
                    mapElement.style.minHeight = '500px';
                    mapElement.style.display = 'block';
                    
                    setTimeout(() => {
                        map.invalidateSize(true);
                        console.log('üîß Map fixed and invalidated');
                    }, 100);
                }
            }
        }, 2000);
    }
    
    // –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            ultraFastInit();
            performAdditionalPCChecks();
        });
    } else {
        ultraFastInit();
        performAdditionalPCChecks();
    }
    
    console.log('üöÄ PlasticBoy FIXED script loaded for PC compatibility');
})();
