// PlasticBoy v2.0 - –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Instagram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
(function() {
    'use strict';
    
    console.log('üéØ PlasticBoy - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —Å Instagram –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π');
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let map = null;
    let markers = [];
    let isInitialized = false;
    let initAttempts = 0;
    const MAX_INIT_ATTEMPTS = 10;
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
    const ALMATY_CENTER = [43.2220, 76.8512];
    
    // –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const Cache = {
        key: 'plasticboy_points_v2',
        ttl: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
        
        save: function(data) {
            try {
                const item = {
                    data: data,
                    timestamp: Date.now()
                };
                localStorage.setItem(this.key, JSON.stringify(item));
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ' + data.length + ' —Ç–æ—á–µ–∫ –≤ –∫—ç—à');
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞:', e);
            }
        },
        
        load: function() {
            try {
                const item = localStorage.getItem(this.key);
                if (!item) return null;
                
                const parsed = JSON.parse(item);
                const age = Date.now() - parsed.timestamp;
                
                if (age > this.ttl) {
                    console.log('‚è∞ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª');
                    return null;
                }
                
                console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ' + parsed.data.length + ' —Ç–æ—á–µ–∫ –∏–∑ –∫—ç—à–∞');
                return parsed.data;
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞:', e);
                return null;
            }
        },
        
        clear: function() {
            localStorage.removeItem(this.key);
            console.log('üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω');
        }
    };
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
    function waitForDOM() {
        return new Promise((resolve) => {
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', resolve);
            } else {
                resolve();
            }
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Leaflet
    function waitForLeaflet() {
        return new Promise((resolve, reject) => {
            const checkLeaflet = () => {
                if (typeof L !== 'undefined' && L.map) {
                    console.log('‚úÖ Leaflet –∑–∞–≥—Ä—É–∂–µ–Ω');
                    resolve();
                } else {
                    setTimeout(checkLeaflet, 100);
                }
            };
            
            checkLeaflet();
            
            // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Leaflet
            setTimeout(() => {
                if (typeof L === 'undefined') {
                    console.error('‚ùå Leaflet –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥');
                    reject(new Error('Leaflet timeout'));
                }
            }, 10000);
        });
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async function init() {
        try {
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é PlasticBoy');
            
            // –ñ–¥–µ–º DOM
            await waitForDOM();
            console.log('‚úÖ DOM –≥–æ—Ç–æ–≤');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
            if (window.AppLoader && window.AppLoader.updateLoader) {
                window.AppLoader.updateLoader();
            }
            
            // –ñ–¥–µ–º Leaflet
            await waitForLeaflet();
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Leaflet
            if (window.AppLoader && window.AppLoader.onLeafletReady) {
                window.AppLoader.onLeafletReady();
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
            await initMap();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏
            await loadPoints();
            
            console.log('üéâ PlasticBoy —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            
            // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            if (initAttempts < MAX_INIT_ATTEMPTS) {
                initAttempts++;
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${initAttempts}/${MAX_INIT_ATTEMPTS}`);
                setTimeout(init, 2000);
            } else {
                console.error('üí• –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
                showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            }
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
    function initMap() {
        return new Promise((resolve, reject) => {
            if (isInitialized) {
                resolve();
                return;
            }
            
            const mapElement = document.getElementById('map');
            if (!mapElement) {
                reject(new Error('–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω'));
                return;
            }
            
            try {
                console.log('üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Leaflet –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω
                if (typeof L === 'undefined' || !L.map) {
                    throw new Error('Leaflet –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
                }
                
                map = L.map('map', {
                    center: ALMATY_CENTER,
                    zoom: 13,
                    zoomControl: true,
                    preferCanvas: true // –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª—ã
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '¬© OpenStreetMap contributors',
                    maxZoom: 18,
                    tileSize: 256,
                    crossOrigin: true
                }).addTo(map);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
                addMapStyles();
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
                if (window.AppLoader && window.AppLoader.onMapReady) {
                    window.AppLoader.onMapReady();
                }
                
                // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
                map.whenReady(() => {
                    setTimeout(() => {
                        map.invalidateSize();
                        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞');
                        isInitialized = true;
                        
                        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                        setInterval(loadPoints, 30000);
                        
                        resolve();
                    }, 200);
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
                reject(error);
            }
        });
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
    function addMapStyles() {
        if (document.getElementById('map-styles')) return;
        
        const style = document.createElement('style');
        style.id = 'map-styles';
        style.textContent = `
            .marker-icon {
                background: none !important;
                border: none !important;
            }
            
            .marker-dot {
                width: 20px;
                height: 20px;
                border-radius: 50%;
                border: 2px solid white;
                box-shadow: 0 3px 8px rgba(0,0,0,0.3);
                transition: transform 0.2s ease;
                cursor: pointer;
            }
            
            .marker-dot:hover {
                transform: scale(1.2);
            }
            
            .marker-dot.available {
                background: linear-gradient(45deg, #4CAF50, #45a049);
            }
            
            .marker-dot.collected {
                background: linear-gradient(45deg, #f44336, #e53935);
            }
            
            .user-marker {
                background: none !important;
                border: none !important;
            }
            
            .user-dot {
                width: 22px;
                height: 22px;
                border-radius: 50%;
                background: linear-gradient(45deg, #007bff, #0056b3);
                border: 2px solid white;
                box-shadow: 0 3px 10px rgba(0,0,0,0.3);
                position: relative;
            }
            
            .user-dot::after {
                content: '';
                position: absolute;
                top: -4px;
                left: -4px;
                right: -4px;
                bottom: -4px;
                border-radius: 50%;
                border: 2px solid #007bff;
                opacity: 0.3;
                animation: userPulse 2s infinite;
            }
            
            @keyframes userPulse {
                0% { transform: scale(1); opacity: 0.7; }
                50% { opacity: 0.2; }
                100% { transform: scale(2); opacity: 0; }
            }
            
            .instagram-popup-header {
                display: flex;
                align-items: center;
                gap: 12px;
                margin-bottom: 15px;
                padding-bottom: 12px;
                border-bottom: 1px solid #eee;
            }
            
            .instagram-avatar-small {
                width: 50px;
                height: 50px;
                border-radius: 50%;
                border: 2px solid #e6683c;
                object-fit: cover;
            }
            
            .instagram-user-info h4 {
                margin: 0 0 4px 0;
                color: #333;
                font-size: 1.1rem;
            }
            
            .instagram-username {
                color: #666;
                font-size: 0.9rem;
                margin: 0;
            }
            
            .instagram-stats-popup {
                display: flex;
                justify-content: space-around;
                margin: 12px 0;
                padding: 10px;
                background: #f8f9fa;
                border-radius: 8px;
            }
            
            .instagram-stat-popup {
                text-align: center;
            }
            
            .instagram-stat-number-popup {
                font-weight: 600;
                color: #333;
                display: block;
                font-size: 0.9rem;
            }
            
            .instagram-stat-label-popup {
                font-size: 0.7rem;
                color: #666;
            }
            
            .auth-method-badge {
                display: inline-block;
                padding: 4px 8px;
                border-radius: 6px;
                font-size: 0.8rem;
                font-weight: 600;
                margin-bottom: 10px;
            }
            
            .auth-method-badge.instagram {
                background: linear-gradient(45deg, rgba(240, 148, 51, 0.1), rgba(188, 24, 136, 0.1));
                color: #e6683c;
                border: 1px solid rgba(230, 104, 60, 0.3);
            }
            
            .auth-method-badge.manual {
                background: rgba(76, 175, 80, 0.1);
                color: #4CAF50;
                border: 1px solid rgba(76, 175, 80, 0.3);
            }
        `;
        document.head.appendChild(style);
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫
    function loadPoints() {
        return new Promise((resolve) => {
            console.log('üìç –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cachedPoints = Cache.load();
            if (cachedPoints) {
                updateMap(cachedPoints);
                updateStats(cachedPoints);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
                if (window.AppLoader && window.AppLoader.onPointsLoaded) {
                    window.AppLoader.onPointsLoaded();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ
                setTimeout(() => fetchPointsFromServer(false), 1000);
                resolve();
                return;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
            fetchPointsFromServer(true).then(resolve);
        });
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
    function fetchPointsFromServer(notifyLoader = true) {
        return new Promise((resolve) => {
            console.log('üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞');
            
            fetch('/api/points', {
                method: 'GET',
                headers: { 
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                cache: 'no-cache'
            })
            .then(response => {
                console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                return response.json();
            })
            .then(points => {
                console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ' + points.length + ' —Ç–æ—á–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                Cache.save(points);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
                updateMap(points);
                updateStats(points);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
                if (notifyLoader && window.AppLoader && window.AppLoader.onPointsLoaded) {
                    window.AppLoader.onPointsLoaded();
                }
                
                resolve();
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫:', error);
                
                // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ –∫–∞–∫ fallback
                const cachedPoints = Cache.load();
                if (cachedPoints) {
                    console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback');
                    updateMap(cachedPoints);
                    updateStats(cachedPoints);
                }
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if (notifyLoader && window.AppLoader && window.AppLoader.onPointsLoaded) {
                    window.AppLoader.onPointsLoaded();
                }
                
                resolve();
            });
        });
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    function updateMap(points) {
        if (!map || !points) {
            console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –∏–ª–∏ —Ç–æ—á–∫–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            return;
        }
        
        console.log('üó∫Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (' + points.length + ' —Ç–æ—á–µ–∫)');
        
        try {
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            markers.forEach(marker => {
                if (map.hasLayer(marker)) {
                    map.removeLayer(marker);
                }
            });
            markers = [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            points.forEach(point => {
                try {
                    const isAvailable = point.status === 'available';
                    
                    const icon = L.divIcon({
                        className: 'marker-icon',
                        html: `<div class="marker-dot ${isAvailable ? 'available' : 'collected'}"></div>`,
                        iconSize: [20, 20],
                        iconAnchor: [10, 10]
                    });
                    
                    const marker = L.marker([point.coordinates.lat, point.coordinates.lng], { icon: icon });
                    
                    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ popup
                    const popupContent = createPopupContent(point, isAvailable);
                    marker.bindPopup(popupContent);
                    
                    marker.addTo(map);
                    markers.push(marker);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞:', error, point);
                }
            });
            
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ' + markers.length + ' –º–∞—Ä–∫–µ—Ä–æ–≤');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ popup —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Instagram
    function createPopupContent(point, isAvailable) {
        let popupContent = '<div style="min-width: 200px;">';
        popupContent += `<h3 style="margin: 0 0 10px 0;">${point.name}</h3>`;
        popupContent += `<p style="font-weight: 600; color: ${isAvailable ? '#4CAF50' : '#f44336'};">`;
        popupContent += isAvailable ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞' : 'üî¥ –£–∂–µ —Å–æ–±—Ä–∞–Ω–∞';
        popupContent += '</p>';
        
        if (!isAvailable && point.collectorInfo) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const authMethod = point.collectorInfo.authMethod || 'manual';
            
            // –ë–µ–π–¥–∂ –º–µ—Ç–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            popupContent += `<div class="auth-method-badge ${authMethod}">`;
            popupContent += authMethod === 'instagram' ? 'üì∏ Instagram' : 'üë§ –†—É—á–Ω–æ–π –≤–≤–æ–¥';
            popupContent += '</div>';
            
            popupContent += '<div style="background: #f8f9fa; padding: 12px; border-radius: 8px; margin: 10px 0;">';
            
            // –ï—Å–ª–∏ —Å–æ–±—Ä–∞–Ω–æ —á–µ—Ä–µ–∑ Instagram, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            if (authMethod === 'instagram' && point.collectorInfo.instagram) {
                const instagram = point.collectorInfo.instagram;
                
                popupContent += '<div class="instagram-popup-header">';
                popupContent += `<img src="${instagram.profile_picture}" alt="Avatar" class="instagram-avatar-small" onerror="this.src='https://via.placeholder.com/50x50?text=üë§'">`;
                popupContent += '<div class="instagram-user-info">';
                popupContent += `<h4>${instagram.full_name || instagram.username}</h4>`;
                popupContent += `<p class="instagram-username">@${instagram.username}`;
                if (instagram.is_verified) {
                    popupContent += ' ‚úì';
                }
                popupContent += '</p>';
                popupContent += '</div>';
                popupContent += '</div>';
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Instagram
                if (instagram.followers_count !== undefined) {
                    popupContent += '<div class="instagram-stats-popup">';
                    popupContent += '<div class="instagram-stat-popup">';
                    popupContent += `<span class="instagram-stat-number-popup">${formatNumber(instagram.posts_count || 0)}</span>`;
                    popupContent += '<span class="instagram-stat-label-popup">–ø–æ—Å—Ç–æ–≤</span>';
                    popupContent += '</div>';
                    popupContent += '<div class="instagram-stat-popup">';
                    popupContent += `<span class="instagram-stat-number-popup">${formatNumber(instagram.followers_count)}</span>`;
                    popupContent += '<span class="instagram-stat-label-popup">–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</span>';
                    popupContent += '</div>';
                    popupContent += '<div class="instagram-stat-popup">';
                    popupContent += `<span class="instagram-stat-number-popup">${formatNumber(instagram.following_count || 0)}</span>`;
                    popupContent += '<span class="instagram-stat-label-popup">–ø–æ–¥–ø–∏—Å–æ–∫</span>';
                    popupContent += '</div>';
                    popupContent += '</div>';
                }
            } else {
                // –û–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                popupContent += `<p style="margin: 4px 0;"><strong>–°–æ–±—Ä–∞–ª:</strong> ${point.collectorInfo.name}</p>`;
            }
            
            // –ü–æ–¥–ø–∏—Å—å (–¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤)
            if (point.collectorInfo.signature) {
                popupContent += `<p style="margin: 8px 0 4px 0;"><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong></p>`;
                popupContent += `<p style="margin: 4px 0; font-style: italic; color: #555;">"${point.collectorInfo.signature}"</p>`;
            }
            
            popupContent += `<p style="margin: 8px 0 4px 0;"><strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª—Ñ–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (point.collectorInfo.selfie) {
                popupContent += '<div style="margin: 12px 0; text-align: center;">';
                popupContent += `<img src="${point.collectorInfo.selfie}" style="max-width: 150px; max-height: 120px; border-radius: 8px; cursor: pointer; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" onclick="showFullImage('${point.collectorInfo.selfie}', '${point.name}')" title="–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è">`;
                popupContent += '</div>';
            }
            
            popupContent += '</div>';
        }
        
        popupContent += '</div>';
        return popupContent;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –¥–ª—è Instagram —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    function formatNumber(num) {
        if (!num) return '0';
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    function updateStats(points) {
        const available = points.filter(p => p.status === 'available').length;
        const collected = points.filter(p => p.status === 'collected').length;
        
        const availableEl = document.getElementById('availableCount');
        const collectedEl = document.getElementById('collectedCount');
        
        if (availableEl) {
            animateNumber(availableEl, available);
        }
        if (collectedEl) {
            animateNumber(collectedEl, collected);
        }
        
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ' + available + ' –¥–æ—Å—Ç—É–ø–Ω–æ, ' + collected + ' —Å–æ–±—Ä–∞–Ω–æ');
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª
    function animateNumber(element, targetValue) {
        const currentValue = parseInt(element.textContent) || 0;
        if (currentValue === targetValue) return;
        
        const duration = 500;
        const steps = 10;
        const stepValue = (targetValue - currentValue) / steps;
        const stepDuration = duration / steps;
        
        let current = currentValue;
        let step = 0;
        
        const timer = setInterval(() => {
            step++;
            current += stepValue;
            
            if (step >= steps) {
                element.textContent = targetValue;
                clearInterval(timer);
            } else {
                element.textContent = Math.round(current);
            }
        }, stepDuration);
    }
    
    // –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
    function showErrorMessage(message) {
        const container = document.querySelector('.container');
        if (container) {
            const errorDiv = document.createElement('div');
            errorDiv.style.cssText = `
                background: rgba(244, 67, 54, 0.1);
                border: 1px solid #f44336;
                border-radius: 12px;
                padding: 20px;
                margin: 20px 0;
                text-align: center;
                color: #f44336;
                font-weight: 600;
            `;
            errorDiv.innerHTML = `
                <h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p>${message}</p>
                <button onclick="window.location.reload()" style="
                    background: #f44336;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 6px;
                    cursor: pointer;
                    margin-top: 10px;
                ">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
            `;
            container.appendChild(errorDiv);
        }
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    window.getCurrentLocation = function() {
        const btn = document.querySelector('.location-btn');
        if (!navigator.geolocation || !map) {
            console.warn('‚ö†Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }
        
        const originalText = btn.innerHTML;
        btn.innerHTML = '‚è≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...';
        btn.disabled = true;
        
        navigator.geolocation.getCurrentPosition(
            function(position) {
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä
                if (window.userMarker && map.hasLayer(window.userMarker)) {
                    map.removeLayer(window.userMarker);
                }
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
                const userIcon = L.divIcon({
                    className: 'user-marker',
                    html: '<div class="user-dot"></div>',
                    iconSize: [22, 22],
                    iconAnchor: [11, 11]
                });
                
                window.userMarker = L.marker([lat, lng], { icon: userIcon })
                    .addTo(map)
                    .bindPopup('<div style="text-align: center;"><strong>üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong></div>');
                
                map.flyTo([lat, lng], 16);
                console.log('‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ');
                
                btn.innerHTML = originalText;
                btn.disabled = false;
            },
            function(error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                btn.innerHTML = originalText;
                btn.disabled = false;
            },
            {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 300000
            }
        );
    };
    
    // –ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    window.showFullImage = function(imageSrc, title) {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 3000;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        `;
        
        modal.innerHTML = `
            <div style="
                max-width: 90%;
                max-height: 90%;
                background: white;
                border-radius: 12px;
                overflow: hidden;
                cursor: default;
            " onclick="event.stopPropagation()">
                <div style="padding: 15px; background: #f8f9fa; text-align: center; font-weight: 600;">
                    ${title}
                </div>
                <img src="${imageSrc}" style="max-width: 100%; max-height: 70vh; display: block;">
            </div>
        `;
        
        modal.onclick = () => modal.remove();
        document.body.appendChild(modal);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    window.addEventListener('resize', function() {
        if (map) {
            setTimeout(() => map.invalidateSize(), 100);
        }
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    init();
    
    // –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    window.PlasticBoy = {
        Cache,
        refreshData: loadPoints,
        clearCache: () => Cache.clear(),
        version: '2.1.0'
    };
    
    console.log('üöÄ PlasticBoy v2.1.0 –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω');
})();
