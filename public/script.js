// –ú–û–ë–ò–õ–¨–ù–û-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è script.js –¥–ª—è PlasticBoy
let map;
let markers = [];
let markersLayer;

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
const ALMATY_CENTER = [43.2220, 76.8512];

// –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isAppInitialized = false;
let pointsCache = null;
let abortController = null;
let isMobile = false;

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function detectMobile() {
    const userAgent = navigator.userAgent || navigator.vendor || window.opera;
    const isMobileUA = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent);
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    const isSmallScreen = window.innerWidth <= 768;
    
    isMobile = isMobileUA || (isTouchDevice && isSmallScreen);
    
    console.log('üîç [Mobile Detection]', {
        userAgent: userAgent.substring(0, 50),
        isMobileUA,
        isTouchDevice,
        isSmallScreen,
        screenSize: `${window.innerWidth}x${window.innerHeight}`,
        devicePixelRatio: window.devicePixelRatio,
        isMobile
    });
    
    return isMobile;
}

// –ú–æ–±–∏–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function mobileLog(message, data = null) {
    const timestamp = new Date().toLocaleTimeString();
    console.log(`üì± [${timestamp}] ${message}`, data || '');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (isMobile && window.location.search.includes('debug')) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∞–ª–µ—Ä—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
        if (message.includes('–û–®–ò–ë–ö–ê') || message.includes('ERROR')) {
            setTimeout(() => {
                alert(`PlasticBoy Debug: ${message}`);
            }, 100);
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
function validateCoordinates(lat, lng) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–∞
    const numLat = Number(lat);
    const numLng = Number(lng);
    
    const isValidLat = !isNaN(numLat) && isFinite(numLat) && numLat >= -90 && numLat <= 90;
    const isValidLng = !isNaN(numLng) && isFinite(numLng) && numLng >= -180 && numLng <= 180;
    
    mobileLog(`–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: lat=${lat} (${typeof lat}) -> ${numLat} valid=${isValidLat}, lng=${lng} (${typeof lng}) -> ${numLng} valid=${isValidLng}`);
    
    return isValidLat && isValidLng;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
function safeNotifyLoader() {
    try {
        if (typeof window.PlasticBoyLoader !== 'undefined' && 
            typeof window.PlasticBoyLoader.onPointsLoaded === 'function') {
            window.PlasticBoyLoader.onPointsLoaded();
            mobileLog('‚úÖ –ó–∞–≥—Ä—É–∑—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–æ—á–µ–∫');
        }
    } catch (error) {
        mobileLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
document.addEventListener('DOMContentLoaded', function() {
    detectMobile();
    mobileLog('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ PlasticBoy (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
    
    // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const initDelay = isMobile ? 500 : 200;
    setTimeout(() => {
        initializeApp();
    }, initDelay);
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initializeApp() {
    mobileLog('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PlasticBoy (–º–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞)...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
    addMobileOptimizedStyles();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    initControlButtons();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    setupMobileViewport();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Leaflet
    if (typeof L !== 'undefined') {
        mobileLog('Leaflet –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É');
        initMap();
    } else {
        mobileLog('–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Leaflet...');
        waitForLeaflet();
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
function setupMobileViewport() {
    if (!isMobile) return;
    
    mobileLog('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ viewport');
    
    // –£–ª—É—á—à–∞–µ–º viewport meta tag
    let viewportMeta = document.querySelector('meta[name="viewport"]');
    if (viewportMeta) {
        viewportMeta.setAttribute('content', 
            'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover'
        );
    }
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º zoom –Ω–∞ input focus
    document.addEventListener('touchstart', function() {}, {passive: true});
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    window.addEventListener('orientationchange', function() {
        setTimeout(() => {
            if (map) {
                map.invalidateSize();
                mobileLog('–ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞');
            }
        }, 300);
    });
}

// –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
function addMobileOptimizedStyles() {
    if (document.getElementById('mobile-plasticboy-styles')) {
        return; // –°—Ç–∏–ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
    }
    
    const style = document.createElement('style');
    style.id = 'mobile-plasticboy-styles';
    style.textContent = `
        /* –ú–æ–±–∏–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã - —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è */
        .mobile-plasticboy-marker {
            background: none !important;
            border: none !important;
        }
        
        .mobile-plasticboy-dot {
            width: ${isMobile ? '32px' : '24px'};
            height: ${isMobile ? '32px' : '24px'};
            border-radius: 50%;
            border: ${isMobile ? '4px' : '3px'} solid white;
            box-shadow: 0 ${isMobile ? '6px' : '4px'} ${isMobile ? '16px' : '12px'} rgba(0,0,0,0.3);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: ${isMobile ? '16px' : '14px'};
            font-weight: bold;
            color: white;
            position: relative;
            touch-action: manipulation; /* –£–ª—É—á—à–µ–Ω–∏–µ touch –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è */
        }
        
        .mobile-plasticboy-dot:hover,
        .mobile-plasticboy-dot:active {
            transform: scale(${isMobile ? '1.1' : '1.2'});
            box-shadow: 0 ${isMobile ? '8px' : '6px'} ${isMobile ? '20px' : '16px'} rgba(0,0,0,0.4);
        }
        
        .mobile-plasticboy-dot.available {
            background: linear-gradient(45deg, #4CAF50, #45a049);
        }
        
        .mobile-plasticboy-dot.collected {
            background: linear-gradient(45deg, #f44336, #e53935);
        }
        
        .mobile-plasticboy-dot.available::before {
            content: 'üì¶';
            font-size: ${isMobile ? '14px' : '12px'};
        }
        
        .mobile-plasticboy-dot.collected::before {
            content: '‚úÖ';
            font-size: ${isMobile ? '14px' : '12px'};
        }
        
        /* –ú–æ–±–∏–ª—å–Ω—ã–µ popup */
        .mobile-plasticboy-popup {
            min-width: ${isMobile ? '250px' : '220px'};
            max-width: ${isMobile ? '300px' : '280px'};
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            font-size: ${isMobile ? '16px' : '14px'}; /* –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
        }
        
        .mobile-plasticboy-popup h3 {
            margin: 0 0 12px 0;
            color: #333;
            font-size: ${isMobile ? '1.2rem' : '1.1rem'};
            font-weight: 600;
            line-height: 1.3;
        }
        
        .mobile-plasticboy-status {
            margin: 10px 0;
            font-weight: 600;
            padding: ${isMobile ? '8px 16px' : '6px 12px'};
            border-radius: 20px;
            text-align: center;
            font-size: ${isMobile ? '1rem' : '0.9rem'};
        }
        
        .mobile-plasticboy-status.available { 
            background: #e8f5e8;
            color: #2e7d32; 
        }
        
        .mobile-plasticboy-status.collected { 
            background: #ffebee;
            color: #c62828; 
        }
        
        .mobile-plasticboy-collector-info {
            background: #f8f9fa;
            padding: ${isMobile ? '16px' : '12px'};
            border-radius: 8px;
            margin: 12px 0;
            border-left: 4px solid #667eea;
        }
        
        .mobile-plasticboy-collector-info p {
            margin: 6px 0;
            font-size: ${isMobile ? '0.95rem' : '0.9rem'};
            line-height: 1.4;
        }
        
        /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ popup –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
        .leaflet-popup-content-wrapper {
            border-radius: ${isMobile ? '16px' : '12px'} !important;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2) !important;
        }
        
        .leaflet-popup-close-button {
            width: ${isMobile ? '32px' : '24px'} !important;
            height: ${isMobile ? '32px' : '24px'} !important;
            font-size: ${isMobile ? '20px' : '18px'} !important;
            line-height: ${isMobile ? '30px' : '22px'} !important;
            touch-action: manipulation;
        }
        
        /* –ú–æ–±–∏–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
        .mobile-notification {
            position: fixed;
            top: ${isMobile ? '10px' : '20px'};
            left: ${isMobile ? '10px' : 'auto'};
            right: ${isMobile ? '10px' : '20px'};
            z-index: 3000;
            background: white;
            border-radius: ${isMobile ? '12px' : '8px'};
            padding: ${isMobile ? '16px 20px' : '12px 16px'};
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            font-size: ${isMobile ? '16px' : '14px'};
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 12px;
            animation: slideInNotification 0.3s ease-out;
            max-width: none;
        }
        
        /* –ü—É–ª—å—Å–∞—Ü–∏—è –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */
        @keyframes mobilePulse {
            0% { transform: scale(1); opacity: 0.8; }
            50% { opacity: 0.4; }
            100% { transform: scale(1.8); opacity: 0; }
        }
        
        .mobile-pulse-ring {
            position: absolute;
            top: -4px; left: -4px; right: -4px; bottom: -4px;
            border: 2px solid #4CAF50;
            border-radius: 50%;
            opacity: 0;
            animation: mobilePulse 2s infinite;
        }
        
        /* –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
        @media (hover: none) and (pointer: coarse) {
            .mobile-plasticboy-dot:hover {
                transform: none; /* –£–±–∏—Ä–∞–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö */
            }
            
            .leaflet-container {
                touch-action: pan-x pan-y; /* –£–ª—É—á—à–∞–µ–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ */
            }
        }
        
        /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤ */
        @media (max-width: 360px) {
            .mobile-plasticboy-popup {
                min-width: 200px;
                font-size: 14px;
            }
            
            .mobile-plasticboy-popup h3 {
                font-size: 1rem;
            }
        }
    `;
    document.head.appendChild(style);
    mobileLog('‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
}

// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Leaflet —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
function waitForLeaflet() {
    let attempts = 0;
    const maxAttempts = isMobile ? 100 : 50; // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    const checkInterval = isMobile ? 150 : 100; // –ë–æ–ª–µ–µ —Ä–µ–¥–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    mobileLog(`–û–∂–∏–¥–∞–Ω–∏–µ Leaflet (–º–∞–∫—Å–∏–º—É–º ${maxAttempts * checkInterval}ms)`);
    
    const checkLeafletInterval = setInterval(() => {
        attempts++;
        
        if (typeof L !== 'undefined') {
            clearInterval(checkLeafletInterval);
            mobileLog('‚úÖ Leaflet –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É');
            initMap();
        } else if (attempts >= maxAttempts) {
            clearInterval(checkLeafletInterval);
            mobileLog('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Leaflet –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è');
            showMobileNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 20 –ø–æ–ø—ã—Ç–æ–∫
        if (attempts % 20 === 0) {
            mobileLog(`–û–∂–∏–¥–∞–Ω–∏–µ Leaflet... –ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}`);
        }
    }, checkInterval);
}

// –ú–æ–±–∏–ª—å–Ω–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    if (isAppInitialized) {
        mobileLog('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return;
    }
    
    mobileLog('–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—Ç—ã
        const mapElement = document.getElementById('map');
        if (!mapElement) {
            throw new Error('–≠–ª–µ–º–µ–Ω—Ç #map –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
        }
        
        // –ú–æ–±–∏–ª—å–Ω–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã
        const mapOptions = {
            center: ALMATY_CENTER,
            zoom: isMobile ? 12 : 13, // –ß—É—Ç—å –º–µ–Ω—å—à–∏–π zoom –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            zoomControl: true,
            attributionControl: !isMobile, // –°–∫—Ä—ã–≤–∞–µ–º attribution –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            preferCanvas: isMobile, // Canvas —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            maxZoom: 18,
            minZoom: isMobile ? 9 : 10,
            zoomSnap: isMobile ? 0.5 : 1, // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–π zoom –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            zoomDelta: isMobile ? 0.5 : 1,
            wheelPxPerZoomLevel: isMobile ? 120 : 60,
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            tap: isMobile,
            tapTolerance: isMobile ? 20 : 15,
            touchZoom: isMobile,
            doubleClickZoom: true,
            scrollWheelZoom: !isMobile, // –û—Ç–∫–ª—é—á–∞–µ–º scroll zoom –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            boxZoom: !isMobile,
            keyboard: !isMobile
        };
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        map = L.map('map', mapOptions);
        
        mobileLog('‚úÖ –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        const tileOptions = {
            attribution: isMobile ? '' : '¬© OpenStreetMap contributors',
            maxZoom: 18,
            detectRetina: true, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ retina –¥–∏—Å–ø–ª–µ–µ–≤
            tileSize: isMobile ? 256 : 256,
            zoomOffset: 0
        };
        
        const tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', tileOptions);
        tileLayer.addTo(map);
        mobileLog('‚úÖ –¢–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π');
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
        markersLayer = L.layerGroup();
        markersLayer.addTo(map);
        mobileLog('‚úÖ –ì—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∞');
        
        // –ú–æ–±–∏–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç—ã
        if (isMobile) {
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–ª–∏–∫–∏ –ø—Ä–∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–∏
            let isPanning = false;
            
            map.on('movestart', function() {
                isPanning = true;
            });
            
            map.on('moveend', function() {
                setTimeout(() => {
                    isPanning = false;
                }, 100);
            });
            
            // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ touch —Å–æ–±—ã—Ç–∏–π
            map.on('click', function(e) {
                if (isPanning) {
                    e.originalEvent.preventDefault();
                    return false;
                }
            });
        }
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ä—Ç–µ
        window.map = map;
        window.markersLayer = markersLayer;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const resizeDelay = isMobile ? 500 : 200;
        setTimeout(() => {
            map.invalidateSize();
            mobileLog('‚úÖ –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω');
        }, resizeDelay);
        
        isAppInitialized = true;
        mobileLog('‚úÖ –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        const loadDelay = isMobile ? 300 : 100;
        setTimeout(() => {
            loadPoints();
        }, loadDelay);
        
    } catch (error) {
        mobileLog('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', error);
        showMobileNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: ' + error.message, 'error');
    }
}

// –ú–æ–±–∏–ª—å–Ω–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫
async function loadPoints() {
    mobileLog('–ù–∞—á–∏–Ω–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ—á–µ–∫...');
    
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    if (abortController) {
        abortController.abort();
    }
    abortController = new AbortController();
    
    try {
        mobileLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ /api/points');
        
        const fetchOptions = {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Cache-Control': 'no-cache'
            },
            signal: abortController.signal
        };
        
        // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if (isMobile) {
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error('Timeout: –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')), 15000);
            });
            
            const fetchPromise = fetch('/api/points', fetchOptions);
            const response = await Promise.race([fetchPromise, timeoutPromise]);
            
            await handlePointsResponse(response);
        } else {
            const response = await fetch('/api/points', fetchOptions);
            await handlePointsResponse(response);
        }
        
    } catch (error) {
        if (error.name === 'AbortError') {
            mobileLog('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω');
            return;
        }
        
        mobileLog('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ—á–µ–∫:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        showMobileNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message, 'error');
        
        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏
        if (window.location.hostname === 'localhost' || 
            window.location.hostname === '127.0.0.1' ||
            window.location.search.includes('debug')) {
            mobileLog('–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
            createMobileTestPoints();
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        safeNotifyLoader();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Ç–æ—á–∫–∞–º–∏
async function handlePointsResponse(response) {
    mobileLog('–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        headers: Object.fromEntries(response.headers.entries())
    });
    
    if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.includes('application/json')) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON –æ—Ç–≤–µ—Ç: ' + contentType);
    }
    
    const points = await response.json();
    mobileLog('–î–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –ø–æ–ª—É—á–µ–Ω—ã:', {
        type: typeof points,
        isArray: Array.isArray(points),
        length: points ? points.length : 'undefined',
        sample: points ? points.slice(0, 1) : 'none'
    });
    
    if (!Array.isArray(points)) {
        throw new Error('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º: ' + typeof points);
    }
    
    pointsCache = points;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateMobileMapMarkers(points);
    updateMobileStatistics(points);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏
    safeNotifyLoader();
    
    mobileLog(`‚úÖ –ú–æ–±–∏–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${points.length} —Ç–æ—á–µ–∫`);
    
    if (points.length === 0) {
        showMobileNotification('–ù–∞ –∫–∞—Ä—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è —Å–±–æ—Ä–∞', 'info');
    } else {
        showMobileNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${points.length} —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç—É`, 'success');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
function createMobileTestPoints() {
    const testPoints = [
        {
            id: 'mobile-test1',
            name: '–ú–æ–±–∏–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ 1 - –ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ',
            coordinates: { lat: 43.2220, lng: 76.8512 },
            status: 'available',
            createdAt: new Date().toISOString()
        },
        {
            id: 'mobile-test2',
            name: '–ú–æ–±–∏–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ 2 - –ü–ª–æ—â–∞–¥—å –†–µ—Å–ø—É–±–ª–∏–∫–∏',
            coordinates: { lat: 43.2380, lng: 76.8840 },
            status: 'collected',
            collectorInfo: {
                name: '–ú–æ–±–∏–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                signature: '–ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!'
            },
            collectedAt: new Date(Date.now() - 3600000).toISOString()
        },
        {
            id: 'mobile-test3',
            name: '–ú–æ–±–∏–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ 3 - –ö–æ–∫-–¢–æ–±–µ',
            coordinates: { lat: 43.2050, lng: 76.9080 },
            status: 'available',
            createdAt: new Date().toISOString()
        }
    ];
    
    mobileLog('–°–æ–∑–¥–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏:', testPoints);
    
    pointsCache = testPoints;
    updateMobileMapMarkers(testPoints);
    updateMobileStatistics(testPoints);
    safeNotifyLoader();
    
    showMobileNotification('–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏', 'info');
}

// –ú–æ–±–∏–ª—å–Ω–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤
function updateMobileMapMarkers(points) {
    if (!map || !markersLayer) {
        mobileLog('‚ùå –ö–∞—Ä—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ –≥–æ—Ç–æ–≤—ã');
        return;
    }
    
    mobileLog('–û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ...');
    
    try {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
        markersLayer.clearLayers();
        markers.length = 0;
        mobileLog('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã');
        
        if (points.length === 0) {
            mobileLog('‚ö†Ô∏è –ù–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return;
        }
        
        let successCount = 0;
        let errorCount = 0;
        
        points.forEach((point, index) => {
            try {
                // –£—Å–∏–ª–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                if (!point.coordinates) {
                    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
                }
                
                // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - —á–∏—Å–ª–∞
                const lat = Number(point.coordinates.lat);
                const lng = Number(point.coordinates.lng);
                
                if (!validateCoordinates(lat, lng)) {
                    throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat=${lat} (${typeof lat}), lng=${lng} (${typeof lng})`);
                }
                
                const isAvailable = point.status === 'available';
                
                mobileLog(`–°–æ–∑–¥–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä ${index + 1}: ${point.name} [${lat}, ${lng}] - ${point.status}`);
                
                // –°–æ–∑–¥–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É –º–∞—Ä–∫–µ—Ä–∞
                const icon = L.divIcon({
                    className: 'mobile-plasticboy-marker',
                    html: `
                        <div class="mobile-plasticboy-dot ${isAvailable ? 'available' : 'collected'}">
                            ${isAvailable ? '<div class="mobile-pulse-ring"></div>' : ''}
                        </div>
                    `,
                    iconSize: [isMobile ? 32 : 24, isMobile ? 32 : 24],
                    iconAnchor: [isMobile ? 16 : 12, isMobile ? 16 : 12]
                });
                
                // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
                const marker = L.marker([lat, lng], { icon });
                
                // –°–æ–∑–¥–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ popup
                let popupContent = `
                    <div class="mobile-plasticboy-popup">
                        <h3>${point.name}</h3>
                        <div class="mobile-plasticboy-status ${point.status}">
                            ${isAvailable ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞' : 'üî¥ –£–∂–µ —Å–æ–±—Ä–∞–Ω–∞'}
                        </div>
                        <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong><br>${lat.toFixed(6)}, ${lng.toFixed(6)}</p>
                `;
                
                if (point.createdAt) {
                    popupContent += `<p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong><br>${new Date(point.createdAt).toLocaleString('ru-RU')}</p>`;
                }
                
                if (!isAvailable && point.collectorInfo) {
                    popupContent += `
                        <div class="mobile-plasticboy-collector-info">
                            <p><strong>–°–æ–±—Ä–∞–ª:</strong> ${point.collectorInfo.name}</p>
                            ${point.collectorInfo.signature ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${point.collectorInfo.signature}</p>` : ''}
                            ${point.collectedAt ? `<p><strong>–í—Ä–µ–º—è —Å–±–æ—Ä–∞:</strong><br>${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>` : ''}
                        </div>
                    `;
                }
                
                popupContent += '</div>';
                
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º popup –∫ –º–∞—Ä–∫–µ—Ä—É —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                marker.bindPopup(popupContent, {
                    maxWidth: isMobile ? 300 : 280,
                    className: 'mobile-plasticboy-popup-wrapper',
                    closeButton: true,
                    autoPan: isMobile,
                    keepInView: isMobile,
                    autoPanPadding: isMobile ? [20, 20] : [10, 10]
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É
                markersLayer.addLayer(marker);
                markers.push(marker);
                successCount++;
                
                mobileLog(`‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä ${index + 1} –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                
            } catch (error) {
                errorCount++;
                mobileLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ ${index + 1}:`, error);
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
        window.markers = markers;
        
        mobileLog(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —É—Å–ø–µ—à–Ω–æ=${successCount}, –æ—à–∏–±–æ–∫=${errorCount}`);
        
        if (successCount > 0) {
            mobileLog(`‚úÖ –ù–∞ –∫–∞—Ä—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${successCount} –º–æ–±–∏–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤`);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –º–∞—Ä–∫–µ—Ä–∞—Ö –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (isMobile && successCount > 0) {
                setTimeout(() => {
                    const group = new L.featureGroup(markers);
                    if (group.getBounds().isValid()) {
                        map.fitBounds(group.getBounds(), {
                            padding: [20, 20],
                            maxZoom: 15
                        });
                        mobileLog('‚úÖ –ö–∞—Ä—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ä–∞—Ö');
                    }
                }, 500);
            }
        }
        
        if (errorCount > 0) {
            mobileLog(`‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: ${errorCount}`);
        }
        
    } catch (error) {
        mobileLog('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤:', error);
        showMobileNotification('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ', 'error');
    }
}

// –ú–æ–±–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateMobileStatistics(points) {
    mobileLog('–û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    
    try {
        const available = points.filter(p => p.status === 'available').length;
        const collected = points.filter(p => p.status === 'collected').length;
        
        mobileLog('–ú–æ–±–∏–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', { available, collected, total: points.length });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –º–æ–±–∏–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
        updateMobileStatElement('availableCount', available);
        updateMobileStatElement('collectedCount', collected);
        
    } catch (error) {
        mobileLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–±–∏–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –ú–æ–±–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateMobileStatElement(elementId, newValue) {
    const element = document.getElementById(elementId);
    if (!element) {
        mobileLog(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç ${elementId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
    }
    
    const currentValue = parseInt(element.textContent) || 0;
    
    if (currentValue === newValue) {
        return; // –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    }
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö (–±–æ–ª–µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è)
    if (isMobile) {
        element.style.transform = 'scale(1.1)';
        element.style.transition = 'transform 0.2s ease';
        
        setTimeout(() => {
            element.textContent = newValue;
            element.style.transform = 'scale(1)';
        }, 100);
    } else {
        // –ü–æ–ª–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
        const duration = 600;
        const steps = 15;
        const stepValue = (newValue - currentValue) / steps;
        const stepDuration = duration / steps;
        
        let current = currentValue;
        let step = 0;
        
        const timer = setInterval(() => {
            step++;
            current += stepValue;
            
            if (step >= steps) {
                element.textContent = newValue;
                clearInterval(timer);
            } else {
                element.textContent = Math.round(current);
            }
        }, stepDuration);
    }
}

// –ú–æ–±–∏–ª—å–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
function getCurrentLocation() {
    mobileLog('–ó–∞–ø—Ä–æ—Å –º–æ–±–∏–ª—å–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const locationBtn = document.querySelector('.location-btn');
    if (!locationBtn) {
        mobileLog('‚ùå –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    if (!navigator.geolocation) {
        mobileLog('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
        showMobileNotification('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º', 'error');
        return;
    }
    
    const originalText = locationBtn.innerHTML;
    locationBtn.innerHTML = isMobile ? '‚è≥ –ü–æ–∏—Å–∫...' : '‚è≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...';
    locationBtn.disabled = true;
    
    // –ú–æ–±–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    const geoOptions = {
        enableHighAccuracy: true,
        timeout: isMobile ? 20000 : 15000, // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        maximumAge: 300000 // 5 –º–∏–Ω—É—Ç
    };
    
    navigator.geolocation.getCurrentPosition(
        function(position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            const accuracy = Math.round(position.coords.accuracy);
            
            mobileLog('–ú–æ–±–∏–ª—å–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', { 
                lat, lng, accuracy, 
                timestamp: new Date(position.timestamp).toLocaleTimeString()
            });
            
            // –°–æ–∑–¥–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userIcon = L.divIcon({
                className: 'mobile-user-marker',
                html: `<div style="
                    background: linear-gradient(45deg, #2196F3, #1976D2);
                    width: ${isMobile ? '24px' : '20px'}; 
                    height: ${isMobile ? '24px' : '20px'}; 
                    border-radius: 50%; 
                    border: ${isMobile ? '4px' : '3px'} solid white; 
                    box-shadow: 0 ${isMobile ? '6px' : '4px'} ${isMobile ? '16px' : '12px'} rgba(33, 150, 243, 0.4);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-weight: bold;
                    font-size: ${isMobile ? '12px' : '10px'};
                    position: relative;
                ">üë§
                    <div style="
                        position: absolute;
                        top: -${isMobile ? '4px' : '3px'}; left: -${isMobile ? '4px' : '3px'}; 
                        right: -${isMobile ? '4px' : '3px'}; bottom: -${isMobile ? '4px' : '3px'};
                        border: 2px solid #2196F3;
                        border-radius: 50%;
                        opacity: 0.6;
                        animation: userPulse 2s infinite;
                    "></div>
                </div>`,
                iconSize: [isMobile ? 24 : 20, isMobile ? 24 : 20],
                iconAnchor: [isMobile ? 12 : 10, isMobile ? 12 : 10]
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!document.getElementById('mobile-user-pulse-animation')) {
                const style = document.createElement('style');
                style.id = 'mobile-user-pulse-animation';
                style.textContent = `
                    @keyframes userPulse {
                        0% { transform: scale(1); opacity: 0.7; }
                        50% { opacity: 0.3; }
                        100% { transform: scale(${isMobile ? '1.8' : '2'}); opacity: 0; }
                    }
                `;
                document.head.appendChild(style);
            }
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (window.userMarker) {
                map.removeLayer(window.userMarker);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
            window.userMarker = L.marker([lat, lng], { icon: userIcon })
                .addTo(map)
                .bindPopup(`
                    <div style="text-align: center; min-width: ${isMobile ? '180px' : '150px'};">
                        <strong>üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong><br>
                        <small style="color: #666; font-size: ${isMobile ? '14px' : '12px'};">
                            –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:<br>${lat.toFixed(6)}, ${lng.toFixed(6)}<br>
                            –¢–æ—á–Ω–æ—Å—Ç—å: ¬±${accuracy}–º
                        </small>
                    </div>
                `, {
                    className: 'mobile-user-location-popup',
                    maxWidth: isMobile ? 250 : 200
                });
            
            // –ú–æ–±–∏–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
            const targetZoom = isMobile ? 
                Math.max(map.getZoom(), 14) : 
                Math.max(map.getZoom(), 15);
                
            if (isMobile) {
                // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                map.flyTo([lat, lng], targetZoom, {
                    duration: 1.5,
                    easeLinearity: 0.5
                });
            } else {
                map.setView([lat, lng], targetZoom);
            }
            
            showMobileNotification('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ!', 'success');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
            
        },
        function(error) {
            mobileLog('‚ùå –û—à–∏–±–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            
            let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    errorMessage = isMobile ? 
                        '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö' : 
                        '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = isMobile ?
                        '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–∫–ª—é—á–∏—Ç–µ GPS' :
                        '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
                    break;
                case error.TIMEOUT:
                    errorMessage = isMobile ?
                        '–ü–æ–∏—Å–∫ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏' :
                        '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
                    break;
            }
            
            showMobileNotification(errorMessage, 'error');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
        },
        geoOptions
    );
}

// –ú–æ–±–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function initControlButtons() {
    const locationBtn = document.querySelector('.location-btn');
    if (locationBtn) {
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        locationBtn.removeEventListener('click', getCurrentLocation);
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        locationBtn.addEventListener('click', getCurrentLocation);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–±–∏–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if (isMobile) {
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
            locationBtn.addEventListener('touchstart', function(e) {
                e.stopPropagation();
            }, {passive: true});
            
            // –£–ª—É—á—à–∞–µ–º touch feedback
            locationBtn.addEventListener('touchend', function() {
                this.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    this.style.transform = '';
                }, 150);
            });
        }
        
        mobileLog('‚úÖ –ú–æ–±–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    } else {
        mobileLog('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM');
    }
}

// –ú–æ–±–∏–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showMobileNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `mobile-notification ${type}`;
    
    const icons = {
        error: '‚ùå',
        success: '‚úÖ',
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è'
    };
    
    const colors = {
        error: '#f44336',
        success: '#4CAF50',
        info: '#2196F3',
        warning: '#ff9800'
    };
    
    notification.style.borderLeftColor = colors[type];
    
    notification.innerHTML = `
        <span style="font-size: ${isMobile ? '18px' : '16px'};">${icons[type]}</span>
        <span style="flex: 1; line-height: 1.4;">${message}</span>
        <button onclick="this.parentElement.remove()" style="
            background: none; border: none; font-size: ${isMobile ? '20px' : '18px'}; 
            cursor: pointer; color: #999; padding: 0; margin: 0;
            min-width: ${isMobile ? '32px' : '24px'};
            min-height: ${isMobile ? '32px' : '24px'};
            display: flex; align-items: center; justify-content: center;
        ">√ó</button>
    `;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è (–±–æ–ª—å—à–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
    const autoHideDelay = isMobile ? 6000 : 5000;
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'slideInNotification 0.3s ease-out reverse';
            setTimeout(() => notification.remove(), 300);
        }
    }, autoHideDelay);
    
    mobileLog(`–ú–æ–±–∏–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ: [${type}] ${message}`);
}

// –ú–æ–±–∏–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
window.addEventListener('resize', function() {
    if (map) {
        mobileLog('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—É—é –∫–∞—Ä—Ç—É');
        setTimeout(() => {
            map.invalidateSize();
        }, isMobile ? 200 : 100);
    }
});

// –ú–æ–±–∏–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
document.addEventListener('keydown', function(event) {
    // –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (event.ctrlKey && event.key === 'l') {
        event.preventDefault();
        getCurrentLocation();
    }
    
    if (event.ctrlKey && event.key === 'r') {
        event.preventDefault();
        if (isAppInitialized) {
            mobileLog('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫');
            loadPoints();
        }
    }
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
    if (event.ctrlKey && event.key === 'd') {
        event.preventDefault();
        showMobileDiagnostics();
    }
});

// –ú–æ–±–∏–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
function showMobileDiagnostics() {
    const diagnostics = {
        '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': isMobile ? '–ú–æ–±–∏–ª—å–Ω–æ–µ' : '–î–µ—Å–∫—Ç–æ–ø',
        '–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞': `${window.innerWidth}x${window.innerHeight}`,
        'Device Pixel Ratio': window.devicePixelRatio,
        'Touch –ø–æ–¥–¥–µ—Ä–∂–∫–∞': 'ontouchstart' in window,
        '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ': isAppInitialized,
        'Leaflet –¥–æ—Å—Ç—É–ø–µ–Ω': typeof L !== 'undefined',
        '–ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞': !!map,
        '–ì—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤': !!markersLayer,
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤': markers ? markers.length : 0,
        '–ö—ç—à —Ç–æ—á–µ–∫': pointsCache ? pointsCache.length : '–Ω–µ—Ç',
        'URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã': window.location.href,
        'User Agent': navigator.userAgent.substring(0, 80) + '...'
    };
    
    console.group('üì± PlasticBoy –ú–æ–±–∏–ª—å–Ω–∞—è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
    Object.entries(diagnostics).forEach(([key, value]) => {
        console.log(`${key}:`, value);
    });
    console.groupEnd();
    
    showMobileNotification('–ú–æ–±–∏–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å', 'info');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (isMobile) {
        console.group('üì± –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–±–∏–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
        console.log('–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞:', screen.orientation ? screen.orientation.type : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        console.log('–°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', navigator.connection ? navigator.connection.effectiveType : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        console.log('Standalone —Ä–µ–∂–∏–º:', window.navigator.standalone);
        console.groupEnd();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–±–∏–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.PlasticBoyMobile = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    map: () => map,
    markers: () => markers,
    markersLayer: () => markersLayer,
    
    // –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    loadPoints,
    getCurrentLocation,
    initMap,
    
    // –ú–æ–±–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    isMobile: () => isMobile,
    detectMobile,
    showMobileNotification,
    
    // –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    mobileLog,
    isInitialized: () => isAppInitialized,
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    diagnostics: showMobileDiagnostics,
    getPointsCache: () => pointsCache
};

// –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.showNotification = showMobileNotification;
window.updateMap = updateMobileMapMarkers;
window.updateStats = updateMobileStatistics;
window.loadPoints = loadPoints;
window.initMap = initMap;

// –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
mobileLog('‚úÖ PlasticBoy –º–æ–±–∏–ª—å–Ω–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π script.js –∑–∞–≥—Ä—É–∂–µ–Ω');
mobileLog(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${isMobile ? '–ú–û–ë–ò–õ–¨–ù–û–ï' : '–î–ï–°–ö–¢–û–ü'}`);
mobileLog('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: Ctrl+L (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è), Ctrl+R (–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å), Ctrl+D (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)');
