// –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–´–ô SCRIPT.JS —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è PlasticBoy
let map;
let markers = [];

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
const ALMATY_CENTER = [43.2220, 76.8512];

// –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isMapInitialized = false;
let pointsLoaded = false;

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

// === –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ===
const CACHE_KEY = 'plasticboy_points_cache';
const CACHE_TIMESTAMP_KEY = 'plasticboy_cache_timestamp';
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
const QUICK_CACHE_KEY = 'plasticboy_quick_cache';

// –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
let pointsCache = null;
let markersPool = []; // –ü—É–ª –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤

console.log('PlasticBoy Ultra-Fast loading - Mobile:', isMobile);

// === –ë–´–°–¢–†–û–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ===
function saveToCache(points) {
    try {
        const cacheData = {
            points: points,
            timestamp: Date.now(),
            version: '1.0'
        };
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à
        localStorage.setItem(CACHE_KEY, JSON.stringify(cacheData));
        localStorage.setItem(CACHE_TIMESTAMP_KEY, Date.now().toString());
        
        // –ë—ã—Å—Ç—Ä—ã–π –∫—ç—à (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        const quickData = points.map(p => ({
            id: p.id,
            name: p.name,
            coordinates: p.coordinates,
            status: p.status,
            collectorInfo: p.collectorInfo ? {
                name: p.collectorInfo.name,
                signature: p.collectorInfo.signature
            } : null,
            collectedAt: p.collectedAt
        }));
        
        sessionStorage.setItem(QUICK_CACHE_KEY, JSON.stringify(quickData));
        pointsCache = points;
        
        console.log(`üíæ Cached ${points.length} points`);
    } catch (error) {
        console.warn('Cache save error:', error);
    }
}

function loadFromCache() {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—ã–π –∫—ç—à
        const quickCache = sessionStorage.getItem(QUICK_CACHE_KEY);
        if (quickCache) {
            const quickPoints = JSON.parse(quickCache);
            console.log(`‚ö° Quick cache loaded: ${quickPoints.length} points`);
            return quickPoints;
        }
        
        // –ó–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à
        const cached = localStorage.getItem(CACHE_KEY);
        const timestamp = localStorage.getItem(CACHE_TIMESTAMP_KEY);
        
        if (cached && timestamp) {
            const age = Date.now() - parseInt(timestamp);
            if (age < CACHE_DURATION) {
                const cacheData = JSON.parse(cached);
                console.log(`üíæ Cache loaded: ${cacheData.points.length} points (age: ${Math.round(age/1000)}s)`);
                pointsCache = cacheData.points;
                return cacheData.points;
            } else {
                console.log('üóëÔ∏è Cache expired, clearing');
                clearCache();
            }
        }
        
        return null;
    } catch (error) {
        console.warn('Cache load error:', error);
        clearCache();
        return null;
    }
}

function clearCache() {
    try {
        localStorage.removeItem(CACHE_KEY);
        localStorage.removeItem(CACHE_TIMESTAMP_KEY);
        sessionStorage.removeItem(QUICK_CACHE_KEY);
        pointsCache = null;
        console.log('üóëÔ∏è Cache cleared');
    } catch (error) {
        console.warn('Cache clear error:', error);
    }
}

// === –ü–£–õ –ú–ê–†–ö–ï–†–û–í –î–õ–Ø –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===
function createMarkerPool(size = 50) {
    markersPool = [];
    for (let i = 0; i < size; i++) {
        const icon = L.divIcon({
            className: 'custom-marker',
            html: '<div class="marker-dot available"></div>',
            iconSize: isMobile ? [16, 16] : [20, 20],
            iconAnchor: isMobile ? [8, 8] : [10, 10]
        });
        
        const marker = L.marker([0, 0], { icon });
        markersPool.push(marker);
    }
    console.log(`üéØ Created marker pool: ${size} markers`);
}

function getMarkerFromPool() {
    if (markersPool.length > 0) {
        return markersPool.pop();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –µ—Å–ª–∏ –ø—É–ª –ø—É—Å—Ç
    const icon = L.divIcon({
        className: 'custom-marker',
        html: '<div class="marker-dot available"></div>',
        iconSize: isMobile ? [16, 16] : [20, 20],
        iconAnchor: isMobile ? [8, 8] : [10, 10]
    });
    
    return L.marker([0, 0], { icon });
}

function returnMarkerToPool(marker) {
    if (markersPool.length < 100) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
        markersPool.push(marker);
    }
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Ultra-Fast PlasticBoy starting');
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª –º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ
    setTimeout(() => createMarkerPool(), 100);
    
    if (isMobile) {
        initMobileApp();
    } else {
        initControlButtons();
        setTimeout(initMap, 200);
    }
});

// === –ú–û–ë–ò–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
function initMobileApp() {
    console.log('üì± Starting mobile app initialization');
    
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ —Å—Ä–∞–∑—É
    const cachedPoints = loadFromCache();
    if (cachedPoints && cachedPoints.length > 0) {
        console.log('‚ö° Found cached points, pre-loading...');
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏–∑ –∫—ç—à–∞ –≤ —Ñ–æ–Ω–µ
        preloadMarkersFromCache(cachedPoints);
    }
    
    // –ë—ã—Å—Ç—Ä–æ —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
    setTimeout(() => {
        hideLoadingScreen();
        setTimeout(initMap, 100);
    }, 800);
}

function preloadMarkersFromCache(points) {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ —Ñ–æ–Ω–µ –ø–æ–∫–∞ –∫–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞
    window.preloadedMarkers = points.map(point => {
        const isAvailable = point.status === 'available';
        return {
            point: point,
            isAvailable: isAvailable,
            lat: point.coordinates.lat,
            lng: point.coordinates.lng
        };
    });
    console.log(`‚ö° Pre-loaded ${points.length} markers data`);
}

function hideLoadingScreen() {
    const loadingScreen = document.getElementById('loadingScreen');
    const mainContent = document.getElementById('mainContent');
    
    if (loadingScreen) {
        loadingScreen.style.transition = 'opacity 0.2s ease';
        loadingScreen.style.opacity = '0';
        setTimeout(() => {
            loadingScreen.style.display = 'none';
        }, 200);
    }
    
    if (mainContent) {
        mainContent.style.opacity = '1';
        mainContent.classList.add('loaded');
    }
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–†–¢–´ ===
function initMap() {
    if (isMapInitialized) {
        console.log('Map already initialized');
        return;
    }
    
    console.log('üó∫Ô∏è Initializing map...');
    
    try {
        if (typeof L === 'undefined') {
            console.error('Leaflet not loaded, retrying...');
            setTimeout(initMap, 500);
            return;
        }
        
        // –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã
        const mapOptions = {
            zoomControl: true,
            attributionControl: !isMobile,
            preferCanvas: true,
            maxZoom: 18,
            minZoom: 10,
            zoomAnimation: !isMobile, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            fadeAnimation: !isMobile,
            markerZoomAnimation: !isMobile
        };
        
        if (isMobile) {
            mapOptions.tap = true;
            mapOptions.touchZoom = true;
            mapOptions.dragging = true;
            mapOptions.scrollWheelZoom = false;
            mapOptions.doubleClickZoom = true;
            mapOptions.boxZoom = false;
            mapOptions.keyboard = false;
        }
        
        map = L.map('map', mapOptions);
        map.setView(ALMATY_CENTER, 13);
        
        // –ë—ã—Å—Ç—Ä—ã–µ —Ç–∞–π–ª—ã
        const tileOptions = {
            attribution: isMobile ? '¬© OSM' : '¬© OpenStreetMap contributors',
            maxZoom: 18,
            keepBuffer: isMobile ? 1 : 2,
            updateWhenIdle: isMobile,
            updateWhenZooming: !isMobile,
            crossOrigin: true
        };
        
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', tileOptions).addTo(map);
        
        addMapStyles();
        
        setTimeout(() => {
            if (map) {
                map.invalidateSize();
                window.map = map;
                isMapInitialized = true;
                console.log('‚úÖ Map initialized');
                
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—ç—à, –ø–æ—Ç–æ–º —Å–µ—Ç—å
                loadPointsFast();
                initControlButtons();
            }
        }, 50);
        
    } catch (error) {
        console.error('Map initialization error:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã', 'error');
        setTimeout(initMap, 1000);
    }
}

// === –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –¢–û–ß–ï–ö ===
async function loadPointsFast() {
    if (pointsLoaded) return;
    
    console.log('‚ö° Fast loading points...');
    
    // 1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞
    const cachedPoints = loadFromCache();
    if (cachedPoints && cachedPoints.length > 0) {
        console.log('‚ö° Using cached points');
        updateMapFast(cachedPoints);
        updateStats(cachedPoints);
        pointsLoaded = true;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cachedPoints.length} —Ç–æ—á–µ–∫ (–∫—ç—à)`, 'success');
        
        // –í —Ñ–æ–Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        setTimeout(() => {
            loadPointsFromNetwork(true);
        }, 1000);
        
        return;
    }
    
    // 2. –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
    loadPointsFromNetwork(false);
}

async function loadPointsFromNetwork(isBackgroundUpdate = false) {
    try {
        console.log(isBackgroundUpdate ? 'üîÑ Background update...' : 'üåê Loading from network...');
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
            controller.abort();
        }, isMobile ? 8000 : 5000); // –ë—ã—Å—Ç—Ä—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
        
        const response = await fetch('/api/points', {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Cache-Control': isBackgroundUpdate ? 'no-cache' : 'max-age=300'
            },
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const points = await response.json();
        console.log(`üì° Network loaded: ${points.length} points`);
        
        if (Array.isArray(points)) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            saveToCache(points);
            
            if (!isBackgroundUpdate) {
                updateMapFast(points);
                updateStats(points);
                pointsLoaded = true;
                showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${points.length} —Ç–æ—á–µ–∫`, 'success');
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                const hasChanges = checkForChanges(pointsCache, points);
                if (hasChanges) {
                    console.log('üîÑ Changes detected, updating map');
                    updateMapFast(points);
                    updateStats(points);
                    showNotification('–ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'info');
                }
            }
            
            if (typeof window.PlasticBoyLoader !== 'undefined') {
                window.PlasticBoyLoader.onPointsLoaded();
            }
        }
        
    } catch (error) {
        console.error('Network error:', error);
        
        if (!isBackgroundUpdate) {
            if (error.name === 'AbortError') {
                showNotification('–ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', 'warning');
            } else {
                showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫', 'error');
            }
            
            // Retry —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                if (!pointsLoaded) {
                    loadPointsFromNetwork(false);
                }
            }, 3000);
        }
    }
}

function checkForChanges(oldPoints, newPoints) {
    if (!oldPoints || !newPoints) return true;
    if (oldPoints.length !== newPoints.length) return true;
    
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ö—ç—à—É —Å—Ç–∞—Ç—É—Å–æ–≤
    const oldHash = oldPoints.map(p => `${p.id}:${p.status}`).join(',');
    const newHash = newPoints.map(p => `${p.id}:${p.status}`).join(',');
    
    return oldHash !== newHash;
}

// === –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–†–¢–´ ===
function updateMapFast(points) {
    if (!map || !isMapInitialized) {
        console.warn('Map not ready, retrying...');
        setTimeout(() => updateMapFast(points), 500);
        return;
    }
    
    const startTime = performance.now();
    console.log(`‚ö° Ultra-fast updating map with ${points.length} points`);
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–ª –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        clearMarkersFast();
        
        // –ü–∞–∫–µ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤
        const fragment = document.createDocumentFragment();
        const newMarkers = [];
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        const markerData = window.preloadedMarkers || points.map(point => ({
            point: point,
            isAvailable: point.status === 'available',
            lat: point.coordinates.lat,
            lng: point.coordinates.lng
        }));
        
        markerData.forEach((data, index) => {
            try {
                const { point, isAvailable, lat, lng } = data;
                
                if (typeof lat !== 'number' || typeof lng !== 'number') {
                    console.warn('Invalid coordinates:', point);
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫–µ—Ä –∏–∑ –ø—É–ª–∞
                const marker = getMarkerFromPool();
                
                // –ë—ã—Å—Ç—Ä–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Å—Ç–∏–ª—å
                marker.setLatLng([lat, lng]);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
                const iconHtml = `<div class="marker-dot ${isAvailable ? 'available' : 'collected'}"></div>`;
                marker.getElement().innerHTML = iconHtml;
                
                // –ë—ã—Å—Ç—Ä—ã–π popup
                const popupContent = createPopupContentFast(point, isAvailable);
                marker.bindPopup(popupContent, {
                    maxWidth: isMobile ? 250 : 300,
                    className: 'custom-popup'
                });
                
                marker.addTo(map);
                newMarkers.push(marker);
                
            } catch (error) {
                console.error(`Error adding marker ${index}:`, error);
            }
        });
        
        markers = newMarkers;
        window.markers = markers;
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        delete window.preloadedMarkers;
        
        addMarkerStyles();
        
        const endTime = performance.now();
        console.log(`‚úÖ Map updated in ${Math.round(endTime - startTime)}ms with ${markers.length} markers`);
        
    } catch (error) {
        console.error('Error updating map:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã', 'error');
    }
}

function clearMarkersFast() {
    markers.forEach(marker => {
        try {
            map.removeLayer(marker);
            returnMarkerToPool(marker);
        } catch (e) {
            console.warn('Error removing marker:', e);
        }
    });
    markers = [];
}

function createPopupContentFast(point, isAvailable) {
    let content = `
        <div class="popup-content">
            <h3>${point.name || '–ú–æ–¥–µ–ª—å'}</h3>
            <div class="status ${point.status}">
                ${isAvailable ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞' : 'üî¥ –£–∂–µ —Å–æ–±—Ä–∞–Ω–∞'}
            </div>`;
    
    if (!isAvailable && point.collectorInfo) {
        content += `
            <div class="collector-info">
                <p><strong>–°–æ–±—Ä–∞–ª:</strong> ${point.collectorInfo.name}</p>`;
        
        if (point.collectorInfo.signature) {
            content += `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> "${point.collectorInfo.signature}"</p>`;
        }
        
        if (point.collectedAt) {
            content += `<p><strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>`;
        }
        
        content += '</div>';
        
        if (point.collectorInfo.selfie) {
            content += `<button onclick="showPointDetails('${point.id}')" class="details-btn">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–ª—Ñ–∏</button>`;
        }
    }
    
    content += '</div>';
    return content;
}

// === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï) ===
function updateStats(points) {
    try {
        const available = points.filter(p => p.status === 'available').length;
        const collected = points.filter(p => p.status === 'collected').length;
        
        const availableEl = document.getElementById('availableCount');
        const collectedEl = document.getElementById('collectedCount');
        
        if (availableEl) availableEl.textContent = available;
        if (collectedEl) collectedEl.textContent = collected;
        
        console.log(`üìä Stats: ${available} available, ${collected} collected`);
        
    } catch (error) {
        console.error('Error updating stats:', error);
    }
}

function initControlButtons() {
    const locationBtn = document.querySelector('.location-btn');
    if (locationBtn && !locationBtn.hasAttribute('data-initialized')) {
        locationBtn.setAttribute('data-initialized', 'true');
        locationBtn.addEventListener('click', getCurrentLocation);
    }
}

function getCurrentLocation() {
    const locationBtn = document.querySelector('.location-btn');
    
    if (!navigator.geolocation) {
        showNotification('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
        return;
    }
    
    if (locationBtn) {
        locationBtn.innerHTML = '‚è≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...';
        locationBtn.disabled = true;
    }
    
    const options = {
        enableHighAccuracy: true,
        timeout: isMobile ? 15000 : 8000,
        maximumAge: 300000
    };
    
    navigator.geolocation.getCurrentPosition(
        function(position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            if (map && isMapInitialized) {
                if (window.userMarker) {
                    map.removeLayer(window.userMarker);
                }
                
                const userIcon = L.divIcon({
                    className: 'user-marker',
                    html: `<div style="
                        background: linear-gradient(45deg, #007bff, #0056b3);
                        width: ${isMobile ? '18px' : '22px'}; 
                        height: ${isMobile ? '18px' : '22px'}; 
                        border-radius: 50%; 
                        border: 2px solid white; 
                        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                    "></div>`,
                    iconSize: isMobile ? [18, 18] : [22, 22],
                    iconAnchor: isMobile ? [9, 9] : [11, 11]
                });
                
                window.userMarker = L.marker([lat, lng], { icon: userIcon })
                    .addTo(map)
                    .bindPopup(`
                        <div style="text-align: center;">
                            <strong>üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong><br>
                            <small>${lat.toFixed(4)}, ${lng.toFixed(4)}</small>
                        </div>
                    `);
                
                map.flyTo([lat, lng], 15, { duration: 1 });
                showNotification('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ', 'success');
            }
            
            if (locationBtn) {
                locationBtn.innerHTML = 'üìç –ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
                locationBtn.disabled = false;
            }
        },
        function(error) {
            console.error('Geolocation error:', error);
            
            let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    errorMessage = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω';
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
                    break;
                case error.TIMEOUT:
                    errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
                    break;
            }
            
            showNotification(errorMessage, 'error');
            
            if (locationBtn) {
                locationBtn.innerHTML = 'üìç –ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
                locationBtn.disabled = false;
            }
        },
        options
    );
}

async function showPointDetails(pointId) {
    try {
        const response = await fetch(`/api/point/${pointId}/info`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        
        const point = await response.json();
        
        let modalContent = `
            <h3 style="color: #667eea; margin-bottom: 15px;">${point.name}</h3>
            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> 
                    <span style="color: ${point.status === 'collected' ? '#f44336' : '#4CAF50'}">
                        ${point.status === 'collected' ? '–°–æ–±—Ä–∞–Ω–∞' : '–î–æ—Å—Ç—É–ø–Ω–∞'}
                    </span>
                </p>
            </div>`;
        
        if (point.status === 'collected' && point.collectorInfo) {
            modalContent += `
                <div style="border-left: 3px solid #667eea; padding-left: 15px; margin: 15px 0;">
                    <h4>–°–±–æ—Ä—â–∏–∫:</h4>
                    <p><strong>–ò–º—è:</strong> ${point.collectorInfo.name}</p>
                    ${point.collectorInfo.signature ? 
                        `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> "${point.collectorInfo.signature}"</p>` : ''}
                </div>`;
            
            if (point.collectorInfo.selfie) {
                modalContent += `
                    <div style="text-align: center; margin-top: 15px;">
                        <img src="${point.collectorInfo.selfie}" 
                             style="max-width: 100%; max-height: 250px; border-radius: 8px;"
                             alt="–°–µ–ª—Ñ–∏ —Å–±–æ—Ä—â–∏–∫–∞">
                    </div>`;
            }
        }
        
        document.getElementById('modalTitle').innerHTML = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏';
        document.getElementById('modalBody').innerHTML = modalContent;
        document.getElementById('infoModal').style.display = 'block';
        
    } catch (error) {
        console.error('Error loading point details:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'error');
    }
}

function closeModal() {
    document.getElementById('infoModal').style.display = 'none';
}

function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    const icons = { error: '‚ùå', success: '‚úÖ', info: '‚ÑπÔ∏è', warning: '‚ö†Ô∏è' };
    
    notification.innerHTML = `
        <div class="notification-content">
            <span>${icons[type] || icons.info} ${message}</span>
            <button onclick="this.parentElement.parentElement.remove()">√ó</button>
        </div>`;
    
    addNotificationStyles();
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 200);
        }
    }, 3000);
}

// === –°–¢–ò–õ–ò ===
function addMapStyles() {
    if (!document.getElementById('map-styles')) {
        const style = document.createElement('style');
        style.id = 'map-styles';
        style.textContent = `
            .leaflet-tile-pane {
                filter: grayscale(100%) contrast(1.1) brightness(1.05) !important;
            }
            .leaflet-marker-pane, .leaflet-popup-pane, .leaflet-control-container {
                filter: none !important;
            }
            .leaflet-container {
                background: #f8f9fa !important;
            }
            .leaflet-control-zoom a {
                width: ${isMobile ? '35px' : '26px'} !important;
                height: ${isMobile ? '35px' : '26px'} !important;
                line-height: ${isMobile ? '35px' : '26px'} !important;
                font-size: 18px !important;
            }`;
        document.head.appendChild(style);
    }
}

function addMarkerStyles() {
    if (!document.getElementById('marker-styles')) {
        const style = document.createElement('style');
        style.id = 'marker-styles';
        style.textContent = `
            .custom-marker { background: none !important; border: none !important; }
            .marker-dot {
                width: ${isMobile ? '16px' : '20px'};
                height: ${isMobile ? '16px' : '20px'};
                border-radius: 50%;
                border: 2px solid white;
                box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                transition: transform 0.2s ease;
                cursor: pointer;
            }
            .marker-dot:hover { transform: scale(1.1); }
            .marker-dot.available { background: linear-gradient(45deg, #4CAF50, #45a049); }
            .marker-dot.collected { background: linear-gradient(45deg, #f44336, #e53935); }
            .popup-content { min-width: ${isMobile ? '200px' : '220px'}; font-size: ${isMobile ? '14px' : '15px'}; }
            .popup-content h3 { margin: 0 0 10px 0; color: #333; font-size: ${isMobile ? '16px' : '18px'}; font-weight: 600; }
            .status { margin: 8px 0; font-weight: 600; }
            .status.available { color: #4CAF50; }
            .status.collected { color: #f44336; }
            .collector-info { background: #f8f9fa; padding: 10px; border-radius: 6px; margin: 10px 0; font-size: ${isMobile ? '12px' : '13px'}; }
            .collector-info p { margin: 4px 0; }
            .details-btn { background: linear-gradient(45deg, #667eea, #764ba2); color: white; border: none; padding: ${isMobile ? '8px 12px' : '10px 16px'}; border-radius: 6px; cursor: pointer; font-size: ${isMobile ? '12px' : '14px'}; width: 100%; margin-top: 8px; }`;
        document.head.appendChild(style);
    }
}

function addNotificationStyles() {
    if (!document.getElementById('notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            .notification { position: fixed; top: 20px; right: 20px; z-index: 2000; background: rgba(255, 255, 255, 0.98); border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); padding: 12px 16px; min-width: 250px; max-width: 350px; font-size: ${isMobile ? '14px' : '15px'}; transition: all 0.3s ease; }
            .notification.error { border-left: 4px solid #f44336; }
