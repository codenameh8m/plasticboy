// PlasticBoy v3.0 - –° Instagram –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
(function() {
    'use strict';
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let map = null;
    let markers = [];
    let isInitialized = false;
    let currentPage = 1;
    let totalPages = 1;
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
    const ALMATY_CENTER = [43.2220, 76.8512];
    
    // –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const Cache = {
        key: 'plasticboy_points_v3',
        leaderboardKey: 'plasticboy_leaderboard_v3',
        ttl: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
        
        save: function(key, data) {
            try {
                const item = {
                    data: data,
                    timestamp: Date.now()
                };
                localStorage.setItem(key, JSON.stringify(item));
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à:', key);
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞:', e);
            }
        },
        
        load: function(key) {
            try {
                const item = localStorage.getItem(key);
                if (!item) return null;
                
                const parsed = JSON.parse(item);
                const age = Date.now() - parsed.timestamp;
                
                if (age > this.ttl) {
                    console.log('‚è∞ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª:', key);
                    return null;
                }
                
                console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞:', key);
                return parsed.data;
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞:', e);
                return null;
            }
        },
        
        clear: function() {
            localStorage.removeItem(this.key);
            localStorage.removeItem(this.leaderboardKey);
            console.log('üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω');
        }
    };
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    document.addEventListener('DOMContentLoaded', function() {
        console.log('üéØ PlasticBoy v3.0 - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        initApp();
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    function initApp() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Leaflet
        if (typeof L === 'undefined') {
            console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Leaflet...');
            setTimeout(initApp, 100);
            return;
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
        if (window.AppLoader && window.AppLoader.onLeafletReady) {
            window.AppLoader.onLeafletReady();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        initMap();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
        fetchPointsFromServer();
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
    function fetchPointsFromServer() {
        fetch('/api/points', {
            headers: { 'Accept': 'application/json' }
        })
        .then(function(response) {
            if (!response.ok) {
                throw new Error('HTTP ' + response.status);
            }
            return response.json();
        })
        .then(function(points) {
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ' + points.length + ' —Ç–æ—á–µ–∫');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            Cache.save(Cache.key, points);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
            updateMap(points);
            updateStats(points);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
            if (window.AppLoader && window.AppLoader.onPointsLoaded) {
                window.AppLoader.onPointsLoaded();
            }
        })
        .catch(function(error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫:', error);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (window.AppLoader && window.AppLoader.onPointsLoaded) {
                window.AppLoader.onPointsLoaded();
            }
        });
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    function updateMap(points) {
        if (!map || !points) return;
        
        console.log('üó∫Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã');
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        markers.forEach(function(marker) {
            map.removeLayer(marker);
        });
        markers = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        points.forEach(function(point) {
            const isAvailable = point.status === 'available';
            
            const icon = L.divIcon({
                className: 'marker-icon',
                html: '<div class="marker-dot ' + (isAvailable ? 'available' : 'collected') + '"></div>',
                iconSize: [20, 20],
                iconAnchor: [10, 10]
            });
            
            const marker = L.marker([point.coordinates.lat, point.coordinates.lng], { icon: icon });
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ popup
            let popupContent = '<div style="min-width: 200px;">';
            popupContent += '<h3 style="margin: 0 0 10px 0;">' + point.name + '</h3>';
            popupContent += '<p style="font-weight: 600; color: ' + (isAvailable ? '#4CAF50' : '#f44336') + ';">';
            popupContent += isAvailable ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞' : 'üî¥ –°–æ–±—Ä–∞–Ω–∞';
            popupContent += '</p>';
            
            if (!isAvailable && point.collectorInfo) {
                popupContent += '<div style="background: #f8f9fa; padding: 8px; border-radius: 6px; margin: 8px 0;">';
                popupContent += '<p style="margin: 4px 0;"><strong>–°–æ–±—Ä–∞–ª:</strong> <a href="#" onclick="showUserProfile(\'' + point.collectorInfo.instagramUsername + '\'); return false;">@' + point.collectorInfo.instagramUsername + '</a></p>';
                if (point.collectorInfo.signature) {
                    popupContent += '<p style="margin: 4px 0;"><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ' + point.collectorInfo.signature + '</p>';
                }
                popupContent += '<p style="margin: 4px 0;"><strong>–í—Ä–µ–º—è:</strong> ' + new Date(point.collectedAt).toLocaleString('ru-RU') + '</p>';
                popupContent += '</div>';
                popupContent += '<button onclick="showPointDetails(\'' + point.id + '\')" style="background: #667eea; color: white; border: none; padding: 8px 12px; border-radius: 6px; width: 100%; cursor: pointer;">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>';
            }
            
            popupContent += '</div>';
            
            marker.bindPopup(popupContent);
            marker.addTo(map);
            markers.push(marker);
        });
        
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ' + markers.length + ' –º–∞—Ä–∫–µ—Ä–æ–≤');
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    function updateStats(points) {
        const available = points.filter(function(p) { return p.status === 'available'; }).length;
        const collected = points.filter(function(p) { return p.status === 'collected'; }).length;
        
        const availableEl = document.getElementById('availableCount');
        const collectedEl = document.getElementById('collectedCount');
        
        if (availableEl) availableEl.textContent = available;
        if (collectedEl) collectedEl.textContent = collected;
        
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ' + available + ' –¥–æ—Å—Ç—É–ø–Ω–æ, ' + collected + ' —Å–æ–±—Ä–∞–Ω–æ');
    }
    
    // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
    window.getCurrentLocation = function() {
        const btn = document.querySelector('.location-btn');
        if (!navigator.geolocation || !map) {
            console.warn('‚ö†Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }
        
        const originalText = btn.innerHTML;
        btn.innerHTML = '‚è≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...';
        btn.disabled = true;
        
        navigator.geolocation.getCurrentPosition(
            function(position) {
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä
                if (window.userMarker) {
                    map.removeLayer(window.userMarker);
                }
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
                const userIcon = L.divIcon({
                    className: 'user-marker',
                    html: '<div class="user-dot"></div>',
                    iconSize: [22, 22],
                    iconAnchor: [11, 11]
                });
                
                window.userMarker = L.marker([lat, lng], { icon: userIcon })
                    .addTo(map)
                    .bindPopup('<div style="text-align: center;"><strong>üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong></div>');
                
                map.flyTo([lat, lng], 16);
                console.log('‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ');
                
                btn.innerHTML = originalText;
                btn.disabled = false;
            },
            function(error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                btn.innerHTML = originalText;
                btn.disabled = false;
            }
        );
    };
    
    // –î–µ—Ç–∞–ª–∏ —Ç–æ—á–∫–∏
    window.showPointDetails = function(pointId) {
        fetch('/api/point/' + pointId + '/info')
            .then(function(response) { return response.json(); })
            .then(function(point) {
                let content = '<h3>' + point.name + '</h3>';
                content += '<p><strong>–°—Ç–∞—Ç—É—Å:</strong> ' + (point.status === 'collected' ? 'üî¥ –°–æ–±—Ä–∞–Ω–∞' : 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞') + '</p>';
                
                if (point.status === 'collected' && point.collectorInfo) {
                    content += '<hr>';
                    content += '<p><strong>–°–æ–±—Ä–∞–ª:</strong> <a href="#" onclick="showUserProfile(\'' + point.collectorInfo.instagramUsername + '\'); return false;">@' + point.collectorInfo.instagramUsername + '</a></p>';
                    if (point.collectorInfo.signature) {
                        content += '<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ' + point.collectorInfo.signature + '</p>';
                    }
                    content += '<p><strong>–í—Ä–µ–º—è:</strong> ' + new Date(point.collectedAt).toLocaleString('ru-RU') + '</p>';
                    
                    if (point.collectorInfo.selfie) {
                        content += '<div style="text-align: center; margin-top: 15px;">';
                        content += '<img src="' + point.collectorInfo.selfie + '" style="max-width: 100%; max-height: 200px; border-radius: 8px;">';
                        content += '</div>';
                    }
                }
                
                document.getElementById('modalTitle').innerHTML = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏';
                document.getElementById('modalBody').innerHTML = content;
                document.getElementById('infoModal').style.display = 'block';
            })
            .catch(function(error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π:', error);
            });
    };
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    window.closeModal = function() {
        document.getElementById('infoModal').style.display = 'none';
    };
    
    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        
        const icons = {
            error: '‚ùå',
            success: '‚úÖ',
            info: '‚ÑπÔ∏è',
            warning: '‚ö†Ô∏è'
        };
        
        notification.innerHTML = `
            <div class="notification-content">
                <span>${icons[type] || icons.info} ${message}</span>
                <button onclick="this.parentElement.parentElement.remove()">√ó</button>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentElement) {
                notification.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }
        }, 4000);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    window.addEventListener('click', function(e) {
        if (e.target === document.getElementById('infoModal')) {
            closeModal();
        }
        if (e.target === document.getElementById('userModal')) {
            closeUserModal();
        }
    });
    
    window.addEventListener('resize', function() {
        if (map) {
            setTimeout(function() { map.invalidateSize(); }, 100);
        }
    });
    
    console.log('üöÄ PlasticBoy v3.0 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
})();—Ä—É–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        loadLeaderboard(1);
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    window.showTab = function(tabName) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.style.display = 'none';
        });
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.nav-tab').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        if (tabName === 'map') {
            document.getElementById('mapTab').style.display = 'block';
            document.querySelector('.nav-tab:nth-child(1)').classList.add('active');
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
            if (map) {
                setTimeout(() => map.invalidateSize(), 100);
            }
        } else if (tabName === 'leaderboard') {
            document.getElementById('leaderboardTab').style.display = 'block';
            document.querySelector('.nav-tab:nth-child(2)').classList.add('active');
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            loadLeaderboard(currentPage);
        }
    };
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    window.loadLeaderboard = function(page = 1) {
        console.log('üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', page);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cacheKey = `${Cache.leaderboardKey}_page_${page}`;
        const cachedData = Cache.load(cacheKey);
        
        if (cachedData) {
            displayLeaderboard(cachedData);
            return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
        fetch(`/api/leaderboard?page=${page}&limit=10`)
            .then(response => response.json())
            .then(data => {
                Cache.save(cacheKey, data);
                displayLeaderboard(data);
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
                showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥', 'error');
            });
    };
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
    function displayLeaderboard(data) {
        const listContainer = document.getElementById('leaderboardList');
        const pageInfo = document.getElementById('pageInfo');
        const prevBtn = document.getElementById('prevPageBtn');
        const nextBtn = document.getElementById('nextPageBtn');
        
        currentPage = data.currentPage;
        totalPages = data.totalPages;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        pageInfo.textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –∏–∑ ${totalPages}`;
        prevBtn.disabled = currentPage <= 1;
        nextBtn.disabled = currentPage >= totalPages;
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        listContainer.innerHTML = '';
        
        if (data.users.length === 0) {
            listContainer.innerHTML = '<p class="no-data">–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–æ–±—Ä–∞–ª –º–æ–¥–µ–ª–∏</p>';
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        data.users.forEach((user, index) => {
            const position = (currentPage - 1) * 10 + index + 1;
            const userItem = createLeaderboardItem(user, position);
            listContainer.appendChild(userItem);
        });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    function createLeaderboardItem(user, position) {
        const item = document.createElement('div');
        item.className = 'leaderboard-item';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∞–ª—å –¥–ª—è —Ç–æ–ø-3
        let medal = '';
        if (position === 1) medal = 'ü•á';
        else if (position === 2) medal = 'ü•à';
        else if (position === 3) medal = 'ü•â';
        else medal = `#${position}`;
        
        // –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä
        const firstLetter = user.instagramUsername.charAt(0).toUpperCase();
        const avatarColor = getColorForLetter(firstLetter);
        
        // –ë–µ–π–¥–∂–∏
        const badges = user.badges ? user.badges.map(b => getBadgeEmoji(b)).join(' ') : '';
        
        item.innerHTML = `
            <div class="leaderboard-position">${medal}</div>
            <div class="leaderboard-avatar" style="background: linear-gradient(45deg, ${avatarColor})">
                ${firstLetter}
            </div>
            <div class="leaderboard-info">
                <div class="leaderboard-username">@${user.instagramUsername}</div>
                <div class="leaderboard-stats">
                    <span class="collected-count">üéØ ${user.collectedCount} –º–æ–¥–µ–ª–µ–π</span>
                    ${badges ? `<span class="badges">${badges}</span>` : ''}
                </div>
            </div>
            <button class="view-profile-btn" onclick="showUserProfile('${user.instagramUsername}')">
                –ü—Ä–æ—Ñ–∏–ª—å
            </button>
        `;
        
        return item;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    window.showUserProfile = function(username) {
        console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:', username);
        
        fetch(`/api/user/${username}`)
            .then(response => response.json())
            .then(data => {
                displayUserProfile(data);
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
                showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'error');
            });
    };
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function displayUserProfile(data) {
        const { user, collectedModels } = data;
        const firstLetter = user.instagramUsername.charAt(0).toUpperCase();
        const avatarColor = getColorForLetter(firstLetter);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        const firstCollected = user.firstCollectedAt 
            ? new Date(user.firstCollectedAt).toLocaleDateString('ru-RU')
            : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        const lastCollected = user.lastCollectedAt
            ? new Date(user.lastCollectedAt).toLocaleDateString('ru-RU')
            : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        const modelsListHTML = collectedModels.length > 0
            ? collectedModels.map(model => `
                <div class="collected-model-item">
                    <span class="model-name">üì¶ ${model.name}</span>
                    <span class="model-date">${new Date(model.collectedAt).toLocaleDateString('ru-RU')}</span>
                </div>
            `).join('')
            : '<p class="no-models">–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</p>';
        
        // –ë–µ–π–¥–∂–∏
        const badgesHTML = user.badges && user.badges.length > 0
            ? user.badges.map(badge => `
                <div class="badge-item">
                    <span class="badge-emoji">${getBadgeEmoji(badge)}</span>
                    <span class="badge-name">${getBadgeDescription(badge)}</span>
                </div>
            `).join('')
            : '<p class="no-badges">–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</p>';
        
        const content = `
            <div class="user-profile-header">
                <div class="profile-avatar-large" style="background: linear-gradient(45deg, ${avatarColor})">
                    ${firstLetter}
                </div>
                <div class="profile-info">
                    <h2>@${user.instagramUsername}</h2>
                    <div class="profile-stats">
                        <div class="stat-box">
                            <span class="stat-value">${user.collectedCount}</span>
                            <span class="stat-label">–ú–æ–¥–µ–ª–µ–π</span>
                        </div>
                        <div class="stat-box">
                            <span class="stat-value">${user.badges ? user.badges.length : 0}</span>
                            <span class="stat-label">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π</span>
                        </div>
                    </div>
                    <div class="profile-dates">
                        <p>üóìÔ∏è –ü–µ—Ä–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞: ${firstCollected}</p>
                        <p>üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞—Ö–æ–¥–∫–∞: ${lastCollected}</p>
                    </div>
                </div>
            </div>
            
            <div class="profile-sections">
                <div class="profile-section">
                    <h3>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                    <div class="badges-list">
                        ${badgesHTML}
                    </div>
                </div>
                
                <div class="profile-section">
                    <h3>üì¶ –°–æ–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏</h3>
                    <div class="models-list">
                        ${modelsListHTML}
                    </div>
                </div>
            </div>
        `;
        
        document.getElementById('userProfileContent').innerHTML = content;
        document.getElementById('userModal').style.display = 'block';
    }
    
    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è
    window.closeUserModal = function() {
        document.getElementById('userModal').style.display = 'none';
    };
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –±—É–∫–≤—ã
    function getColorForLetter(letter) {
        const colors = [
            '#667eea, #764ba2',
            '#f093fb, #f5576c',
            '#4facfe, #00f2fe',
            '#fa709a, #fee140',
            '#30cfd0, #330867',
            '#a8edea, #fed6e3',
            '#ff9a9e, #fecfef',
            '#fbc2eb, #a6c1ee'
        ];
        
        const index = letter.charCodeAt(0) % colors.length;
        return colors[index];
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –±–µ–π–¥–∂–∞
    function getBadgeEmoji(badge) {
        const badges = {
            'first_collect': 'üåü',
            'collector_5': 'ü•â',
            'collector_10': 'ü•à',
            'collector_25': 'ü•á',
            'collector_50': 'üíé',
            'collector_100': 'üëë'
        };
        return badges[badge] || 'üèÜ';
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–π–¥–∂–∞
    function getBadgeDescription(badge) {
        const descriptions = {
            'first_collect': '–ü–µ—Ä–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞',
            'collector_5': '–ë—Ä–æ–Ω–∑–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
            'collector_10': '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
            'collector_25': '–ó–æ–ª–æ—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
            'collector_50': '–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
            'collector_100': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä'
        };
        return descriptions[badge] || '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ';
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã (–æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π)
    function initMap() {
        if (isInitialized) return;
        
        const mapElement = document.getElementById('map');
        if (!mapElement) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        try {
            console.log('üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã');
            
            map = L.map('map', {
                center: ALMATY_CENTER,
                zoom: 13,
                zoomControl: true
            });
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors',
                maxZoom: 18
            }).addTo(map);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
            addMapStyles();
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
            if (window.AppLoader && window.AppLoader.onMapReady) {
                window.AppLoader.onMapReady();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
            setTimeout(function() {
                map.invalidateSize();
                console.log('‚úÖ –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏
                loadPoints();
            }, 200);
            
            isInitialized = true;
            
            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            setInterval(function() {
                loadPoints();
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
                if (document.getElementById('leaderboardTab').style.display !== 'none') {
                    loadLeaderboard(currentPage);
                }
            }, 30000);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
            setTimeout(initMap, 2000);
        }
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
    function addMapStyles() {
        if (document.getElementById('map-styles')) return;
        
        const style = document.createElement('style');
        style.id = 'map-styles';
        style.textContent = `
            .marker-icon {
                background: none !important;
                border: none !important;
            }
            
            .marker-dot {
                width: 20px;
                height: 20px;
                border-radius: 50%;
                border: 2px solid white;
                box-shadow: 0 3px 8px rgba(0,0,0,0.3);
                transition: transform 0.2s ease;
                cursor: pointer;
            }
            
            .marker-dot:hover {
                transform: scale(1.2);
            }
            
            .marker-dot.available {
                background: linear-gradient(45deg, #4CAF50, #45a049);
            }
            
            .marker-dot.collected {
                background: linear-gradient(45deg, #f44336, #e53935);
            }
            
            .user-marker {
                background: none !important;
                border: none !important;
            }
            
            .user-dot {
                width: 22px;
                height: 22px;
                border-radius: 50%;
                background: linear-gradient(45deg, #007bff, #0056b3);
                border: 2px solid white;
                box-shadow: 0 3px 10px rgba(0,0,0,0.3);
            }
        `;
        document.head.appendChild(style);
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫
    function loadPoints() {
        console.log('üìç –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cachedPoints = Cache.load(Cache.key);
        if (cachedPoints) {
            updateMap(cachedPoints);
            updateStats(cachedPoints);
            
            if (window.AppLoader && window.AppLoader.onPointsLoaded) {
                window.AppLoader.onPointsLoaded();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ
            setTimeout(fetchPointsFromServer, 1000);
            return;
        }
        
        // –ó–∞–≥
