// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è PlasticBoy –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
(function() {
    'use strict';
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const MobileDebug = {
        log: (msg, data) => {
            console.log(`üì± [Mobile] ${msg}`, data || '');
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (msg.includes('‚ùå') || msg.includes('ERROR')) {
                MobileDebug.showError(msg);
            }
        },
        
        showError: (error) => {
            if (window.innerWidth <= 768) {
                const errorDiv = document.createElement('div');
                errorDiv.style.cssText = `
                    position: fixed; top: 0; left: 0; right: 0; 
                    background: #f44336; color: white; padding: 10px; 
                    z-index: 9999; font-size: 12px; text-align: center;
                `;
                errorDiv.textContent = error;
                document.body.appendChild(errorDiv);
                setTimeout(() => errorDiv.remove(), 5000);
            }
        },
        
        checkViewport: () => {
            const viewport = {
                width: window.innerWidth,
                height: window.innerHeight,
                devicePixelRatio: window.devicePixelRatio || 1,
                userAgent: navigator.userAgent,
                touchSupport: 'ontouchstart' in window,
                orientation: window.orientation || 0
            };
            MobileDebug.log('Viewport info:', viewport);
            return viewport;
        }
    };
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    const CONFIG = {
        ALMATY_CENTER: [43.2220, 76.8512],
        API_TIMEOUT: 20000, // –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        LEAFLET_TIMEOUT: 15000, // –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è Leaflet
        NOTIFICATION_DURATION: 4000,
        isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
                 ('ontouchstart' in window && window.innerWidth <= 768),
        isIOS: /iPad|iPhone|iPod/.test(navigator.userAgent),
        isAndroid: /Android/.test(navigator.userAgent),
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        getMapSettings: () => {
            const width = window.innerWidth;
            if (width <= 360) {
                return { zoom: 11, height: 300, markerSize: 28 };
            } else if (width <= 480) {
                return { zoom: 12, height: 320, markerSize: 30 };
            } else if (width <= 768) {
                return { zoom: 12, height: 350, markerSize: 32 };
            }
            return { zoom: 13, height: 400, markerSize: 24 };
        }
    };
    
    MobileDebug.log('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫:', {
        isMobile: CONFIG.isMobile,
        isIOS: CONFIG.isIOS,
        isAndroid: CONFIG.isAndroid,
        mapSettings: CONFIG.getMapSettings()
    });
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let map, markersLayer, markers = [], pointsCache = null, isInitialized = false;
    let initAttempts = 0;
    const MAX_INIT_ATTEMPTS = 3;
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    const Utils = {
        log: MobileDebug.log,
        
        validateCoords: (lat, lng) => {
            const numLat = Number(lat), numLng = Number(lng);
            const valid = !isNaN(numLat) && !isNaN(numLng) && 
                   numLat >= -90 && numLat <= 90 && 
                   numLng >= -180 && numLng <= 180;
            if (!valid) {
                MobileDebug.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${lat}, ${lng}`);
            }
            return valid;
        },
        
        createElement: (tag, className, innerHTML) => {
            const el = document.createElement(tag);
            if (className) el.className = className;
            if (innerHTML) el.innerHTML = innerHTML;
            return el;
        },
        
        addStyles: (id, css) => {
            if (document.getElementById(id)) return;
            const style = Utils.createElement('style');
            style.id = id;
            style.textContent = css;
            document.head.appendChild(style);
            MobileDebug.log(`‚úÖ –°—Ç–∏–ª–∏ ${id} –¥–æ–±–∞–≤–ª–µ–Ω—ã`);
        },
        
        debounce: (func, delay) => {
            let timeoutId;
            return (...args) => {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => func.apply(null, args), delay);
            };
        },
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM —ç–ª–µ–º–µ–Ω—Ç–∞
        waitForElement: (selector, timeout = 10000) => {
            return new Promise((resolve, reject) => {
                const element = document.querySelector(selector);
                if (element) {
                    MobileDebug.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–∞–π–¥–µ–Ω —Å—Ä–∞–∑—É`);
                    return resolve(element);
                }
                
                const observer = new MutationObserver((mutations, obs) => {
                    const element = document.querySelector(selector);
                    if (element) {
                        obs.disconnect();
                        MobileDebug.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ observer`);
                        resolve(element);
                    }
                });
                
                observer.observe(document.body, {
                    childList: true,
                    subtree: true
                });
                
                setTimeout(() => {
                    observer.disconnect();
                    MobileDebug.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ ${timeout}ms`);
                    reject(new Error(`–≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`));
                }, timeout);
            });
        }
    };
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    const MOBILE_STYLES = `
        /* –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç */
        #map, #adminMap {
            width: 100% !important;
            height: ${CONFIG.getMapSettings().height}px !important;
            min-height: ${CONFIG.getMapSettings().height}px !important;
            max-height: ${CONFIG.getMapSettings().height}px !important;
            position: relative !important;
            z-index: 1 !important;
        }
        
        /* –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã */
        .map-container {
            width: 100% !important;
            height: ${CONFIG.getMapSettings().height}px !important;
            position: relative !important;
            overflow: hidden !important;
            border-radius: 15px !important;
            background: #f0f0f0 !important;
        }
        
        /* Leaflet –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */
        .leaflet-container {
            width: 100% !important;
            height: 100% !important;
            position: relative !important;
            background: #f8f9fa !important;
        }
        
        /* –ú–æ–±–∏–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã */
        .pb-marker { background: none !important; border: none !important; }
        .pb-dot {
            width: ${CONFIG.getMapSettings().markerSize}px !important;
            height: ${CONFIG.getMapSettings().markerSize}px !important;
            border-radius: 50% !important;
            border: 3px solid white !important;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3) !important;
            cursor: pointer !important;
            transition: all 0.3s ease !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            font-size: ${CONFIG.getMapSettings().markerSize > 30 ? '14px' : '12px'} !important;
            font-weight: bold !important;
            color: white !important;
            position: relative !important;
            touch-action: manipulation !important;
            z-index: 1000 !important;
        }
        
        .pb-dot:active, .pb-dot.active {
            transform: scale(1.15) !important;
            box-shadow: 0 6px 20px rgba(0,0,0,0.4) !important;
        }
        
        .pb-dot.available {
            background: linear-gradient(45deg, #4CAF50, #45a049) !important;
        }
        
        .pb-dot.collected {
            background: linear-gradient(45deg, #f44336, #e53935) !important;
        }
        
        .pb-dot.available::before { content: 'üì¶' !important; }
        .pb-dot.collected::before { content: '‚úÖ' !important; }
        
        /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–ø–∞–ø—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
        .leaflet-popup-content-wrapper {
            max-width: ${window.innerWidth - 40}px !important;
            min-width: 250px !important;
        }
        
        .leaflet-popup-close-button {
            width: 32px !important;
            height: 32px !important;
            font-size: 24px !important;
            line-height: 30px !important;
            text-align: center !important;
        }
        
        .pb-popup {
            min-width: 250px !important;
            max-width: ${window.innerWidth - 60}px !important;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
            font-size: 15px !important;
        }
        
        /* –ö–æ–Ω—Ç—Ä–æ–ª—ã –∫–∞—Ä—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
        .leaflet-control-zoom {
            margin-top: 10px !important;
            margin-left: 10px !important;
        }
        
        .leaflet-control-zoom a {
            width: 35px !important;
            height: 35px !important;
            line-height: 35px !important;
            font-size: 20px !important;
        }
        
        /* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
        .pb-notification {
            position: fixed !important;
            top: 10px !important;
            left: 10px !important;
            right: 10px !important;
            z-index: 3000 !important;
            max-width: none !important;
            font-size: 14px !important;
        }
        
        /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è iOS */
        ${CONFIG.isIOS ? `
            .leaflet-container {
                -webkit-transform: translate3d(0,0,0) !important;
            }
            
            .pb-dot {
                -webkit-transform: translate3d(0,0,0) !important;
            }
        ` : ''}
        
        /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è Android */
        ${CONFIG.isAndroid ? `
            .leaflet-container {
                transform: translateZ(0) !important;
            }
        ` : ''}
        
        /* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
        .mobile-debug {
            position: fixed;
            bottom: 10px;
            left: 10px;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 10px;
            z-index: 9999;
            display: none;
        }
        
        .mobile-debug.show {
            display: block;
        }
    `;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const DebugInfo = {
        create: () => {
            if (!CONFIG.isMobile) return;
            
            const debug = Utils.createElement('div', 'mobile-debug');
            debug.innerHTML = `
                üì± ${window.innerWidth}x${window.innerHeight} | 
                üîç ${CONFIG.getMapSettings().zoom} | 
                üìç ${markers.length} —Ç–æ—á–µ–∫
            `;
            document.body.appendChild(debug);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            setTimeout(() => debug.classList.add('show'), 1000);
            setTimeout(() => debug.classList.remove('show'), 4000);
            
            return debug;
        },
        
        update: (info) => {
            const debug = document.querySelector('.mobile-debug');
            if (debug) {
                debug.innerHTML = `üì± ${info} | üìç ${markers.length} —Ç–æ—á–µ–∫`;
            }
        }
    };
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const Notification = {
        show: (message, type = 'info') => {
            const icons = { error: '‚ùå', success: '‚úÖ', info: '‚ÑπÔ∏è', warning: '‚ö†Ô∏è' };
            const notification = Utils.createElement('div', `pb-notification ${type}`);
            
            notification.innerHTML = `
                <div style="display: flex; align-items: center; gap: 10px;">
                    <span>${icons[type]}</span>
                    <span style="flex: 1;">${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" 
                            style="background: none; border: none; color: inherit; font-size: 18px; cursor: pointer;">√ó</button>
                </div>
            `;
            
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), CONFIG.NOTIFICATION_DURATION);
            MobileDebug.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: [${type}] ${message}`);
        }
    };
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    const API = {
        async fetchPoints(attempt = 1) {
            MobileDebug.log(`–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})...`);
            
            const controller = new AbortController();
            const timeout = setTimeout(() => controller.abort(), CONFIG.API_TIMEOUT);
            
            try {
                const response = await fetch('/api/points', {
                    method: 'GET',
                    headers: { 
                        'Accept': 'application/json',
                        'Cache-Control': 'no-cache',
                        'User-Agent': navigator.userAgent
                    },
                    signal: controller.signal
                });
                
                clearTimeout(timeout);
                
                MobileDebug.log(`–û—Ç–≤–µ—Ç API: ${response.status} ${response.statusText}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const points = await response.json();
                
                if (!Array.isArray(points)) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                }
                
                MobileDebug.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${points.length} —Ç–æ—á–µ–∫`, points);
                return points;
                
            } catch (error) {
                clearTimeout(timeout);
                MobileDebug.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error.message);
                
                if (attempt < 3 && error.name !== 'AbortError') {
                    MobileDebug.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...`);
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    return this.fetchPoints(attempt + 1);
                }
                
                throw error;
            }
        }
    };
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—Ä—Ç
    const MapManager = {
        async init() {
            if (isInitialized) {
                MobileDebug.log('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                return;
            }
            
            initAttempts++;
            MobileDebug.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã (–ø–æ–ø—ã—Ç–∫–∞ ${initAttempts})...`);
            
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—Ç—ã
                const mapElement = await Utils.waitForElement('#map', 5000);
                MobileDebug.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç #map –Ω–∞–π–¥–µ–Ω');
                
                // –û–∂–∏–¥–∞–µ–º Leaflet
                await this.waitForLeaflet();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º viewport
                const viewport = MobileDebug.checkViewport();
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                const mapSettings = CONFIG.getMapSettings();
                
                const mapOptions = {
                    center: CONFIG.ALMATY_CENTER,
                    zoom: mapSettings.zoom,
                    zoomControl: true,
                    attributionControl: !CONFIG.isMobile,
                    preferCanvas: CONFIG.isMobile,
                    maxZoom: 18,
                    minZoom: 8,
                    wheelPxPerZoomLevel: CONFIG.isMobile ? 120 : 60,
                    zoomAnimationThreshold: CONFIG.isMobile ? 2 : 4
                };
                
                // –ú–æ–±–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if (CONFIG.isMobile) {
                    mapOptions.tap = true;
                    mapOptions.touchZoom = true;
                    mapOptions.scrollWheelZoom = false;
                    mapOptions.doubleClickZoom = true;
                    mapOptions.boxZoom = false;
                    mapOptions.keyboard = false;
                    mapOptions.dragging = true;
                    mapOptions.zoomSnap = 0.5;
                    mapOptions.zoomDelta = 0.5;
                }
                
                MobileDebug.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –æ–ø—Ü–∏—è–º–∏:', mapOptions);
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
                map = L.map('map', mapOptions);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
                if (!map) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É');
                }
                
                MobileDebug.log('‚úÖ –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω');
                
                // –¢–∞–π–ª—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                const tileOptions = {
                    attribution: CONFIG.isMobile ? '' : '¬© OpenStreetMap contributors',
                    maxZoom: 18,
                    detectRetina: true,
                    updateWhenIdle: CONFIG.isMobile,
                    updateWhenZooming: !CONFIG.isMobile,
                    keepBuffer: CONFIG.isMobile ? 1 : 2
                };
                
                const tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', tileOptions);
                tileLayer.addTo(map);
                
                MobileDebug.log('‚úÖ –¢–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');
                
                // –ì—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
                markersLayer = L.layerGroup().addTo(map);
                MobileDebug.log('‚úÖ –°–ª–æ–π –º–∞—Ä–∫–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω');
                
                // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
                window.map = map;
                window.markersLayer = markersLayer;
                
                // –°–æ–±—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
                map.on('ready', () => {
                    MobileDebug.log('‚úÖ –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ (—Å–æ–±—ã—Ç–∏–µ ready)');
                });
                
                map.on('load', () => {
                    MobileDebug.log('‚úÖ –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—Å–æ–±—ã—Ç–∏–µ load)');
                });
                
                if (CONFIG.isMobile) {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                    map.on('zoomend', () => {
                        DebugInfo.update(`zoom: ${map.getZoom()}`);
                    });
                    
                    map.on('moveend', () => {
                        const center = map.getCenter();
                        DebugInfo.update(`center: ${center.lat.toFixed(4)}, ${center.lng.toFixed(4)}`);
                    });
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
                setTimeout(() => {
                    try {
                        map.invalidateSize();
                        MobileDebug.log('‚úÖ –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω');
                    } catch (e) {
                        MobileDebug.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞:', e.message);
                    }
                }, 100);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                if (CONFIG.isMobile) {
                    setTimeout(() => {
                        try {
                            map.invalidateSize();
                            map.setView(CONFIG.ALMATY_CENTER, mapSettings.zoom);
                            MobileDebug.log('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö');
                        } catch (e) {
                            MobileDebug.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', e.message);
                        }
                    }, 500);
                }
                
                isInitialized = true;
                MobileDebug.log('‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞');
                
                // –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                DebugInfo.create();
                
            } catch (error) {
                MobileDebug.log(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:`, error.message);
                
                if (initAttempts < MAX_INIT_ATTEMPTS) {
                    MobileDebug.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...`);
                    setTimeout(() => this.init(), 3000);
                } else {
                    MobileDebug.log(`üí• –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω`);
                    Notification.show('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
                }
            }
        },
        
        async waitForLeaflet() {
            if (typeof L !== 'undefined') {
                MobileDebug.log('‚úÖ Leaflet —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                return;
            }
            
            MobileDebug.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Leaflet...');
            const startTime = Date.now();
            
            return new Promise((resolve, reject) => {
                const check = setInterval(() => {
                    if (typeof L !== 'undefined') {
                        clearInterval(check);
                        const loadTime = Date.now() - startTime;
                        MobileDebug.log(`‚úÖ Leaflet –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ ${loadTime}ms`);
                        resolve();
                    } else if (Date.now() - startTime > CONFIG.LEAFLET_TIMEOUT) {
                        clearInterval(check);
                        MobileDebug.log(`‚ùå Leaflet –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ ${CONFIG.LEAFLET_TIMEOUT}ms`);
                        reject(new Error('Leaflet –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è'));
                    }
                }, 100);
            });
        },
        
        updateMarkers(points) {
            if (!map || !markersLayer) {
                MobileDebug.log('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤');
                return;
            }
            
            MobileDebug.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ (${points.length} —Ç–æ—á–µ–∫)...`);
            
            // –û—á–∏—Å—Ç–∫–∞
            markersLayer.clearLayers();
            markers.length = 0;
            
            let successCount = 0;
            const mapSettings = CONFIG.getMapSettings();
            
            points.forEach((point, index) => {
                try {
                    const lat = Number(point.coordinates.lat);
                    const lng = Number(point.coordinates.lng);
                    
                    if (!Utils.validateCoords(lat, lng)) {
                        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${lat}, ${lng}`);
                    }
                    
                    const isAvailable = point.status === 'available';
                    
                    // –ò–∫–æ–Ω–∫–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
                    const icon = L.divIcon({
                        className: 'pb-marker',
                        html: `<div class="pb-dot ${isAvailable ? 'available' : 'collected'}"></div>`,
                        iconSize: [mapSettings.markerSize, mapSettings.markerSize],
                        iconAnchor: [mapSettings.markerSize / 2, mapSettings.markerSize / 2]
                    });
                    
                    // –ú–∞—Ä–∫–µ—Ä
                    const marker = L.marker([lat, lng], { icon });
                    
                    // Popup —Å –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
                    let popup = `
                        <div class="pb-popup">
                            <h3>${point.name}</h3>
                            <div class="pb-status ${point.status}">
                                ${isAvailable ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞' : 'üî¥ –£–∂–µ —Å–æ–±—Ä–∞–Ω–∞'}
                            </div>
                            <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${lat.toFixed(6)}, ${lng.toFixed(6)}</p>
                    `;
                    
                    if (point.createdAt) {
                        popup += `<p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${new Date(point.createdAt).toLocaleString('ru-RU')}</p>`;
                    }
                    
                    if (!isAvailable && point.collectorInfo) {
                        popup += `
                            <div style="background:#f8f9fa;padding:10px;border-radius:8px;margin:10px 0;">
                                <p><strong>–°–æ–±—Ä–∞–ª:</strong> ${point.collectorInfo.name}</p>
                                ${point.collectorInfo.signature ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${point.collectorInfo.signature}</p>` : ''}
                                ${point.collectedAt ? `<p><strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>` : ''}
                            </div>
                        `;
                    }
                    
                    popup += '</div>';
                    
                    const popupOptions = {
                        maxWidth: Math.min(300, window.innerWidth - 40),
                        autoPan: true,
                        autoPanPadding: [10, 10],
                        closeButton: true,
                        autoClose: CONFIG.isMobile, // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
                        keepInView: true
                    };
                    
                    marker.bindPopup(popup, popupOptions);
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                    if (CONFIG.isMobile) {
                        marker.on('click', function(e) {
                            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º popup
                            this.openPopup();
                            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–∞—Ä–∫–µ—Ä–µ
                            map.setView(e.latlng, Math.max(map.getZoom(), 14));
                        });
                    }
                    
                    markersLayer.addLayer(marker);
                    markers.push(marker);
                    successCount++;
                    
                } catch (error) {
                    MobileDebug.log(`‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä–∫–µ—Ä–∞ ${index + 1}:`, error.message);
                }
            });
            
            window.markers = markers;
            
            MobileDebug.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${successCount} –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ ${points.length}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            DebugInfo.update(`${successCount} –º–∞—Ä–∫–µ—Ä–æ–≤`);
            
            // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if (CONFIG.isMobile && successCount > 0) {
                setTimeout(() => {
                    try {
                        const group = new L.featureGroup(markers);
                        const bounds = group.getBounds();
                        if (bounds.isValid()) {
                            map.fitBounds(bounds, { 
                                padding: [20, 20], 
                                maxZoom: 15 
                            });
                            MobileDebug.log('‚úÖ –ö–∞—Ä—Ç–∞ –æ—Ç—Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ä–∞—Ö');
                        }
                    } catch (e) {
                        MobileDebug.log('‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', e.message);
                    }
                }, 1000);
            }
            
            if (successCount > 0) {
                Notification.show(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${successCount} —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç—É`, 'success');
            } else if (points.length > 0) {
                Notification.show('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ', 'error');
            }
        }
    };
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const Stats = {
        update(points) {
            const available = points.filter(p => p.status === 'available').length;
            const collected = points.filter(p => p.status === 'collected').length;
            
            this.updateElement('availableCount', available);
            this.updateElement('collectedCount', collected);
            
            MobileDebug.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', { available, collected });
        },
        
        updateElement(id, value) {
            const element = document.getElementById(id);
            if (!element) return;
            
            const current = parseInt(element.textContent) || 0;
            if (current === value) return;
            
            element.style.transform = 'scale(1.1)';
            element.style.transition = 'transform 0.2s ease';
            
            setTimeout(() => {
                element.textContent = value;
                element.style.transform = 'scale(1)';
            }, 100);
        }
    };
    
    // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
    const Location = {
        getCurrentPosition() {
            MobileDebug.log('–ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...');
            
            const locationBtn = document.querySelector('.location-btn');
            if (!locationBtn) {
                MobileDebug.log('‚ùå –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            
            if (!navigator.geolocation) {
                Notification.show('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
                return;
            }
            
            const originalText = locationBtn.innerHTML;
            locationBtn.innerHTML = '‚è≥ –ü–æ–∏—Å–∫...';
            locationBtn.disabled = true;
            
            const options = {
                enableHighAccuracy: true,
                timeout: CONFIG.isMobile ? 25000 : 15000, // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                maximumAge: 300000
            };
            
            MobileDebug.log('–ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å –æ–ø—Ü–∏—è–º–∏:', options);
            
            navigator.geolocation.getCurrentPosition(
                (position) => this.onLocationSuccess(position, locationBtn, originalText),
                (error) => this.onLocationError(error, locationBtn, originalText),
                options
            );
        },
        
        onLocationSuccess(position, btn, originalText) {
            const { latitude: lat, longitude: lng, accuracy } = position.coords;
            
            MobileDebug.log('‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', { lat, lng, accuracy });
            
            if (!map) {
                MobileDebug.log('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
                Notification.show('–ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞', 'error');
                btn.innerHTML = originalText;
                btn.disabled = false;
                return;
            }
            
            // –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            const iconSize = CONFIG.getMapSettings().markerSize;
            
            const userIcon = L.divIcon({
                className: 'pb-user-marker',
                html: `<div style="
                    background:linear-gradient(45deg,#2196F3,#1976D2);
                    width:${iconSize}px;
                    height:${iconSize}px;
                    border-radius:50%;border:3px solid white;
                    box-shadow:0 4px 12px rgba(33,150,243,0.4);
                    display:flex;align-items:center;justify-content:center;
                    color:white;font-weight:bold;font-size:${Math.max(10, iconSize-14)}px;position:relative;
                    z-index:1001;
                ">üë§<div style="
                    position:absolute;top:-3px;left:-3px;right:-3px;bottom:-3px;
                    border:2px solid #2196F3;border-radius:50%;opacity:0.6;
                    animation:userPulse 2s infinite
                "></div></div>`,
                iconSize: [iconSize, iconSize],
                iconAnchor: [iconSize/2, iconSize/2]
            });
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä
            if (window.userMarker) {
                map.removeLayer(window.userMarker);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
            window.userMarker = L.marker([lat, lng], { icon: userIcon })
                .addTo(map)
                .bindPopup(`
                    <div style="text-align:center;min-width:150px">
                        <strong>üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong><br>
                        <small style="color:#666">
                            ${lat.toFixed(6)}, ${lng.toFixed(6)}<br>
                            –¢–æ—á–Ω–æ—Å—Ç—å: ¬±${Math.round(accuracy)}–º
                        </small>
                    </div>
                `, {
                    maxWidth: Math.min(200, window.innerWidth - 40)
                });
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
            const zoom = Math.max(map.getZoom(), CONFIG.isMobile ? 15 : 16);
            map.setView([lat, lng], zoom);
            
            Notification.show('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ!', 'success');
            
            btn.innerHTML = originalText;
            btn.disabled = false;
            
            DebugInfo.update(`GPS: ${accuracy}–º`);
        },
        
        onLocationError(error, btn, originalText) {
            MobileDebug.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            
            const messages = {
                1: '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏',
                2: '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                3: '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ'
            };
            
            const message = messages[error.code] || '–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏';
            Notification.show(message, 'error');
            
            btn.innerHTML = originalText;
            btn.disabled = false;
            
            DebugInfo.update('GPS: error');
        }
    };
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const TestData = {
        createPoints() {
            MobileDebug.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫...');
            
            const testPoints = [
                {
                    id: 'test1',
                    name: '–¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å - –ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ',
                    coordinates: { lat: 43.2220, lng: 76.8512 },
                    status: 'available',
                    createdAt: new Date().toISOString()
                },
                {
                    id: 'test2',
                    name: '–¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å - –ü–ª–æ—â–∞–¥—å –†–µ—Å–ø—É–±–ª–∏–∫–∏',
                    coordinates: { lat: 43.2380, lng: 76.8840 },
                    status: 'collected',
                    collectorInfo: { 
                        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 
                        signature: '–ü–µ—Ä–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞!' 
                    },
                    collectedAt: new Date(Date.now() - 3600000).toISOString()
                },
                {
                    id: 'test3',
                    name: '–¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å - –ö–æ–∫-–¢–æ–±–µ',
                    coordinates: { lat: 43.2050, lng: 76.9080 },
                    status: 'available',
                    createdAt: new Date().toISOString()
                }
            ];
            
            pointsCache = testPoints;
            MapManager.updateMarkers(testPoints);
            Stats.update(testPoints);
            
            Notification.show('–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏', 'info');
            MobileDebug.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');
        }
    };
    
    // –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const App = {
        async init() {
            MobileDebug.log('üöÄ –ó–∞–ø—É—Å–∫ PlasticBoy...');
            MobileDebug.checkViewport();
            
            try {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
                Utils.addStyles('pb-mobile-styles', MOBILE_STYLES);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
                this.initButtons();
                
                // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
                await this.waitForDOM();
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
                await MapManager.init();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏
                await this.loadPoints();
                
                MobileDebug.log('‚úÖ PlasticBoy –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤');
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                if (typeof window.PlasticBoyLoader?.onPointsLoaded === 'function') {
                    window.PlasticBoyLoader.onPointsLoaded();
                }
                
            } catch (error) {
                MobileDebug.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
                Notification.show('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message, 'error');
                
                // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                if (CONFIG.isMobile || location.hostname === 'localhost') {
                    MobileDebug.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
                    setTimeout(() => {
                        TestData.createPoints();
                        if (typeof window.PlasticBoyLoader?.onPointsLoaded === 'function') {
                            window.PlasticBoyLoader.onPointsLoaded();
                        }
                    }, 2000);
                }
            }
        },
        
        async waitForDOM() {
            if (document.readyState === 'complete') {
                MobileDebug.log('‚úÖ DOM —É–∂–µ –≥–æ—Ç–æ–≤');
                return;
            }
            
            MobileDebug.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM...');
            
            return new Promise(resolve => {
                if (document.readyState === 'complete') {
                    resolve();
                } else {
                    window.addEventListener('load', resolve);
                    // –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä
                    setTimeout(resolve, 10000);
                }
            });
        },
        
        async loadPoints() {
            try {
                MobileDebug.log('üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
                const points = await API.fetchPoints();
                pointsCache = points;
                
                if (points.length === 0) {
                    MobileDebug.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫');
                    Notification.show('–¢–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'warning');
                    
                    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if (CONFIG.isMobile) {
                        TestData.createPoints();
                    }
                    return;
                }
                
                MapManager.updateMarkers(points);
                Stats.update(points);
                
                MobileDebug.log('‚úÖ –¢–æ—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');
                
            } catch (error) {
                MobileDebug.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫:', error.message);
                Notification.show('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message, 'error');
                
                // Fallback –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                if (CONFIG.isMobile || location.hostname === 'localhost' || location.search.includes('debug')) {
                    MobileDebug.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
                    TestData.createPoints();
                }
            }
        },
        
        initButtons() {
            // –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            const locationBtn = document.querySelector('.location-btn');
            if (locationBtn) {
                locationBtn.addEventListener('click', Location.getCurrentPosition);
                MobileDebug.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
            } else {
                MobileDebug.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (CONFIG.isMobile) {
                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º —Ç–∞–ø–µ
                document.addEventListener('touchstart', function(e) {
                    if (e.touches.length > 1) {
                        e.preventDefault();
                    }
                });
                
                let lastTouchEnd = 0;
                document.addEventListener('touchend', function(e) {
                    const now = (new Date()).getTime();
                    if (now - lastTouchEnd <= 300) {
                        e.preventDefault();
                    }
                    lastTouchEnd = now;
                }, false);
            }
        }
    };
    
    // –°–æ–±—ã—Ç–∏—è –æ–∫–Ω–∞
    window.addEventListener('resize', Utils.debounce(() => {
        MobileDebug.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞');
        if (map) {
            map.invalidateSize();
            DebugInfo.update(`${window.innerWidth}x${window.innerHeight}`);
        }
    }, 250));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (CONFIG.isMobile) {
        window.addEventListener('orientationchange', () => {
            MobileDebug.log('üîÑ –ü–æ–≤–æ—Ä–æ—Ç —ç–∫—Ä–∞–Ω–∞');
            setTimeout(() => {
                if (map) {
                    map.invalidateSize();
                    // –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
                    const currentCenter = map.getCenter();
                    const currentZoom = map.getZoom();
                    setTimeout(() => {
                        map.setView(currentCenter, currentZoom);
                    }, 100);
                }
            }, 500);
        });
    }
    
    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', (e) => {
        if (!e.ctrlKey && !e.metaKey) return;
        
        switch (e.key) {
            case 'l':
                e.preventDefault();
                Location.getCurrentPosition();
                break;
            case 'r':
                e.preventDefault();
                if (isInitialized) App.loadPoints();
                break;
            case 'd':
                e.preventDefault();
                console.group('üéØ PlasticBoy Mobile –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
                console.log('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', CONFIG.isMobile ? '–ú–æ–±–∏–ª—å–Ω–æ–µ' : '–î–µ—Å–∫—Ç–æ–ø');
                console.log('iOS:', CONFIG.isIOS);
                console.log('Android:', CONFIG.isAndroid);
                console.log('–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞:', `${window.innerWidth}x${window.innerHeight}`);
                console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:', isInitialized);
                console.log('–ö–∞—Ä—Ç–∞:', !!map);
                console.log('–ú–∞—Ä–∫–µ—Ä—ã:', markers.length);
                console.log('–ö—ç—à —Ç–æ—á–µ–∫:', pointsCache?.length || 0);
                console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã:', CONFIG.getMapSettings());
                console.groupEnd();
                Notification.show('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏', 'info');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                const debug = document.querySelector('.mobile-debug');
                if (debug) {
                    debug.classList.toggle('show');
                }
                break;
            case 't':
                e.preventDefault();
                if (CONFIG.isMobile) {
                    TestData.createPoints();
                }
                break;
        }
    });
    
    // –≠–∫—Å–ø–æ—Ä—Ç API
    window.PlasticBoy = {
        map: () => map,
        markers: () => markers,
        loadPoints: () => App.loadPoints(),
        getLocation: Location.getCurrentPosition,
        isReady: () => isInitialized,
        getCache: () => pointsCache,
        isMobile: CONFIG.isMobile,
        debug: MobileDebug,
        testData: TestData
    };
    
    // –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    window.showNotification = Notification.show;
    window.updateMap = MapManager.updateMarkers;
    window.updateStats = Stats.update;
    window.loadPoints = () => App.loadPoints();
    window.getCurrentLocation = Location.getCurrentPosition;
    window.initMap = MapManager.init;
    
    // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            MobileDebug.log('üì± DOM –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 200ms...');
            setTimeout(App.init, 200);
        });
    } else {
        MobileDebug.log('üì± DOM —É–∂–µ –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 100ms...');
        setTimeout(App.init, 100);
    }
    
    MobileDebug.log('‚úÖ PlasticBoy –º–æ–±–∏–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
    MobileDebug.log(`üì± –†–µ–∂–∏–º: ${CONFIG.isMobile ? '–ú–û–ë–ò–õ–¨–ù–´–ô' : '–î–ï–°–ö–¢–û–ü'}`);
    MobileDebug.log(`üìê –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${JSON.stringify(CONFIG.getMapSettings())}`);
    
})();
