// PlasticBoy v2.1 - Optimized for blazing fast performance
(function() {
    'use strict';
    
    console.log('üéØ PlasticBoy - Optimized Script initialization');
    
    // –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
    let map = null;
    let markers = [];
    let isInitialized = false;
    let markersPool = []; // –ü—É–ª –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    // Almaty coordinates
    const ALMATY_CENTER = [43.2220, 76.8512];
    
    // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
    class FastCache {
        constructor() {
            this.cache = new Map();
            this.ttl = 3 * 60 * 1000; // 3 –º–∏–Ω—É—Ç—ã
            this.maxSize = 50;
        }
        
        set(key, data) {
            try {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω —Ä–∞–∑–º–µ—Ä
                if (this.cache.size >= this.maxSize) {
                    const firstKey = this.cache.keys().next().value;
                    this.cache.delete(firstKey);
                }
                
                this.cache.set(key, {
                    data,
                    timestamp: Date.now()
                });
                
                // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ fallback
                localStorage.setItem(`pb_${key}`, JSON.stringify({
                    data,
                    timestamp: Date.now()
                }));
            } catch (e) {
                console.warn('‚ö†Ô∏è Cache save error:', e.message);
            }
        }
        
        get(key) {
            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º memory cache
                let item = this.cache.get(key);
                
                // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
                if (!item) {
                    const stored = localStorage.getItem(`pb_${key}`);
                    if (stored) {
                        item = JSON.parse(stored);
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ memory cache
                        this.cache.set(key, item);
                    }
                }
                
                if (!item) return null;
                
                const age = Date.now() - item.timestamp;
                if (age > this.ttl) {
                    this.cache.delete(key);
                    localStorage.removeItem(`pb_${key}`);
                    return null;
                }
                
                return item.data;
            } catch (e) {
                console.warn('‚ö†Ô∏è Cache read error:', e.message);
                return null;
            }
        }
        
        clear() {
            this.cache.clear();
            // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ –∫–ª—é—á–∏ –∏–∑ localStorage
            for (let i = localStorage.length - 1; i >= 0; i--) {
                const key = localStorage.key(i);
                if (key && key.startsWith('pb_')) {
                    localStorage.removeItem(key);
                }
            }
        }
        
        getSize() {
            return this.cache.size;
        }
    }
    
    const cache = new FastCache();
    
    // –ë–ê–¢–ß–ò–ù–ì DOM –û–ü–ï–†–ê–¶–ò–ô
    class DOMBatcher {
        constructor() {
            this.pending = [];
            this.isScheduled = false;
        }
        
        add(fn) {
            this.pending.push(fn);
            if (!this.isScheduled) {
                this.isScheduled = true;
                requestAnimationFrame(() => {
                    const batch = this.pending.splice(0);
                    this.isScheduled = false;
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º frame
                    batch.forEach(fn => {
                        try {
                            fn();
                        } catch (e) {
                            console.warn('‚ö†Ô∏è DOM batch error:', e);
                        }
                    });
                });
            }
        }
    }
    
    const domBatcher = new DOMBatcher();
    
    // –î–ï–ë–ê–£–ù–° –î–õ–Ø –ß–ê–°–¢–´–• –û–ü–ï–†–ê–¶–ò–ô
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func.apply(this, args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    // THROTTLE –î–õ–Ø –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ß–ê–°–¢–û–¢–´
    function throttle(func, limit) {
        let inThrottle;
        return function(...args) {
            if (!inThrottle) {
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
    
    // –ë–´–°–¢–†–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    function initFast() {
        return new Promise((resolve) => {
            console.log('üöÄ Fast initialization started');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å DOM
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', initFast);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Leaflet —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            let attempts = 0;
            const maxAttempts = 100; // 10 —Å–µ–∫—É–Ω–¥
            
            const checkLeaflet = () => {
                attempts++;
                
                if (typeof L !== 'undefined' && L.map) {
                    console.log('‚úÖ Leaflet ready in', attempts * 100, 'ms');
                    initMapFast().then(resolve);
                } else if (attempts < maxAttempts) {
                    setTimeout(checkLeaflet, 100);
                } else {
                    console.error('‚ùå Leaflet timeout after 10 seconds');
                    resolve(); // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                }
            };
            
            checkLeaflet();
        });
    }
    
    // –ú–û–õ–ù–ò–ï–ù–û–°–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–†–¢–´
    function initMapFast() {
        return new Promise((resolve) => {
            if (isInitialized) {
                resolve();
                return;
            }
            
            const mapElement = document.getElementById('map');
            if (!mapElement) {
                console.warn('‚ö†Ô∏è Map element not found');
                resolve();
                return;
            }
            
            try {
                console.log('üó∫Ô∏è Creating optimized map');
                
                // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                map = L.map('map', {
                    center: ALMATY_CENTER,
                    zoom: 13,
                    zoomControl: true,
                    preferCanvas: true,
                    renderer: L.canvas(), // Canvas —Ä–µ–Ω–¥–µ—Ä–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    zoomAnimation: true,
                    fadeAnimation: true,
                    markerZoomAnimation: true
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
                const tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '¬© OpenStreetMap',
                    maxZoom: 18,
                    tileSize: 256,
                    crossOrigin: true,
                    updateWhenZooming: false, // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
                    updateWhenIdle: true,     // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
                    keepBuffer: 2             // –ö—ç—à–∏—Ä—É–µ–º –±–æ–ª—å—à–µ —Ç–∞–π–ª–æ–≤
                });
                
                tileLayer.addTo(map);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
                addMapStylesFast();
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
                if (window.AppLoader?.onMapReady) {
                    window.AppLoader.onMapReady();
                }
                
                // –ë—ã—Å—Ç—Ä–æ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                map.whenReady(() => {
                    setTimeout(() => {
                        map.invalidateSize();
                        isInitialized = true;
                        
                        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
                        setInterval(loadPointsFast, 30000);
                        
                        console.log('‚úÖ Map optimized and ready');
                        resolve();
                    }, 50); // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 200ms
                });
                
            } catch (error) {
                console.error('‚ùå Map creation error:', error);
                resolve(); // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º
            }
        });
    }
    
    // –ú–û–õ–ù–ò–ï–ù–û–°–ù–´–ï –°–¢–ò–õ–ò
    function addMapStylesFast() {
        if (document.getElementById('map-styles-fast')) return;
        
        const style = document.createElement('style');
        style.id = 'map-styles-fast';
        style.textContent = `
            .marker-fast { background: none !important; border: none !important; }
            .marker-dot-fast {
                width: 18px; height: 18px; border-radius: 50%;
                border: 2px solid white; box-shadow: 0 2px 6px rgba(0,0,0,0.3);
                transition: transform 0.2s ease; cursor: pointer;
            }
            .marker-dot-fast:hover { transform: scale(1.15); }
            .marker-dot-fast.available { background: linear-gradient(45deg, #4CAF50, #45a049); }
            .marker-dot-fast.collected { background: linear-gradient(45deg, #f44336, #e53935); }
            .user-marker-fast { background: none !important; border: none !important; }
            .user-dot-fast {
                width: 20px; height: 20px; border-radius: 50%;
                background: linear-gradient(45deg, #007bff, #0056b3);
                border: 2px solid white; box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                position: relative;
            }
            .user-dot-fast::after {
                content: ''; position: absolute; top: -3px; left: -3px; right: -3px; bottom: -3px;
                border-radius: 50%; border: 2px solid #007bff; opacity: 0.3;
                animation: userPulseFast 2s infinite;
            }
            @keyframes userPulseFast {
                0% { transform: scale(1); opacity: 0.7; }
                50% { opacity: 0.2; }
                100% { transform: scale(1.8); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
    }
    
    // –°–£–ü–ï–†–°–ö–û–†–û–°–¢–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –¢–û–ß–ï–ö
    function loadPointsFast() {
        return new Promise((resolve) => {
            console.log('üìç Fast points loading');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cached = cache.get('points');
            if (cached) {
                updateMapFast(cached);
                updateStatsFast(cached);
                
                if (window.AppLoader?.onPointsLoaded) {
                    window.AppLoader.onPointsLoaded();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ
                setTimeout(() => fetchPointsFast(false), 100);
                resolve();
                return;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
            fetchPointsFast(true).then(resolve);
        });
    }
    
    // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô FETCH
    function fetchPointsFast(notifyLoader = true) {
        return new Promise((resolve) => {
            console.log('üåê Fetching points with optimization');
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 —Å–µ–∫—É–Ω–¥
            
            fetch('/api/points', {
                method: 'GET',
                headers: { 
                    'Accept': 'application/json',
                    'Cache-Control': 'max-age=120' // –ö—ç—à –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
                },
                signal: controller.signal
            })
            .then(response => {
                clearTimeout(timeoutId);
                console.log('üì° Server response:', response.status, response.headers.get('X-Cache') || 'NO-CACHE');
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                return response.json();
            })
            .then(points => {
                console.log('‚úÖ Loaded', points.length, 'points with optimization');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                cache.set('points', points);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                updateMapFast(points);
                updateStatsFast(points);
                
                if (notifyLoader && window.AppLoader?.onPointsLoaded) {
                    window.AppLoader.onPointsLoaded();
                }
                
                resolve();
            })
            .catch(error => {
                clearTimeout(timeoutId);
                console.error('‚ùå Points loading error:', error.message);
                
                // Fallback –∫ –∫—ç—à—É
                const cachedPoints = cache.get('points');
                if (cachedPoints) {
                    console.log('üì¶ Using cached fallback');
                    updateMapFast(cachedPoints);
                    updateStatsFast(cachedPoints);
                }
                
                if (notifyLoader && window.AppLoader?.onPointsLoaded) {
                    window.AppLoader.onPointsLoaded();
                }
                
                resolve();
            });
        });
    }
    
    // –°–£–ü–ï–†–ë–´–°–¢–†–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–†–¢–´
    function updateMapFast(points) {
        if (!map || !points || !Array.isArray(points)) {
            console.warn('‚ö†Ô∏è Map or points not ready for fast update');
            return;
        }
        
        console.log('üó∫Ô∏è Fast map update with', points.length, 'points');
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–∏–Ω–≥ –¥–ª—è DOM –æ–ø–µ—Ä–∞—Ü–∏–π
            domBatcher.add(() => {
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
                clearMarkersFast();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã –ø–∞–∫–µ—Ç–∞–º–∏
                const batchSize = 10;
                let processed = 0;
                
                const processBatch = () => {
                    const batch = points.slice(processed, processed + batchSize);
                    
                    batch.forEach(point => {
                        try {
                            addMarkerFast(point);
                        } catch (error) {
                            console.warn('‚ö†Ô∏è Marker error:', error, point.id);
                        }
                    });
                    
                    processed += batchSize;
                    
                    if (processed < points.length) {
                        // –°–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á –≤ —Å–ª–µ–¥—É—é—â–µ–º frame
                        requestAnimationFrame(processBatch);
                    } else {
                        console.log('‚úÖ Added', markers.length, 'markers efficiently');
                    }
                };
                
                processBatch();
            });
            
        } catch (error) {
            console.error('‚ùå Fast map update error:', error);
        }
    }
    
    // –≠–§–§–ï–ö–¢–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ú–ê–†–ö–ï–†–û–í
    function clearMarkersFast() {
        markers.forEach(marker => {
            if (map.hasLayer(marker)) {
                map.removeLayer(marker);
            }
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ä–∫–µ—Ä –≤ –ø—É–ª –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            markersPool.push(marker);
        });
        markers.length = 0; // –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞
    }
    
    // –ë–´–°–¢–†–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ê–†–ö–ï–†–ê
    function addMarkerFast(point) {
        const isAvailable = point.status === 'available';
        
        // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ä–∫–µ—Ä –∏–∑ –ø—É–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        let marker = markersPool.pop();
        
        if (!marker) {
            const icon = L.divIcon({
                className: 'marker-fast',
                html: `<div class="marker-dot-fast ${isAvailable ? 'available' : 'collected'}"></div>`,
                iconSize: [18, 18],
                iconAnchor: [9, 9]
            });
            
            marker = L.marker([point.coordinates.lat, point.coordinates.lng], { icon });
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä
            marker.setLatLng([point.coordinates.lat, point.coordinates.lng]);
            const iconEl = marker.getElement()?.querySelector('.marker-dot-fast');
            if (iconEl) {
                iconEl.className = `marker-dot-fast ${isAvailable ? 'available' : 'collected'}`;
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º popup —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        const popupContent = createPopupContentFast(point, isAvailable);
        marker.bindPopup(popupContent, {
            maxWidth: 280,
            closeButton: true,
            autoPan: true,
            keepInView: true
        });
        
        marker.addTo(map);
        markers.push(marker);
    }
    
    // –ë–´–°–¢–†–û–ï –°–û–ó–î–ê–ù–ò–ï POPUP –ö–û–ù–¢–ï–ù–¢–ê
    function createPopupContentFast(point, isAvailable) {
        let html = `<div class="popup-content-fast">
            <h3>${escapeHtml(point.name)}</h3>
            <p class="status-fast ${isAvailable ? 'available' : 'collected'}">
                ${isAvailable ? 'üü¢ Available for collection' : 'üî¥ Already collected'}
            </p>`;
        
        if (!isAvailable && point.collectorInfo) {
            html += '<div class="collector-info-fast">';
            html += '<h4>Collector information:</h4>';
            
            // Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (point.collectorInfo.authMethod === 'telegram' && point.collectorInfo.telegramData) {
                const tgData = point.collectorInfo.telegramData;
                
                html += '<div class="telegram-user-info-fast">';
                
                if (tgData.photo_url) {
                    html += `<img src="${tgData.photo_url}" alt="Avatar" class="telegram-avatar-fast" 
                              onerror="this.style.display='none';">`;
                }
                
                const fullName = [tgData.first_name, tgData.last_name].filter(Boolean).join(' ');
                html += `<div class="telegram-name-fast">${escapeHtml(fullName)}</div>`;
                
                if (tgData.username) {
                    html += `<a href="https://t.me/${tgData.username}" target="_blank" class="telegram-username-fast">
                              <span>‚úàÔ∏è</span> @${escapeHtml(tgData.username)}
                            </a>`;
                }
                
                html += '</div>';
                
                if (point.collectorInfo.signature) {
                    html += `<div class="collector-detail-fast">
                              <strong>Message:</strong> ${escapeHtml(point.collectorInfo.signature)}
                            </div>`;
                }
            } else {
                // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                html += `<div class="collector-detail-fast">
                          <span class="collector-name-fast">${escapeHtml(point.collectorInfo.name)}</span>
                        </div>`;
                
                if (point.collectorInfo.signature) {
                    html += `<div class="collector-detail-fast">
                              <strong>Message:</strong> ${escapeHtml(point.collectorInfo.signature)}
                            </div>`;
                }
            }
            
            html += `<div class="collector-detail-fast">
                      <strong>Collection time:</strong> ${new Date(point.collectedAt).toLocaleString('en-US')}
                    </div>`;
            
            // –°–µ–ª—Ñ–∏ —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
            if (point.collectorInfo.selfie) {
                html += `<div class="selfie-container-fast">
                          <img data-src="${point.collectorInfo.selfie}" 
                               class="selfie-fast lazy-load" 
                               onclick="showFullImageFast('${point.collectorInfo.selfie}', '${escapeHtml(point.name)}')"
                               alt="Selfie" title="Click to enlarge">
                        </div>`;
            }
            
            html += '</div>';
        }
        
        html += '</div>';
        return html;
    }
    
    // –ë–´–°–¢–†–û–ï –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–ï HTML
    function escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    // –õ–ï–ù–ò–í–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
    function setupLazyLoading() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    if (img.dataset.src) {
                        img.src = img.dataset.src;
                        img.classList.remove('lazy-load');
                        observer.unobserve(img);
                    }
                }
            });
        }, { threshold: 0.1 });
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –Ω–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        const checkForImages = () => {
            document.querySelectorAll('img.lazy-load').forEach(img => {
                observer.observe(img);
            });
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ popup'–æ–≤
        map?.on('popupopen', () => {
            setTimeout(checkForImages, 100);
        });
    }
    
    // –ë–´–°–¢–†–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    const updateStatsFast = throttle((points) => {
        if (!points || !Array.isArray(points)) return;
        
        const available = points.filter(p => p.status === 'available').length;
        const collected = points.filter(p => p.status === 'collected').length;
        
        domBatcher.add(() => {
            const availableEl = document.getElementById('availableCount');
            const collectedEl = document.getElementById('collectedCount');
            
            if (availableEl) animateNumberFast(availableEl, available);
            if (collectedEl) animateNumberFast(collectedEl, collected);
        });
        
        console.log('üìä Fast stats: Available:', available, 'Collected:', collected);
    }, 500);
    
    // –ë–´–°–¢–†–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø –ß–ò–°–ï–õ
    function animateNumberFast(element, targetValue) {
        const currentValue = parseInt(element.textContent) || 0;
        if (currentValue === targetValue) return;
        
        const diff = targetValue - currentValue;
        const duration = Math.min(300, Math.abs(diff) * 30); // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        const steps = Math.min(10, Math.abs(diff)); // –ú–µ–Ω—å—à–µ —à–∞–≥–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        if (steps === 0) {
            element.textContent = targetValue;
            return;
        }
        
        const stepValue = diff / steps;
        const stepDuration = duration / steps;
        
        let current = currentValue;
        let step = 0;
        
        const timer = setInterval(() => {
            step++;
            current += stepValue;
            
            if (step >= steps) {
                element.textContent = targetValue;
                clearInterval(timer);
            } else {
                element.textContent = Math.round(current);
            }
        }, stepDuration);
    }
    
    // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø
    const getCurrentLocationFast = debounce(function() {
        const btn = document.querySelector('.location-btn');
        if (!navigator.geolocation || !map) {
            console.warn('‚ö†Ô∏è Geolocation unavailable');
            return;
        }
        
        const originalText = btn.innerHTML;
        btn.innerHTML = '‚è≥ Locating...';
        btn.disabled = true;
        
        const options = {
            enableHighAccuracy: true,
            timeout: 8000, // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 10 —Å–µ–∫—É–Ω–¥
            maximumAge: 120000 // 2 –º–∏–Ω—É—Ç—ã –∫—ç—à
        };
        
        navigator.geolocation.getCurrentPosition(
            function(position) {
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (window.userMarkerFast && map.hasLayer(window.userMarkerFast)) {
                    map.removeLayer(window.userMarkerFast);
                }
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userIcon = L.divIcon({
                    className: 'user-marker-fast',
                    html: '<div class="user-dot-fast"></div>',
                    iconSize: [20, 20],
                    iconAnchor: [10, 10]
                });
                
                window.userMarkerFast = L.marker([lat, lng], { icon: userIcon }).addTo(map);
                
                // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
                map.flyTo([lat, lng], 16, {
                    duration: 1.0 // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 1.5 —Å–µ–∫—É–Ω–¥
                });
                
                console.log('‚úÖ Location found fast');
                
                btn.innerHTML = originalText;
                btn.disabled = false;
            },
            function(error) {
                console.error('‚ùå Geolocation error:', error);
                btn.innerHTML = originalText;
                btn.disabled = false;
            },
            options
        );
    }, 1000);
    
    // –ë–´–°–¢–†–û–ï –ü–û–ö–ê–ó –ü–û–õ–ù–û–ì–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
    window.showFullImageFast = function(imageSrc, title) {
        const modal = document.createElement('div');
        modal.className = 'image-modal-fast';
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(0,0,0,0.8); z-index: 3000; display: flex;
            align-items: center; justify-content: center; cursor: pointer;
            animation: fadeInFast 0.2s ease-out;
        `;
        
        modal.innerHTML = `
            <div style="
                max-width: 90%; max-height: 90%; background: white;
                border-radius: 12px; overflow: hidden; cursor: default;
                animation: scaleInFast 0.2s ease-out;
            " onclick="event.stopPropagation()">
                <div style="padding: 15px; background: #f8f9fa; text-align: center; font-weight: 600;">
                    ${escapeHtml(title)}
                </div>
                <img src="${imageSrc}" style="max-width: 100%; max-height: 70vh; display: block;">
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!document.getElementById('modal-animations')) {
            const style = document.createElement('style');
            style.id = 'modal-animations';
            style.textContent = `
                @keyframes fadeInFast { from { opacity: 0; } to { opacity: 1; } }
                @keyframes scaleInFast { from { transform: scale(0.8); opacity: 0; } to { transform: scale(1); opacity: 1; } }
            `;
            document.head.appendChild(style);
        }
        
        modal.onclick = () => {
            modal.style.animation = 'fadeInFast 0.2s ease-out reverse';
            setTimeout(() => modal.remove(), 200);
        };
        
        document.body.appendChild(modal);
    };
    
    // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–ó–ú–ï–†–ê –û–ö–ù–ê
    const handleResizeFast = throttle(() => {
        if (map) {
            map.invalidateSize();
        }
    }, 250);
    
    // –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
    window.getCurrentLocation = getCurrentLocationFast;
    
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    window.addEventListener('resize', handleResizeFast);
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (window.DeviceOrientationEvent) {
        window.addEventListener('orientationchange', () => {
            setTimeout(handleResizeFast, 500);
        });
    }
    
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –°–¢–ê–†–¢–ï
    async function startApp() {
        try {
            console.log('üöÄ Starting optimized PlasticBoy app');
            
            // –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await initFast();
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Leaflet
            if (window.AppLoader?.onLeafletReady) {
                window.AppLoader.onLeafletReady();
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏
            await loadPointsFast();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
            setupLazyLoading();
            
            console.log('üéâ PlasticBoy app optimized and ready');
            
        } catch (error) {
            console.error('‚ùå App initialization error:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const container = document.querySelector('.container');
            if (container) {
                const errorDiv = document.createElement('div');
                errorDiv.style.cssText = `
                    background: rgba(244, 67, 54, 0.1); border: 1px solid #f44336;
                    border-radius: 12px; padding: 20px; margin: 20px 0;
                    text-align: center; color: #f44336; font-weight: 600;
                `;
                errorDiv.innerHTML = `
                    <h3>‚ùå Loading error</h3>
                    <p>Failed to load the application. Please refresh the page.</p>
                    <button onclick="window.location.reload()" style="
                        background: #f44336; color: white; border: none;
                        padding: 10px 20px; border-radius: 6px; cursor: pointer; margin-top: 10px;
                    ">Refresh page</button>
                `;
                container.appendChild(errorDiv);
            }
        }
    }
    
    // –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', startApp);
    } else {
        startApp();
    }
    
    console.log('üöÄ PlasticBoy optimized script loaded');
    
    // –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    window.PlasticBoyDebug = {
        cache: cache,
        markers: markers,
        map: map,
        clearCache: () => cache.clear(),
        getStats: () => ({
            markersCount: markers.length,
            cacheSize: cache.getSize(),
            mapReady: isInitialized
        })
    };
    
})();
