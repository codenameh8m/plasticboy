// –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –≤–µ—Ä—Å–∏—è script.js –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
let map;
let markers = [];
let markersLayer;

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
const ALMATY_CENTER = [43.2220, 76.8512];

// –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isAppInitialized = false;
let pointsCache = null;

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function debugLog(message, data = null) {
    console.log(`üîç [DEBUG] ${message}`, data || '');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function validateCoordinates(lat, lng) {
    const isValidLat = typeof lat === 'number' && lat >= -90 && lat <= 90;
    const isValidLng = typeof lng === 'number' && lng >= -180 && lng <= 180;
    return isValidLat && isValidLng;
}

document.addEventListener('DOMContentLoaded', function() {
    debugLog('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    initControlButtons();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ —Å—Ä–∞–∑—É
    addDebugMarkerStyles();
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function addDebugMarkerStyles() {
    const style = document.createElement('style');
    style.id = 'debug-marker-styles';
    style.textContent = `
        .debug-marker {
            background: none !important;
            border: none !important;
        }
        
        .debug-dot {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 3px 8px rgba(0,0,0,0.4);
            cursor: pointer;
            transition: transform 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            color: white;
        }
        
        .debug-dot:hover {
            transform: scale(1.2);
        }
        
        .debug-dot.available {
            background: #4CAF50;
        }
        
        .debug-dot.collected {
            background: #f44336;
        }
        
        .debug-popup {
            min-width: 200px;
            font-family: system-ui, sans-serif;
        }
        
        .debug-popup h3 {
            margin: 0 0 10px 0;
            color: #333;
            font-size: 1rem;
        }
        
        .debug-status {
            margin: 8px 0;
            font-weight: 600;
        }
        
        .debug-status.available { color: #4CAF50; }
        .debug-status.collected { color: #f44336; }
        
        /* –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ */
        .test-marker {
            width: 30px !important;
            height: 30px !important;
            background: red !important;
            border: 3px solid yellow !important;
            border-radius: 50% !important;
        }
    `;
    document.head.appendChild(style);
    debugLog('–°—Ç–∏–ª–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    if (isAppInitialized) {
        debugLog('–ö–∞—Ä—Ç–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return;
    }
    
    debugLog('–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Ä—Ç—ã');
    
    try {
        map = L.map('map', {
            zoomControl: true,
            attributionControl: true,
            preferCanvas: false, // –ò—Å–ø–æ–ª—å–∑—É–µ–º SVG –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            maxZoom: 18
        }).setView(ALMATY_CENTER, 13);
        
        debugLog('–ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª—ã');
        
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors',
            maxZoom: 18
        }).addTo(map);
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –º–∞—Ä–∫–µ—Ä–æ–≤
        markersLayer = L.layerGroup().addTo(map);
        debugLog('–ì—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∞');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        addTestMarker();
        
        setTimeout(() => {
            if (map) {
                map.invalidateSize();
                window.map = map;
                debugLog('–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞, —Ä–∞–∑–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏
                loadPointsWithDebug();
            }
        }, 100);
        
        isAppInitialized = true;
        debugLog('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        debugLog('–û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
function addTestMarker() {
    try {
        const testIcon = L.divIcon({
            className: 'test-marker',
            html: '<div style="width: 30px; height: 30px; background: red; border: 3px solid yellow; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold;">T</div>',
            iconSize: [30, 30],
            iconAnchor: [15, 15]
        });
        
        const testMarker = L.marker(ALMATY_CENTER, { icon: testIcon })
            .addTo(map)
            .bindPopup('üß™ –¢–ï–°–¢–û–í–´–ô –ú–ê–†–ö–ï–† - –µ—Å–ª–∏ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ, –∫–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
            
        debugLog('–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', ALMATY_CENTER);
        
        // –£–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            map.removeLayer(testMarker);
            debugLog('–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä —É–¥–∞–ª–µ–Ω');
        }, 10000);
        
    } catch (error) {
        debugLog('–û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ —Å –æ—Ç–ª–∞–¥–∫–æ–π
async function loadPointsWithDebug() {
    debugLog('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ—á–µ–∫');
    
    try {
        const response = await fetch('/api/points', {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });
        
        debugLog('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω:', {
            status: response.status,
            statusText: response.statusText,
            ok: response.ok
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const points = await response.json();
        debugLog('–î–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –ø–æ–ª—É—á–µ–Ω—ã:', {
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: points.length,
            –¥–∞–Ω–Ω—ã–µ: points
        });
        
        if (!Array.isArray(points)) {
            throw new Error('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
        }
        
        pointsCache = points;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await updateMapWithDebug(points);
        updateStatsWithDebug(points);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏
        if (typeof window.PlasticBoyLoader !== 'undefined') {
            window.PlasticBoyLoader.onPointsLoaded();
        }
        
        debugLog('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        debugLog('–û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ—á–µ–∫:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        showDebugNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫: ' + error.message, 'error');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        createTestPoints();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function createTestPoints() {
    debugLog('–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
    
    const testPoints = [
        {
            id: 'test1',
            name: '–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ 1',
            coordinates: { lat: 43.2220, lng: 76.8512 },
            status: 'available'
        },
        {
            id: 'test2',
            name: '–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ 2',
            coordinates: { lat: 43.2250, lng: 76.8550 },
            status: 'collected',
            collectorInfo: {
                name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                signature: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            },
            collectedAt: new Date().toISOString()
        }
    ];
    
    updateMapWithDebug(testPoints);
    updateStatsWithDebug(testPoints);
    
    debugLog('–¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –æ—Ç–ª–∞–¥–∫–æ–π
async function updateMapWithDebug(points) {
    if (!map || !markersLayer) {
        debugLog('–û–®–ò–ë–ö–ê: –∫–∞—Ä—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ –≥–æ—Ç–æ–≤—ã');
        return;
    }
    
    debugLog('–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å —Ç–æ—á–∫–∞–º–∏:', points.length);
    
    try {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
        markersLayer.clearLayers();
        markers.length = 0;
        debugLog('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã');
        
        if (points.length === 0) {
            debugLog('–ù–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return;
        }
        
        let successCount = 0;
        let errorCount = 0;
        
        points.forEach((point, index) => {
            try {
                debugLog(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫—É ${index + 1}:`, point);
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–∫–∏
                if (!point.coordinates) {
                    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
                }
                
                const lat = parseFloat(point.coordinates.lat);
                const lng = parseFloat(point.coordinates.lng);
                
                if (!validateCoordinates(lat, lng)) {
                    throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat=${lat}, lng=${lng}`);
                }
                
                const isAvailable = point.status === 'available';
                debugLog(`–¢–æ—á–∫–∞ ${point.name}: —Å—Ç–∞—Ç—É—Å=${point.status}, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã=[${lat}, ${lng}]`);
                
                // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É
                const icon = L.divIcon({
                    className: 'debug-marker',
                    html: `<div class="debug-dot ${isAvailable ? 'available' : 'collected'}">${isAvailable ? '‚óè' : '‚úì'}</div>`,
                    iconSize: [20, 20],
                    iconAnchor: [10, 10]
                });
                
                // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
                const marker = L.marker([lat, lng], { icon });
                
                // –°–æ–∑–¥–∞–µ–º popup
                let popupContent = `
                    <div class="debug-popup">
                        <h3>${point.name}</h3>
                        <p class="debug-status ${point.status}">
                            ${isAvailable ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞' : 'üî¥ –°–æ–±—Ä–∞–Ω–∞'}
                        </p>
                        <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>
                `;
                
                if (!isAvailable && point.collectorInfo) {
                    popupContent += `
                        <div style="background: #f8f9fa; padding: 8px; border-radius: 6px; margin: 8px 0;">
                            <p><strong>–°–æ–±—Ä–∞–ª:</strong> ${point.collectorInfo.name}</p>
                            ${point.collectorInfo.signature ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${point.collectorInfo.signature}</p>` : ''}
                            <p><strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
                        </div>
                    `;
                }
                
                popupContent += '</div>';
                
                marker.bindPopup(popupContent);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
                markersLayer.addLayer(marker);
                markers.push(marker);
                successCount++;
                
                debugLog(`‚úÖ –ú–∞—Ä–∫–µ—Ä ${index + 1} –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                
            } catch (error) {
                errorCount++;
                debugLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞ ${index + 1}:`, error);
            }
        });
        
        debugLog(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —É—Å–ø–µ—à–Ω–æ=${successCount}, –æ—à–∏–±–æ–∫=${errorCount}`);
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
        window.markers = markers;
        
        if (successCount > 0) {
            showDebugNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${successCount} –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É`, 'success');
        }
        
    } catch (error) {
        debugLog('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', error);
        showDebugNotification('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –æ—Ç–ª–∞–¥–∫–æ–π
function updateStatsWithDebug(points) {
    debugLog('–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    
    try {
        const available = points.filter(p => p.status === 'available').length;
        const collected = points.filter(p => p.status === 'collected').length;
        
        debugLog('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', { available, collected });
        
        const availableElement = document.getElementById('availableCount');
        const collectedElement = document.getElementById('collectedCount');
        
        if (availableElement) {
            availableElement.textContent = available;
            debugLog('–≠–ª–µ–º–µ–Ω—Ç availableCount –æ–±–Ω–æ–≤–ª–µ–Ω');
        } else {
            debugLog('–û–®–ò–ë–ö–ê: —ç–ª–µ–º–µ–Ω—Ç availableCount –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if (collectedElement) {
            collectedElement.textContent = collected;
            debugLog('–≠–ª–µ–º–µ–Ω—Ç collectedCount –æ–±–Ω–æ–≤–ª–µ–Ω');
        } else {
            debugLog('–û–®–ò–ë–ö–ê: —ç–ª–µ–º–µ–Ω—Ç collectedCount –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
    } catch (error) {
        debugLog('–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –ë—ã—Å—Ç—Ä–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
function getCurrentLocation() {
    debugLog('–ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
    
    const locationBtn = document.querySelector('.location-btn');
    
    if (!navigator.geolocation) {
        debugLog('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        showDebugNotification('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
        return;
    }
    
    const originalText = locationBtn.innerHTML;
    locationBtn.innerHTML = 'üîç –ü–æ–∏—Å–∫...';
    locationBtn.disabled = true;
    
    navigator.geolocation.getCurrentPosition(
        function(position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            debugLog('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:', { lat, lng });
            
            const userIcon = L.divIcon({
                className: 'debug-user-marker',
                html: `<div style="
                    background: linear-gradient(45deg, #007bff, #0056b3);
                    width: 24px; 
                    height: 24px; 
                    border-radius: 50%; 
                    border: 3px solid white; 
                    box-shadow: 0 3px 10px rgba(0,0,0,0.4);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-weight: bold;
                    font-size: 12px;
                ">üë§</div>`,
                iconSize: [24, 24],
                iconAnchor: [12, 12]
            });
            
            if (window.userMarker) {
                map.removeLayer(window.userMarker);
            }
            
            window.userMarker = L.marker([lat, lng], { icon: userIcon })
                .addTo(map)
                .bindPopup(`
                    <div style="text-align: center;">
                        <strong>üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong><br>
                        <small>${lat.toFixed(6)}, ${lng.toFixed(6)}</small>
                    </div>
                `);
            
            map.setView([lat, lng], 16);
            showDebugNotification('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!', 'success');
            
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
        },
        function(error) {
            debugLog('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            showDebugNotification('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏', 'error');
            
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
        },
        {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 300000
        }
    );
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
function initControlButtons() {
    const locationBtn = document.querySelector('.location-btn');
    if (locationBtn) {
        debugLog('–ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    } else {
        debugLog('–û–®–ò–ë–ö–ê: –∫–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
}

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showDebugNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `debug-notification ${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 2000;
        background: white;
        border: 2px solid ${type === 'error' ? '#f44336' : type === 'success' ? '#4CAF50' : '#2196F3'};
        border-radius: 8px;
        padding: 12px 16px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.2);
        max-width: 300px;
        font-size: 14px;
        font-weight: 500;
    `;
    
    const icons = {
        error: '‚ùå',
        success: '‚úÖ',
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è'
    };
    
    notification.innerHTML = `${icons[type]} ${message}`;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
    
    debugLog(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ: ${message}`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
window.addEventListener('resize', function() {
    if (map) {
        debugLog('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É');
        map.invalidateSize();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
document.addEventListener('keydown', function(event) {
    if (event.ctrlKey && event.key === 'l') {
        event.preventDefault();
        getCurrentLocation();
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
    if (event.ctrlKey && event.key === 'd') {
        event.preventDefault();
        debugLog('=== –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===');
        debugLog('–ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', isAppInitialized);
        debugLog('–û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã:', map);
        debugLog('–ì—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤:', markersLayer);
        debugLog('–ú–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤:', markers);
        debugLog('–ö—ç—à —Ç–æ—á–µ–∫:', pointsCache);
        debugLog('===================================');
    }
    
    if (event.ctrlKey && event.key === 't') {
        event.preventDefault();
        createTestPoints();
    }
    
    if (event.ctrlKey && event.key === 'r') {
        event.preventDefault();
        loadPointsWithDebug();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.PlasticBoy = {
    map,
    markers,
    markersLayer,
    loadPoints: loadPointsWithDebug,
    showDebugNotification,
    getCurrentLocation,
    initMap,
    debugLog,
    createTestPoints
};

// –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.showNotification = showDebugNotification;
window.updateMap = updateMapWithDebug;
window.updateStats = updateStatsWithDebug;
window.loadPoints = loadPointsWithDebug;

debugLog('–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
debugLog('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+D –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, Ctrl+T –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫, Ctrl+R –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
