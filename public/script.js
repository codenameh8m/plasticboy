// –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô SCRIPT.JS –¥–ª—è PlasticBoy
// –£–ø—Ä–æ—â–µ–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã

let map;
let markers = [];

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
const ALMATY_CENTER = [43.2220, 76.8512];

// –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isAppInitialized = false;

// –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
const Cache = {
    key: 'plasticboy_points_v2',
    ttl: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    
    save(data) {
        try {
            const item = {
                data: data,
                timestamp: Date.now(),
                version: '2.0'
            };
            localStorage.setItem(this.key, JSON.stringify(item));
            console.log(`üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ ${data.length} —Ç–æ—á–µ–∫`);
        } catch (e) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à:', e);
        }
    },
    
    load() {
        try {
            const item = localStorage.getItem(this.key);
            if (!item) return null;
            
            const parsed = JSON.parse(item);
            const age = Date.now() - parsed.timestamp;
            
            if (age > this.ttl) {
                console.log('‚è∞ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª');
                return null;
            }
            
            console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${parsed.data.length} —Ç–æ—á–µ–∫ –∏–∑ –∫—ç—à–∞`);
            return parsed.data;
        } catch (e) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞:', e);
            return null;
        }
    },
    
    clear() {
        localStorage.removeItem(this.key);
        console.log('üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω');
    }
};

// –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM –∏ Leaflet
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Leaflet
    if (typeof L !== 'undefined') {
        if (window.AppLoader) window.AppLoader.onLeafletReady();
        initApp();
    } else {
        // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Leaflet
        const checkLeaflet = setInterval(() => {
            if (typeof L !== 'undefined') {
                clearInterval(checkLeaflet);
                if (window.AppLoader) window.AppLoader.onLeafletReady();
                initApp();
            }
        }, 100);
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    setTimeout(() => {
        try {
            initMap();
            if (window.AppLoader) window.AppLoader.onMapReady();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏
            setTimeout(() => {
                loadPoints();
            }, 500);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(initApp, 2000);
        }
    }, 300);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    if (isAppInitialized) return;
    
    console.log('üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã');
    
    const mapElement = document.getElementById('map');
    if (!mapElement) {
        throw new Error('–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    map = L.map('map', {
        center: ALMATY_CENTER,
        zoom: 13,
        zoomControl: true,
        attributionControl: true
    });
    
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors',
        maxZoom: 18
    }).addTo(map);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    addMapStyles();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
    setTimeout(() => {
        if (map) {
            map.invalidateSize();
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞');
        }
    }, 200);
    
    isAppInitialized = true;
}

// –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
function addMapStyles() {
    if (document.getElementById('map-styles')) return;
    
    const style = document.createElement('style');
    style.id = 'map-styles';
    style.textContent = `
        .leaflet-tile-pane {
            filter: grayscale(100%) contrast(1.1) brightness(1.05);
        }
        
        .leaflet-marker-pane, .leaflet-popup-pane, .leaflet-control-container {
            filter: none;
        }
        
        .custom-marker {
            background: none !important;
            border: none !important;
        }
        
        .marker-dot {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 2px solid white;
            box-shadow: 0 3px 8px rgba(0,0,0,0.3);
            transition: transform 0.2s ease;
            cursor: pointer;
        }
        
        .marker-dot:hover {
            transform: scale(1.2);
        }
        
        .marker-dot.available {
            background: linear-gradient(45deg, #4CAF50, #45a049);
        }
        
        .marker-dot.collected {
            background: linear-gradient(45deg, #f44336, #e53935);
        }
        
        .user-marker {
            background: none !important;
            border: none !important;
        }
        
        .user-dot {
            width: 22px;
            height: 22px;
            border-radius: 50%;
            background: linear-gradient(45deg, #007bff, #0056b3);
            border: 2px solid white;
            box-shadow: 0 3px 10px rgba(0,0,0,0.3);
        }
    `;
    document.head.appendChild(style);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫
async function loadPoints() {
    console.log('üìç –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedPoints = Cache.load();
    if (cachedPoints) {
        updateMap(cachedPoints);
        updateStats(cachedPoints);
        if (window.AppLoader) {
            window.AppLoader.onPointsLoaded();
            window.AppLoader.updateLoader();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ
        setTimeout(() => fetchPointsFromServer(), 1000);
        return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    await fetchPointsFromServer();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function fetchPointsFromServer() {
    try {
        const response = await fetch('/api/points', {
            headers: { 'Accept': 'application/json' }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const points = await response.json();
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${points.length} —Ç–æ—á–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        Cache.save(points);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateMap(points);
        updateStats(points);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏
        if (window.AppLoader) {
            window.AppLoader.onPointsLoaded();
            window.AppLoader.updateLoader();
        }
        
        return points;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫:', error);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (window.AppLoader) {
            window.AppLoader.onPointsLoaded();
            window.AppLoader.updateLoader();
        }
        
        throw error;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
function updateMap(points) {
    if (!map || !points) return;
    
    console.log(`üó∫Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã: ${points.length} —Ç–æ—á–µ–∫`);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    markers.forEach(marker => map.removeLayer(marker));
    markers = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    points.forEach(point => {
        try {
            const isAvailable = point.status === 'available';
            
            const icon = L.divIcon({
                className: 'custom-marker',
                html: `<div class="marker-dot ${isAvailable ? 'available' : 'collected'}"></div>`,
                iconSize: [20, 20],
                iconAnchor: [10, 10]
            });
            
            const marker = L.marker([point.coordinates.lat, point.coordinates.lng], { icon });
            
            // Popup
            let popupContent = `
                <div style="min-width: 200px; font-family: Arial, sans-serif;">
                    <h3 style="margin: 0 0 10px 0; color: #333;">${point.name}</h3>
                    <p style="margin: 5px 0; font-weight: 600; color: ${isAvailable ? '#4CAF50' : '#f44336'};">
                        ${isAvailable ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞' : 'üî¥ –°–æ–±—Ä–∞–Ω–∞'}
                    </p>
            `;
            
            if (!isAvailable && point.collectorInfo) {
                popupContent += `
                    <div style="background: #f8f9fa; padding: 8px; border-radius: 6px; margin: 8px 0; font-size: 0.9rem;">
                        <p style="margin: 4px 0;"><strong>–°–æ–±—Ä–∞–ª:</strong> ${point.collectorInfo.name}</p>
                        ${point.collectorInfo.signature ? `<p style="margin: 4px 0;"><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${point.collectorInfo.signature}</p>` : ''}
                        <p style="margin: 4px 0;"><strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
                    </div>
                    <button onclick="showPointDetails('${point.id}')" style="
                        background: linear-gradient(45deg, #667eea, #764ba2);
                        color: white; border: none; padding: 8px 12px;
                        border-radius: 6px; cursor: pointer; width: 100%; margin-top: 8px;
                    ">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                `;
            }
            
            popupContent += '</div>';
            
            marker.bindPopup(popupContent);
            marker.addTo(map);
            markers.push(marker);
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞:', error);
        }
    });
    
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${markers.length} –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats(points) {
    const available = points.filter(p => p.status === 'available').length;
    const collected = points.filter(p => p.status === 'collected').length;
    
    const availableEl = document.getElementById('availableCount');
    const collectedEl = document.getElementById('collectedCount');
    
    if (availableEl) availableEl.textContent = available;
    if (collectedEl) collectedEl.textContent = collected;
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${available} –¥–æ—Å—Ç—É–ø–Ω–æ, ${collected} —Å–æ–±—Ä–∞–Ω–æ`);
}

// –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
function getCurrentLocation() {
    const btn = document.querySelector('.location-btn');
    if (!navigator.geolocation || !map) {
        console.warn('‚ö†Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        return;
    }
    
    const originalText = btn.innerHTML;
    btn.innerHTML = '‚è≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...';
    btn.disabled = true;
    
    navigator.geolocation.getCurrentPosition(
        function(position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä
            if (window.userMarker) {
                map.removeLayer(window.userMarker);
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
            const userIcon = L.divIcon({
                className: 'user-marker',
                html: '<div class="user-dot"></div>',
                iconSize: [22, 22],
                iconAnchor: [11, 11]
            });
            
            window.userMarker = L.marker([lat, lng], { icon: userIcon })
                .addTo(map)
                .bindPopup(`
                    <div style="text-align: center;">
                        <strong>üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong><br>
                        <small>${lat.toFixed(4)}, ${lng.toFixed(4)}</small>
                    </div>
                `);
            
            map.flyTo([lat, lng], 16);
            console.log('‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ');
            
            btn.innerHTML = originalText;
            btn.disabled = false;
        },
        function(error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            btn.innerHTML = originalText;
            btn.disabled = false;
        }
    );
}

// –î–µ—Ç–∞–ª–∏ —Ç–æ—á–∫–∏
async function showPointDetails(pointId) {
    try {
        const response = await fetch(`/api/point/${pointId}/info`);
        const point = await response.json();
        
        let content = `
            <h3 style="color: #667eea;">${point.name}</h3>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${point.status === 'collected' ? 'üî¥ –°–æ–±—Ä–∞–Ω–∞' : 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞'}</p>
            <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${point.coordinates.lat.toFixed(4)}, ${point.coordinates.lng.toFixed(4)}</p>
        `;
        
        if (point.status === 'collected' && point.collectorInfo) {
            content += `
                <hr>
                <h4>–°–±–æ—Ä—â–∏–∫:</h4>
                <p><strong>–ò–º—è:</strong> ${point.collectorInfo.name}</p>
                ${point.collectorInfo.signature ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> "${point.collectorInfo.signature}"</p>` : ''}
                <p><strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
            `;
            
            if (point.collectorInfo.selfie) {
                content += `
                    <div style="text-align: center; margin-top: 15px;">
                        <img src="${point.collectorInfo.selfie}" 
                             style="max-width: 100%; max-height: 200px; border-radius: 8px;"
                             alt="–°–µ–ª—Ñ–∏">
                    </div>
                `;
            }
        }
        
        document.getElementById('modalTitle').innerHTML = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏';
        document.getElementById('modalBody').innerHTML = content;
        document.getElementById('infoModal').style.display = 'block';
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π:', error);
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    document.getElementById('infoModal').style.display = 'none';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
window.addEventListener('click', function(e) {
    if (e.target === document.getElementById('infoModal')) {
        closeModal();
    }
});

window.addEventListener('resize', function() {
    if (map) {
        setTimeout(() => map.invalidateSize(), 100);
    }
});

document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') closeModal();
    if (e.ctrlKey && e.key === 'l') {
        e.preventDefault();
        getCurrentLocation();
    }
});

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
setInterval(() => {
    if (map && markers.length > 0) {
        fetchPointsFromServer().catch(() => {});
    }
}, 30000);

console.log('üöÄ PlasticBoy script –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

// –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PlasticBoy');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
    initControlButtons();
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Leaflet
    waitForLeaflet();
});

// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Leaflet
function waitForLeaflet() {
    if (typeof L !== 'undefined') {
        console.log('‚úÖ Leaflet –∑–∞–≥—Ä—É–∂–µ–Ω');
        setTimeout(initMap, 100);
    } else {
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Leaflet...');
        setTimeout(waitForLeaflet, 100);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    if (isAppInitialized || !document.getElementById('map')) return;
    
    console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã');
    
    try {
        map = L.map('map', {
            zoomControl: true,
            attributionControl: true,
            preferCanvas: true,
            maxZoom: 18,
            zoomSnap: 0.5
        }).setView(ALMATY_CENTER, 13);
        
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors',
            maxZoom: 18,
            keepBuffer: 2,
            updateWhenIdle: false
        }).addTo(map);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        addMapStyles();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏
        if (window.LoaderAPI) {
            window.LoaderAPI.onMapReady();
        }
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
        window.map = map;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
        setTimeout(() => {
            if (map) {
                map.invalidateSize();
                console.log('‚úÖ –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞');
                loadPoints();
            }
        }, 200);
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —É–º–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        setInterval(() => {
            loadPoints(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫—ç—à
        }, 30000);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            loadPoints(true);
        }, 5 * 60 * 1000);
        
        isAppInitialized = true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
        retryMapInit();
    }
}

// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
function retryMapInit() {
    if (isRetrying) return;
    isRetrying = true;
    
    console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã...');
    setTimeout(() => {
        isRetrying = false;
        initMap();
    }, 2000);
}

// –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
function addMapStyles() {
    if (!document.getElementById('map-styles')) {
        const style = document.createElement('style');
        style.id = 'map-styles';
        style.textContent = `
            .leaflet-tile-pane {
                filter: grayscale(100%) contrast(1.1) brightness(1.05) !important;
            }
            
            .leaflet-marker-pane,
            .leaflet-popup-pane,
            .leaflet-control-container {
                filter: none !important;
            }
            
            .leaflet-container {
                background: #f8f9fa !important;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
            }
            
            .marker-icon {
                background: none !important;
                border: none !important;
            }
            
            .marker-dot {
                width: 20px;
                height: 20px;
                border-radius: 50%;
                border: 2px solid white;
                box-shadow: 0 3px 8px rgba(0,0,0,0.25);
                transition: transform 0.2s ease;
                cursor: pointer;
            }
            
            .marker-dot:hover {
                transform: scale(1.1);
            }
            
            .marker-dot.available {
                background: linear-gradient(45deg, #4CAF50, #45a049);
            }
            
            .marker-dot.collected {
                background: linear-gradient(45deg, #f44336, #e53935);
            }
            
            .popup-content {
                min-width: 200px;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            }
            
            .popup-content h3 {
                margin: 0 0 10px 0;
                color: #333;
                font-size: 1rem;
                font-weight: 600;
            }
            
            .status {
                margin: 8px 0;
                font-weight: 600;
                font-size: 0.9rem;
            }
            
            .status.available {
                color: #4CAF50;
            }
            
            .status.collected {
                color: #f44336;
            }
            
            .collector-info {
                background: #f8f9fa;
                padding: 8px;
                border-radius: 6px;
                margin: 8px 0;
                font-size: 0.85rem;
            }
            
            .collector-info p {
                margin: 4px 0;
            }
            
            .details-btn {
                background: linear-gradient(45deg, #667eea, #764ba2);
                color: white;
                border: none;
                padding: 8px 12px;
                border-radius: 6px;
                cursor: pointer;
                font-size: 0.85rem;
                margin-top: 8px;
                width: 100%;
                transition: background 0.2s;
            }
            
            .details-btn:hover {
                background: linear-gradient(45deg, #5a67d8, #6b46c1);
            }
            
            .user-marker {
                background: none !important;
                border: none !important;
            }
            
            .user-dot {
                width: 22px;
                height: 22px;
                border-radius: 50%;
                background: linear-gradient(45deg, #007bff, #0056b3);
                border: 2px solid white;
                box-shadow: 0 3px 10px rgba(0,0,0,0.3);
                transition: transform 0.2s ease;
            }
            
            .user-dot:hover {
                transform: scale(1.1);
            }
        `;
        document.head.appendChild(style);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function initControlButtons() {
    const locationBtn = document.querySelector('.location-btn');
    
    if (locationBtn) {
        locationBtn.addEventListener('mousedown', function() {
            this.style.transform = 'translateY(-1px)';
        }, { passive: true });
        
        locationBtn.addEventListener('mouseup', function() {
            this.style.transform = '';
        }, { passive: true });
        
        // –ú–æ–±–∏–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        locationBtn.addEventListener('touchstart', function() {
            this.style.transform = 'translateY(-1px)';
        }, { passive: true });
        
        locationBtn.addEventListener('touchend', function() {
            this.style.transform = '';
        }, { passive: true });
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function loadPoints(forceRefresh = false) {
    if (!map) {
        console.log('‚è≥ –ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (!forceRefresh) {
        const cached = CacheManager.getCachedPoints();
        if (cached && !cached.isExpired) {
            console.log('‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏');
            pointsCache = cached.points;
            updateMap(cached.points);
            updateStats(cached.points);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏
            if (window.LoaderAPI) {
                window.LoaderAPI.onPointsLoaded();
            }
            
            return cached.points;
        } else if (cached && cached.isExpired) {
            console.log('üì¶ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ');
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
            pointsCache = cached.points;
            updateMap(cached.points);
            updateStats(cached.points);
            
            if (window.LoaderAPI) {
                window.LoaderAPI.onPointsLoaded();
            }
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ
        }
    }
    
    try {
        console.log('üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        
        const response = await fetch('/api/points', {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Cache-Control': 'no-cache'
            },
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const points = await response.json();
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${points.length} —Ç–æ—á–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        CacheManager.savePoints(points);
        
        pointsCache = points;
        updateMap(points);
        updateStats(points);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏
        if (window.LoaderAPI) {
            window.LoaderAPI.onPointsLoaded();
        }
        
        return points;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫:', error);
        
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—ç—à
        const cached = CacheManager.getCachedPoints();
        if (cached) {
            console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫—ç—à –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏');
            pointsCache = cached.points;
            updateMap(cached.points);
            updateStats(cached.points);
            
            showNotification('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
        } else {
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (window.LoaderAPI) {
            window.LoaderAPI.onPointsLoaded();
        }
        
        throw error;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
function updateMap(points) {
    if (!map || !points) return;
    
    console.log(`üó∫Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å ${points.length} —Ç–æ—á–∫–∞–º–∏`);
    
    // –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã
    markers.forEach(marker => map.removeLayer(marker));
    markers.length = 0;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    points.forEach(point => {
        const isAvailable = point.status === 'available';
        
        const icon = L.divIcon({
            className: 'marker-icon',
            html: `<div class="marker-dot ${isAvailable ? 'available' : 'collected'}"></div>`,
            iconSize: [20, 20],
            iconAnchor: [10, 10]
        });
        
        const marker = L.marker([point.coordinates.lat, point.coordinates.lng], { icon });
        
        // Popup
        let popupContent = `
            <div class="popup-content">
                <h3>${point.name}</h3>
                <p class="status ${point.status}">
                    ${isAvailable ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞' : 'üî¥ –°–æ–±—Ä–∞–Ω–∞'}
                </p>
        `;
        
        if (!isAvailable && point.collectorInfo) {
            popupContent += `
                <div class="collector-info">
                    <p><strong>–°–æ–±—Ä–∞–ª:</strong> ${point.collectorInfo.name}</p>
                    ${point.collectorInfo.signature ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${point.collectorInfo.signature}</p>` : ''}
                    <p><strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
                </div>
                <button onclick="showPointDetails('${point.id}')" class="details-btn">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
            `;
        }
        
        popupContent += '</div>';
        marker.bindPopup(popupContent);
        marker.addTo(map);
        markers.push(marker);
    });
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
    window.markers = markers;
    
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${markers.length} –º–∞—Ä–∫–µ—Ä–æ–≤`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats(points) {
    if (!points) return;
    
    const available = points.filter(p => p.status === 'available').length;
    const collected = points.filter(p => p.status === 'collected').length;
    
    const availableElement = document.getElementById('availableCount');
    const collectedElement = document.getElementById('collectedCount');
    
    if (availableElement && collectedElement) {
        animateNumber(availableElement, parseInt(availableElement.textContent) || 0, available);
        animateNumber(collectedElement, parseInt(collectedElement.textContent) || 0, collected);
    }
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${available} –¥–æ—Å—Ç—É–ø–Ω–æ, ${collected} —Å–æ–±—Ä–∞–Ω–æ`);
}

// –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª
function animateNumber(element, from, to) {
    if (from === to) return;
    
    const duration = 600;
    const steps = 20;
    const stepValue = (to - from) / steps;
    const stepDuration = duration / steps;
    
    let current = from;
    let step = 0;
    
    element.style.transform = 'scale(1.05)';
    element.style.transition = 'transform 0.3s ease';
    
    const timer = setInterval(() => {
        step++;
        current += stepValue;
        
        if (step >= steps) {
            element.textContent = to;
            element.style.transform = 'scale(1)';
            clearInterval(timer);
        } else {
            element.textContent = Math.round(current);
        }
    }, stepDuration);
}

// –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
function getCurrentLocation() {
    const locationBtn = document.querySelector('.location-btn');
    
    if (!navigator.geolocation) {
        showNotification('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
        return;
    }
    
    if (!map) {
        showNotification('–ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞', 'error');
        return;
    }
    
    const originalText = locationBtn.innerHTML;
    locationBtn.innerHTML = '‚è≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...';
    locationBtn.disabled = true;
    locationBtn.style.opacity = '0.7';
    
    navigator.geolocation.getCurrentPosition(
        function(position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            // –ü—Ä–æ—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userIcon = L.divIcon({
                className: 'user-marker',
                html: '<div class="user-dot"></div>',
                iconSize: [22, 22],
                iconAnchor: [11, 11]
            });
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä
            if (window.userMarker) {
                map.removeLayer(window.userMarker);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
            window.userMarker = L.marker([lat, lng], { icon: userIcon })
                .addTo(map)
                .bindPopup(`
                    <div style="text-align: center; min-width: 140px;">
                        <strong>üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong><br>
                        <small style="color: #666;">
                            ${lat.toFixed(4)}, ${lng.toFixed(4)}
                        </small>
                    </div>
                `);
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
            map.flyTo([lat, lng], 16, {
                duration: 1.2,
                easeLinearity: 0.5
            });
            
            showNotification('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ', 'success');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
            locationBtn.style.opacity = '';
        },
        function(error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
            
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    errorMessage = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω';
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
                    break;
                case error.TIMEOUT:
                    errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
                    break;
            }
            
            showNotification(errorMessage, 'error');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
            locationBtn.style.opacity = '';
        },
        {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 300000
        }
    );
}

// –î–µ—Ç–∞–ª–∏ —Ç–æ—á–∫–∏
async function showPointDetails(pointId) {
    try {
        const response = await fetch(`/api/point/${pointId}/info`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        }
        
        const point = await response.json();
        
        let modalContent = `
            <h3 style="color: #667eea; margin-bottom: 12px;">${point.name}</h3>
            <div style="background: #f8f9fa; padding: 12px; border-radius: 8px; margin-bottom: 12px;">
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: ${point.status === 'collected' ? '#f44336' : '#4CAF50'}">${point.status === 'collected' ? '–°–æ–±—Ä–∞–Ω–∞' : '–î–æ—Å—Ç—É–ø–Ω–∞'}</span></p>
                <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${point.coordinates.lat.toFixed(4)}, ${point.coordinates.lng.toFixed(4)}</p>
            </div>
        `;
        
        if (point.status === 'collected' && point.collectorInfo) {
            modalContent += `
                <div style="border-left: 3px solid #667eea; padding-left: 12px; margin: 12px 0;">
                    <h4 style="color: #333; margin-bottom: 8px;">–°–±–æ—Ä—â–∏–∫:</h4>
                    <p><strong>–ò–º—è:</strong> ${point.collectorInfo.name}</p>
                    ${point.collectorInfo.signature ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> <em>"${point.collectorInfo.signature}"</em></p>` : ''}
                    <p><strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
                </div>
            `;
            
            if (point.collectorInfo.selfie) {
                modalContent += `
                    <div style="margin-top: 15px; text-align: center;">
                        <strong style="color: #667eea;">–°–µ–ª—Ñ–∏:</strong><br>
                        <img src="${point.collectorInfo.selfie}" 
                             style="max-width: 100%; max-height: 250px; border-radius: 8px; margin-top: 8px; box-shadow: 0 3px 10px rgba(0,0,0,0.1);"
                             alt="–°–µ–ª—Ñ–∏ —Å–±–æ—Ä—â–∏–∫–∞">
                    </div>
                `;
            }
        }
        
        document.getElementById('modalTitle').innerHTML = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏';
        document.getElementById('modalBody').innerHTML = modalContent;
        document.getElementById('infoModal').style.display = 'block';
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'error');
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    document.getElementById('infoModal').style.display = 'none';
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—ç—à–∞
function showNotification(message, type = 'info') {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const timestamp = new Date().toLocaleTimeString();
    const icon = {
        'info': '‚ÑπÔ∏è',
        'success': '‚úÖ', 
        'warning': '‚ö†Ô∏è',
        'error': '‚ùå'
    }[type] || '‚ÑπÔ∏è';
    
    console.log(`[${timestamp}] ${icon} ${message}`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    if (type === 'error') {
        console.error(`[PlasticBoy Error] ${message}`);
    } else if (type === 'warning') {
        console.warn(`[PlasticBoy Warning] ${message}`);
    } else if (type === 'success') {
        console.log(`[PlasticBoy Success] ${message}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function forceRefresh() {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
    CacheManager.clearCache();
    loadPoints(true);
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function getCacheStatus() {
    const info = CacheManager.getCacheInfo();
    if (!info) {
        console.log('üì≠ –ö—ç—à –ø—É—Å—Ç');
        return null;
    }
    
    console.log(`üíæ –ö—ç—à: ${info.pointsCount} —Ç–æ—á–µ–∫, –≤–æ–∑—Ä–∞—Å—Ç ${info.age}—Å, ${info.isExpired ? '—É—Å—Ç–∞—Ä–µ–ª' : '–∞–∫—Ç—É–∞–ª–µ–Ω'}`);
    return info;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
window.addEventListener('click', function(event) {
    const modal = document.getElementById('infoModal');
    if (event.target === modal) {
        closeModal();
    }
}, { passive: true });

window.addEventListener('resize', function() {
    if (map) {
        clearTimeout(window.resizeTimeout);
        window.resizeTimeout = setTimeout(() => {
            map.invalidateSize();
        }, 250);
    }
}, { passive: true });

// –°–µ—Ç–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—ç—à–∞
window.addEventListener('online', function() {
    console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    if (isAppInitialized) {
        // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        setTimeout(() => loadPoints(true), 1000);
    }
}, { passive: true });

window.addEventListener('offline', function() {
    console.log('üì± –†–∞–±–æ—Ç–∞ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
    showNotification('–†–∞–±–æ—Ç–∞ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ', 'warning');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—ç—à–∞
    const cacheInfo = CacheManager.getCacheInfo();
    if (cacheInfo) {
        console.log(`üíæ –î–æ—Å—Ç—É–ø–µ–Ω –æ—Ñ—Ñ–ª–∞–π–Ω –∫—ç—à: ${cacheInfo.pointsCount} —Ç–æ—á–µ–∫`);
    } else {
        console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞');
    }
}, { passive: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
window.addEventListener('error', function(e) {
    if (e.target.tagName === 'IMG' && e.target.src.includes('openstreetmap')) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–æ–≤ –∫–∞—Ä—Ç—ã');
    }
}, { passive: true });

// –ö–ª–∞–≤–∏—à–∏
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeModal();
    }
    
    if (event.ctrlKey && event.key === 'l') {
        event.preventDefault();
        getCurrentLocation();
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ Ctrl+R
    if (event.ctrlKey && event.key === 'r') {
        event.preventDefault();
        forceRefresh();
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –ø–æ Ctrl+I
    if (event.ctrlKey && event.key === 'i') {
        event.preventDefault();
        getCacheStatus();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—ç—à–∞
window.PlasticBoy = {
    map,
    markers,
    loadPoints,
    getCurrentLocation,
    showPointDetails,
    closeModal,
    initMap,
    updateMap,
    updateStats,
    showNotification,
    // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    forceRefresh,
    getCacheStatus,
    clearCache: () => CacheManager.clearCache(),
    cacheManager: CacheManager
};

// –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.fastLoadPoints = loadPoints;
window.fastUpdateMap = updateMap;
window.fastUpdateStats = updateStats;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    const cacheInfo = CacheManager.getCacheInfo();
    if (cacheInfo) {
        console.log(`üéØ PlasticBoy –∑–∞–ø—É—â–µ–Ω —Å –∫—ç—à–µ–º: ${cacheInfo.pointsCount} —Ç–æ—á–µ–∫ (${cacheInfo.age}—Å –Ω–∞–∑–∞–¥)`);
    } else {
        console.log('üéØ PlasticBoy –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –∫—ç—à–∞');
    }
});

console.log('üöÄ PlasticBoy script —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
