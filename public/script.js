// –°–£–ü–ï–†-–ë–´–°–¢–†–´–ô SCRIPT.JS –¥–ª—è PlasticBoy
// –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ

let map;
let markers = [];
let markersLayer; // –ì—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã
const ALMATY_CENTER = [43.2220, 76.8512];

// –ö—ç—à –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
let pointsCache = null;
let lastUpdateTime = 0;
let isAppInitialized = false;

// –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ DOM
const batchDOMUpdates = (callback) => {
    requestAnimationFrame(() => {
        callback();
    });
};

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚ö° –°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PlasticBoy');
    initControlButtons();
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ –≤ CSS
    preloadMarkerStyles();
});

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π –º–∞—Ä–∫–µ—Ä–æ–≤
function preloadMarkerStyles() {
    const style = document.createElement('style');
    style.id = 'preloaded-marker-styles';
    style.textContent = `
        .lightning-marker {
            background: none !important;
            border: none !important;
        }
        
        .lightning-dot {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            border: 2px solid white;
            box-shadow: 0 2px 6px rgba(0,0,0,0.25);
            transition: transform 0.15s ease;
            cursor: pointer;
            position: relative;
        }
        
        .lightning-dot:hover {
            transform: scale(1.15);
            z-index: 1000;
        }
        
        .lightning-dot.available {
            background: #4CAF50;
            box-shadow: 0 2px 6px rgba(76, 175, 80, 0.4);
        }
        
        .lightning-dot.collected {
            background: #f44336;
            box-shadow: 0 2px 6px rgba(244, 67, 54, 0.4);
        }
        
        .lightning-popup {
            min-width: 180px;
            font-family: system-ui, -apple-system, sans-serif;
        }
        
        .lightning-popup h3 {
            margin: 0 0 8px 0;
            color: #333;
            font-size: 0.95rem;
            font-weight: 600;
        }
        
        .lightning-status {
            margin: 6px 0;
            font-weight: 600;
            font-size: 0.85rem;
        }
        
        .lightning-status.available { color: #4CAF50; }
        .lightning-status.collected { color: #f44336; }
        
        .lightning-collector {
            background: #f8f9fa;
            padding: 6px;
            border-radius: 4px;
            margin: 6px 0;
            font-size: 0.8rem;
        }
        
        .lightning-collector p {
            margin: 3px 0;
        }
        
        .lightning-btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 6px 10px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            width: 100%;
            margin-top: 6px;
            transition: background 0.2s;
        }
        
        .lightning-btn:hover {
            background: linear-gradient(45deg, #5a67d8, #6b46c1);
        }
        
        /* –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–∞—Ä—Ç—ã */
        .leaflet-tile-pane {
            filter: grayscale(100%) contrast(1.1) brightness(1.05);
            transform: translateZ(0); /* GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ */
        }
        
        .leaflet-marker-pane {
            will-change: transform;
        }
        
        .leaflet-popup-pane {
            will-change: transform;
        }
    `;
    document.head.appendChild(style);
}

// –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    if (isAppInitialized) return;
    
    console.log('‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã');
    
    map = L.map('map', {
        zoomControl: true,
        attributionControl: true,
        preferCanvas: true,
        renderer: L.canvas(), // Canvas –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        maxZoom: 18,
        zoomAnimation: true,
        fadeAnimation: true,
        markerZoomAnimation: true
    }).setView(ALMATY_CENTER, 13);
    
    // –ì—Ä—É–ø–ø–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    markersLayer = L.layerGroup().addTo(map);
    
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap',
        maxZoom: 18,
        keepBuffer: 4, // –£–≤–µ–ª–∏—á–∏–ª–∏ –±—É—Ñ–µ—Ä —Ç–∞–π–ª–æ–≤
        updateWhenIdle: false,
        updateWhenZooming: false,
        crossOrigin: true
    }).addTo(map);
    
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
    setTimeout(() => {
        if (map) {
            map.invalidateSize();
            window.map = map;
            console.log('‚ö° –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ú–ì–ù–û–í–ï–ù–ù–û–ô –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫');
            
            // –°—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—á–∫–∏
            lightningLoadPoints();
        }
    }, 10); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    isAppInitialized = true;
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        if (isAppInitialized) {
            lightningLoadPoints();
        }
    }, 30000);
}

// –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
function initControlButtons() {
    batchDOMUpdates(() => {
        const locationBtn = document.querySelector('.location-btn');
        if (locationBtn) {
            locationBtn.addEventListener('mousedown', function() {
                this.style.transform = 'translateY(-1px)';
            }, { passive: true });
            
            locationBtn.addEventListener('mouseup', function() {
                this.style.transform = '';
            }, { passive: true });
        }
    });
}

// –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫
async function lightningLoadPoints() {
    const startTime = performance.now();
    
    try {
        console.log('‚ö° –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        const response = await fetch('/api/points', {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Cache-Control': 'no-cache'
            },
            cache: 'no-store' // –í—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const points = await response.json();
        const loadTime = performance.now() - startTime;
        
        console.log(`‚ö° –ú–ì–ù–û–í–ï–ù–ù–û –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${points.length} —Ç–æ—á–µ–∫ –∑–∞ ${loadTime.toFixed(1)}ms`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const pointsChanged = !pointsCache || 
            pointsCache.length !== points.length ||
            JSON.stringify(pointsCache.map(p => p.id + p.status)) !== 
            JSON.stringify(points.map(p => p.id + p.status));
        
        if (pointsChanged) {
            pointsCache = points;
            lastUpdateTime = Date.now();
            
            // –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            Promise.all([
                lightningUpdateMap(points),
                lightningUpdateStats(points)
            ]).then(() => {
                const totalTime = performance.now() - startTime;
                console.log(`‚ö° –ü–û–õ–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞ ${totalTime.toFixed(1)}ms`);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏
                if (typeof window.PlasticBoyLoader !== 'undefined') {
                    window.PlasticBoyLoader.onPointsLoaded();
                }
            });
        } else {
            console.log('‚ö° –¢–æ—á–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        }
        
        return points;
        
    } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (pointsCache) {
            console.log('üì¶ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            await lightningUpdateMap(pointsCache);
            await lightningUpdateStats(pointsCache);
        }
        
        showLightningNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ‚ö†Ô∏è', 'warning');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (typeof window.PlasticBoyLoader !== 'undefined') {
            window.PlasticBoyLoader.onPointsLoaded();
        }
        
        throw error;
    }
}

// –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
async function lightningUpdateMap(points) {
    if (!map || !markersLayer) {
        console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞');
        return;
    }
    
    const startTime = performance.now();
    console.log(`‚ö° –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${points.length} –º–∞—Ä–∫–µ—Ä–æ–≤`);
    
    return new Promise((resolve) => {
        // –û—á–∏—â–∞–µ–º –í–°–ï –º–∞—Ä–∫–µ—Ä—ã –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        markersLayer.clearLayers();
        markers.length = 0;
        
        if (points.length === 0) {
            resolve();
            return;
        }
        
        // –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤
        const newMarkers = [];
        const iconsCache = new Map(); // –ö—ç—à –∏–∫–æ–Ω–æ–∫
        
        points.forEach(point => {
            const isAvailable = point.status === 'available';
            const iconKey = isAvailable ? 'available' : 'collected';
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
            if (!iconsCache.has(iconKey)) {
                iconsCache.set(iconKey, L.divIcon({
                    className: 'lightning-marker',
                    html: `<div class="lightning-dot ${iconKey}"></div>`,
                    iconSize: [18, 18],
                    iconAnchor: [9, 9]
                }));
            }
            
            const marker = L.marker([point.coordinates.lat, point.coordinates.lng], { 
                icon: iconsCache.get(iconKey),
                riseOnHover: true
            });
            
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π popup
            const popupContent = createLightningPopup(point, isAvailable);
            marker.bindPopup(popupContent, {
                maxWidth: 200,
                autoPan: false
            });
            
            newMarkers.push(marker);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –º–∞—Ä–∫–µ—Ä—ã –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        batchDOMUpdates(() => {
            newMarkers.forEach(marker => {
                markersLayer.addLayer(marker);
                markers.push(marker);
            });
            
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
            window.markers = markers;
            
            const updateTime = performance.now() - startTime;
            console.log(`‚ö° –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞ ${updateTime.toFixed(1)}ms`);
            resolve();
        });
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ popup
function createLightningPopup(point, isAvailable) {
    let content = `
        <div class="lightning-popup">
            <h3>${point.name}</h3>
            <p class="lightning-status ${point.status}">
                ${isAvailable ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∞' : 'üî¥ –°–æ–±—Ä–∞–Ω–∞'}
            </p>
    `;
    
    if (!isAvailable && point.collectorInfo) {
        content += `
            <div class="lightning-collector">
                <p><strong>–°–æ–±—Ä–∞–ª:</strong> ${point.collectorInfo.name}</p>
                ${point.collectorInfo.signature ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${point.collectorInfo.signature}</p>` : ''}
                <p><strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU', {
                    day: '2-digit',
                    month: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit'
                })}</p>
            </div>
            <button onclick="showPointDetails('${point.id}')" class="lightning-btn">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
        `;
    }
    
    content += '</div>';
    return content;
}

// –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function lightningUpdateStats(points) {
    return new Promise((resolve) => {
        const available = points.filter(p => p.status === 'available').length;
        const collected = points.filter(p => p.status === 'collected').length;
        
        batchDOMUpdates(() => {
            const availableElement = document.getElementById('availableCount');
            const collectedElement = document.getElementById('collectedCount');
            
            if (availableElement && collectedElement) {
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                const currentAvailable = parseInt(availableElement.textContent) || 0;
                const currentCollected = parseInt(collectedElement.textContent) || 0;
                
                if (currentAvailable !== available) {
                    lightningAnimateNumber(availableElement, currentAvailable, available);
                }
                if (currentCollected !== collected) {
                    lightningAnimateNumber(collectedElement, currentCollected, collected);
                }
            }
            
            console.log(`‚ö° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${available} –¥–æ—Å—Ç—É–ø–Ω–æ, ${collected} —Å–æ–±—Ä–∞–Ω–æ`);
            resolve();
        });
    });
}

// –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è)
function lightningAnimateNumber(element, from, to) {
    if (from === to) return;
    
    // –î–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    if (Math.abs(to - from) > 5) {
        element.textContent = to;
        element.style.transform = 'scale(1.05)';
        element.style.transition = 'transform 0.15s ease';
        setTimeout(() => {
            element.style.transform = 'scale(1)';
        }, 150);
        return;
    }
    
    // –î–ª—è –º–∞–ª—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π - –±—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
    const duration = 200;
    const steps = 8;
    const stepValue = (to - from) / steps;
    const stepDuration = duration / steps;
    
    let current = from;
    let step = 0;
    
    element.style.transform = 'scale(1.05)';
    element.style.transition = 'transform 0.1s ease';
    
    const timer = setInterval(() => {
        step++;
        current += stepValue;
        
        if (step >= steps) {
            element.textContent = to;
            element.style.transform = 'scale(1)';
            clearInterval(timer);
        } else {
            element.textContent = Math.round(current);
        }
    }, stepDuration);
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
function getCurrentLocation() {
    const locationBtn = document.querySelector('.location-btn');
    
    if (!navigator.geolocation) {
        showLightningNotification('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
        return;
    }
    
    const originalText = locationBtn.innerHTML;
    locationBtn.innerHTML = '‚ö° –ü–æ–∏—Å–∫...';
    locationBtn.disabled = true;
    locationBtn.style.opacity = '0.8';
    
    navigator.geolocation.getCurrentPosition(
        function(position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            // –ë—ã—Å—Ç—Ä–∞—è –∏–∫–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userIcon = L.divIcon({
                className: 'lightning-user-marker',
                html: `<div style="
                    background: linear-gradient(45deg, #007bff, #0056b3);
                    width: 20px; 
                    height: 20px; 
                    border-radius: 50%; 
                    border: 2px solid white; 
                    box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                    transform: translateZ(0);
                "></div>`,
                iconSize: [20, 20],
                iconAnchor: [10, 10]
            });
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä
            if (window.userMarker) {
                map.removeLayer(window.userMarker);
            }
            
            // –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
            window.userMarker = L.marker([lat, lng], { icon: userIcon })
                .addTo(map)
                .bindPopup(`
                    <div style="text-align: center; min-width: 120px;">
                        <strong>üìç –í—ã –∑–¥–µ—Å—å</strong><br>
                        <small style="color: #666;">
                            ${lat.toFixed(4)}, ${lng.toFixed(4)}
                        </small>
                    </div>
                `, {
                    autoPan: false
                });
            
            // –ë—ã—Å—Ç—Ä–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
            map.setView([lat, lng], 16);
            
            showLightningNotification('–ù–∞–π–¥–µ–Ω–æ ‚ö°', 'success');
            
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
            locationBtn.style.opacity = '';
        },
        function(error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            
            let errorMessage = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    errorMessage = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω';
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
                    break;
                case error.TIMEOUT:
                    errorMessage = '–¢–∞–π–º–∞—É—Ç';
                    break;
            }
            
            showLightningNotification(errorMessage, 'error');
            
            locationBtn.innerHTML = originalText;
            locationBtn.disabled = false;
            locationBtn.style.opacity = '';
        },
        {
            enableHighAccuracy: true,
            timeout: 5000, // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            maximumAge: 300000
        }
    );
}

// –ë—ã—Å—Ç—Ä—ã–µ –¥–µ—Ç–∞–ª–∏ —Ç–æ—á–∫–∏ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
const detailsCache = new Map();

async function showPointDetails(pointId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (detailsCache.has(pointId)) {
            const cachedData = detailsCache.get(pointId);
            if (Date.now() - cachedData.timestamp < 300000) { // 5 –º–∏–Ω—É—Ç –∫—ç—à
                showModal(cachedData.content);
                return;
            }
        }
        
        const response = await fetch(`/api/point/${pointId}/info`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        }
        
        const point = await response.json();
        const content = createDetailedContent(point);
        
        // –ö—ç—à–∏—Ä—É–µ–º
        detailsCache.set(pointId, {
            content,
            timestamp: Date.now()
        });
        
        showModal(content);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        showLightningNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', 'error');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function createDetailedContent(point) {
    let content = `
        <h3 style="color: #667eea; margin-bottom: 12px;">${point.name}</h3>
        <div style="background: #f8f9fa; padding: 12px; border-radius: 8px; margin-bottom: 12px;">
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: ${point.status === 'collected' ? '#f44336' : '#4CAF50'}">${point.status === 'collected' ? '–°–æ–±—Ä–∞–Ω–∞' : '–î–æ—Å—Ç—É–ø–Ω–∞'}</span></p>
            <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${point.coordinates.lat.toFixed(4)}, ${point.coordinates.lng.toFixed(4)}</p>
        </div>
    `;
    
    if (point.status === 'collected' && point.collectorInfo) {
        content += `
            <div style="border-left: 3px solid #667eea; padding-left: 12px; margin: 12px 0;">
                <h4 style="color: #333; margin-bottom: 8px;">–°–±–æ—Ä—â–∏–∫:</h4>
                <p><strong>–ò–º—è:</strong> ${point.collectorInfo.name}</p>
                ${point.collectorInfo.signature ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> <em>"${point.collectorInfo.signature}"</em></p>` : ''}
                <p><strong>–í—Ä–µ–º—è:</strong> ${new Date(point.collectedAt).toLocaleString('ru-RU')}</p>
            </div>
        `;
        
        if (point.collectorInfo.selfie) {
            content += `
                <div style="margin-top: 15px; text-align: center;">
                    <strong style="color: #667eea;">–°–µ–ª—Ñ–∏:</strong><br>
                    <img src="${point.collectorInfo.selfie}" 
                         style="max-width: 100%; max-height: 250px; border-radius: 8px; margin-top: 8px; box-shadow: 0 3px 10px rgba(0,0,0,0.1);"
                         alt="–°–µ–ª—Ñ–∏ —Å–±–æ—Ä—â–∏–∫–∞"
                         loading="lazy">
                </div>
            `;
        }
    }
    
    return content;
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function showModal(content) {
    batchDOMUpdates(() => {
        document.getElementById('modalTitle').innerHTML = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏';
        document.getElementById('modalBody').innerHTML = content;
        document.getElementById('infoModal').style.display = 'block';
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    document.getElementById('infoModal').style.display = 'none';
}

// –ë—ã—Å—Ç—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showLightningNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `lightning-notification ${type}`;
    
    const icons = {
        error: '‚ùå',
        success: '‚úÖ',
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è'
    };
    
    notification.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; font-size: 0.9rem;">
            <span>${icons[type] || icons.info} ${message}</span>
            <button onclick="this.parentElement.parentElement.remove()" 
                    style="background: none; border: none; font-size: 1.1rem; cursor: pointer; color: #999; padding: 0; margin-left: 10px;">√ó</button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!document.getElementById('lightning-notification-styles')) {
        const style = document.createElement('style');
        style.id = 'lightning-notification-styles';
        style.textContent = `
            .lightning-notification {
                position: fixed;
                top: 15px;
                right: 15px;
                z-index: 2000;
                background: rgba(255, 255, 255, 0.98);
                border-radius: 6px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.15);
                backdrop-filter: blur(8px);
                padding: 10px 12px;
                min-width: 200px;
                max-width: 300px;
                animation: lightningSlideIn 0.2s ease;
                border: 1px solid rgba(255,255,255,0.3);
                font-weight: 500;
            }
            
            .lightning-notification.error { border-left: 3px solid #f44336; }
            .lightning-notification.success { border-left: 3px solid #4CAF50; }
            .lightning-notification.info { border-left: 3px solid #2196F3; }
            .lightning-notification.warning { border-left: 3px solid #ff9800; }
            
            @keyframes lightningSlideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
        `;
        document.head.appendChild(style);
    }
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'lightningSlideOut 0.15s ease';
            setTimeout(() => notification.remove(), 150);
        }
    }, 2500); // –ö–æ—Ä–æ—á–µ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
window.addEventListener('click', function(event) {
    if (event.target === document.getElementById('infoModal')) {
        closeModal();
    }
}, { passive: true });

window.addEventListener('resize', function() {
    if (map) {
        clearTimeout(window.lightningResizeTimeout);
        window.lightningResizeTimeout = setTimeout(() => {
            map.invalidateSize();
        }, 50); // –ë—ã—Å—Ç—Ä–µ–µ –æ—Ç–∫–ª–∏–∫
    }
}, { passive: true });

// –°–µ—Ç–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
window.addEventListener('online', function() {
    showLightningNotification('–û–Ω–ª–∞–π–Ω ‚ö°', 'success');
    if (isAppInitialized) {
        setTimeout(() => lightningLoadPoints(), 50);
    }
}, { passive: true });

window.addEventListener('offline', function() {
    showLightningNotification('–û—Ñ–ª–∞–π–Ω ‚ö†Ô∏è', 'warning');
}, { passive: true });

// –ë—ã—Å—Ç—Ä—ã–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeModal();
    }
    if (event.ctrlKey && event.key === 'l') {
        event.preventDefault();
        getCurrentLocation();
    }
    if (event.ctrlKey && event.key === 'r') {
        event.preventDefault();
        lightningLoadPoints();
    }
}, { passive: false });

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.PlasticBoy = {
    map,
    markers,
    markersLayer,
    loadPoints: lightningLoadPoints,
    showLightningNotification,
    getCurrentLocation,
    showPointDetails,
    closeModal,
    initMap,
    lightningUpdateMap,
    lightningUpdateStats
};

// –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã
window.showNotification = showLightningNotification;
window.updateMap = lightningUpdateMap;
window.updateStats = lightningUpdateStats;
window.loadPoints = lightningLoadPoints;

console.log('‚ö° –ú–ì–ù–û–í–ï–ù–ù–´–ô PlasticBoy –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
