const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const multer = require('multer');
const QRCode = require('qrcode');
const crypto = require('crypto');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware - –£–ë–†–ê–ù–´ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ü–û –†–ê–ó–ú–ï–†–£
app.use(cors());
app.use(express.json({ limit: '50mb' })); // –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.use(express.urlencoded({ extended: true, limit: '50mb' })); // –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç
app.use(express.static('public'));

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
app.use((req, res, next) => {
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
  next();
});

// Multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ - –£–ë–†–ê–ù–´ –í–°–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ü–û –†–ê–ó–ú–ï–†–£
const storage = multer.memoryStorage();
const upload = multer({ 
  storage: storage
  // –£–±—Ä–∞–ª–∏ –≤—Å–µ limits - —Ç–µ–ø–µ—Ä—å —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è
});

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/plasticboy', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log(`‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: ${conn.connection.host}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
    process.exit(1);
  }
};

connectDB();

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram
const ModelPointSchema = new mongoose.Schema({
  id: { type: String, unique: true, required: true, index: true },
  name: { type: String, required: true },
  coordinates: {
    lat: { type: Number, required: true },
    lng: { type: Number, required: true }
  },
  status: { type: String, enum: ['available', 'collected'], default: 'available', index: true },
  qrCode: { type: String, required: true },
  qrSecret: { type: String, required: true, index: true },
  scheduledTime: { type: Date, default: Date.now, index: true },
  createdAt: { type: Date, default: Date.now, index: true },
  collectedAt: { type: Date, index: true },
  collectorInfo: {
    name: { type: String, required: true },
    signature: String,
    selfie: String, // –£–±—Ä–∞–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è - —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    authMethod: { type: String, enum: ['manual', 'telegram'], default: 'manual' },
    telegramData: {
      id: Number,
      first_name: String,
      last_name: String,
      username: String,
      photo_url: String,
      auth_date: Number,
      hash: String,
      language_code: String
    },
    ipAddress: String,
    userAgent: String,
    location: {
      lat: Number,
      lng: Number,
      accuracy: Number
    }
  }
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
ModelPointSchema.index({ status: 1, scheduledTime: 1 });
ModelPointSchema.index({ id: 1, qrSecret: 1 });
ModelPointSchema.index({ createdAt: 1 });
ModelPointSchema.index({ collectedAt: 1 });
ModelPointSchema.index({ 'collectorInfo.telegramData.id': 1 });

const ModelPoint = mongoose.model('ModelPoint', ModelPointSchema);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö Telegram
function verifyTelegramAuth(data, botToken) {
  try {
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if (!botToken) {
      console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏');
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!data.hash || !data.auth_date || !data.id) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö Telegram');
      return false;
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const checkDataKeys = Object.keys(data)
      .filter(key => key !== 'hash')
      .sort();
    
    if (checkDataKeys.length === 0) {
      console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      return false;
    }

    const checkString = checkDataKeys
      .map(key => `${key}=${data[key]}`)
      .join('\n');

    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    const secret = crypto.createHash('sha256').update(botToken).digest();
    
    // –°–æ–∑–¥–∞–µ–º HMAC
    const hmac = crypto.createHmac('sha256', secret).update(checkString).digest('hex');
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à–∏
    const isValid = hmac === data.hash;
    
    if (!isValid) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram –¥–∞–Ω–Ω—ã—Ö');
      console.log('Expected:', hmac);
      console.log('Received:', data.hash);
      console.log('Check string:', checkString);
    } else {
      console.log('‚úÖ Telegram –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏');
    }

    return isValid;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function logUserAction(action, data, req) {
  const logData = {
    timestamp: new Date().toISOString(),
    action,
    data,
    ip: req.ip || req.connection.remoteAddress,
    userAgent: req.get('User-Agent'),
    referer: req.get('Referer')
  };
  
  console.log(`üìù USER ACTION: ${JSON.stringify(logData)}`);
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  const start = Date.now();
  
  res.on('finish', () => {
    const duration = Date.now() - start;
    const logLevel = res.statusCode >= 400 ? '‚ùå' : '‚úÖ';
    console.log(`${logLevel} ${req.method} ${req.path} - ${res.statusCode} - ${duration}ms`);
  });
  
  next();
});

// –ú–∞—Ä—à—Ä—É—Ç—ã

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
app.get('/admin.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
app.get('/collect.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'collect.html'));
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
app.get('/api/points', async (req, res) => {
  try {
    const now = new Date();
    const points = await ModelPoint.find({
      scheduledTime: { $lte: now }
    })
    .select('-qrSecret -collectorInfo.telegramData.hash -collectorInfo.ipAddress -collectorInfo.userAgent')
    .lean()
    .exec();
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${points.length} –ø—É–±–ª–∏—á–Ω—ã—Ö —Ç–æ—á–µ–∫`);
    res.json(points);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–µ–∫:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–µ–∫' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
app.get('/api/admin/points', async (req, res) => {
  try {
    const password = req.headers['x-admin-password'] 
      ? decodeURIComponent(req.headers['x-admin-password'])
      : req.headers.authorization;
      
    if (password !== process.env.ADMIN_PASSWORD) {
      logUserAction('ADMIN_ACCESS_DENIED', { ip: req.ip }, req);
      return res.status(401).json({ error: 'Invalid password' });
    }
    
    const points = await ModelPoint.find({}).lean().exec();
    
    logUserAction('ADMIN_POINTS_LOADED', { count: points.length }, req);
    console.log(`üõ°Ô∏è –ê–¥–º–∏–Ω –∑–∞–≥—Ä—É–∑–∏–ª ${points.length} —Ç–æ—á–µ–∫`);
    
    res.json(points);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞:', error);
    res.status(500).json({ error: 'Failed to load points' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–æ—á–∫—É (–∞–¥–º–∏–Ω)
app.post('/api/admin/points', async (req, res) => {
  try {
    const password = req.headers['x-admin-password'] 
      ? decodeURIComponent(req.headers['x-admin-password'])
      : req.headers.authorization;
      
    if (password !== process.env.ADMIN_PASSWORD) {
      logUserAction('ADMIN_CREATE_DENIED', { ip: req.ip }, req);
      return res.status(401).json({ error: 'Invalid password' });
    }

    const { name, coordinates, delayMinutes } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!name || !coordinates || typeof coordinates.lat !== 'number' || typeof coordinates.lng !== 'number') {
      return res.status(400).json({ error: 'Invalid point data' });
    }

    const pointId = Date.now().toString();
    const qrSecret = crypto.randomBytes(16).toString('hex');
    
    const scheduledTime = new Date();
    if (delayMinutes && !isNaN(delayMinutes)) {
      scheduledTime.setMinutes(scheduledTime.getMinutes() + parseInt(delayMinutes));
    }

    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞
    const protocol = req.get('x-forwarded-proto') || req.protocol;
    const host = req.get('host');
    const collectUrl = `${protocol}://${host}/collect.html?id=${pointId}&secret=${qrSecret}`;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
    const qrCodeDataUrl = await QRCode.toDataURL(collectUrl, {
      width: 400,
      margin: 2,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      }
    });

    const newPoint = new ModelPoint({
      id: pointId,
      name: name.trim(),
      coordinates: {
        lat: parseFloat(coordinates.lat),
        lng: parseFloat(coordinates.lng)
      },
      qrCode: qrCodeDataUrl,
      qrSecret,
      scheduledTime
    });

    await newPoint.save();
    
    logUserAction('ADMIN_POINT_CREATED', { 
      pointId, 
      name: name.trim(),
      scheduledTime: scheduledTime.toISOString()
    }, req);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–æ—á–∫–∞: ${name} (ID: ${pointId})`);
    res.json(newPoint);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏:', error);
    res.status(500).json({ error: 'Failed to create point' });
  }
});

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ (—á–µ—Ä–µ–∑ POST body)
app.post('/api/admin/points/create', async (req, res) => {
  try {
    const { name, coordinates, delayMinutes, adminPassword } = req.body;
    
    if (adminPassword !== process.env.ADMIN_PASSWORD) {
      logUserAction('ADMIN_CREATE_ALT_DENIED', { ip: req.ip }, req);
      return res.status(401).json({ error: 'Invalid password' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!name || !coordinates || typeof coordinates.lat !== 'number' || typeof coordinates.lng !== 'number') {
      return res.status(400).json({ error: 'Invalid point data' });
    }

    const pointId = Date.now().toString();
    const qrSecret = crypto.randomBytes(16).toString('hex');
    
    const scheduledTime = new Date();
    if (delayMinutes && !isNaN(delayMinutes)) {
      scheduledTime.setMinutes(scheduledTime.getMinutes() + parseInt(delayMinutes));
    }

    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞
    const protocol = req.get('x-forwarded-proto') || req.protocol;
    const host = req.get('host');
    const collectUrl = `${protocol}://${host}/collect.html?id=${pointId}&secret=${qrSecret}`;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
    const qrCodeDataUrl = await QRCode.toDataURL(collectUrl, {
      width: 400,
      margin: 2
    });

    const newPoint = new ModelPoint({
      id: pointId,
      name: name.trim(),
      coordinates: {
        lat: parseFloat(coordinates.lat),
        lng: parseFloat(coordinates.lng)
      },
      qrCode: qrCodeDataUrl,
      qrSecret,
      scheduledTime
    });

    await newPoint.save();
    
    logUserAction('ADMIN_POINT_CREATED_ALT', { 
      pointId, 
      name: name.trim()
    }, req);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–æ—á–∫–∞ (alt): ${name} (ID: ${pointId})`);
    res.json(newPoint);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ (alt):', error);
    res.status(500).json({ error: 'Failed to create point' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–µ –¥–ª—è —Å–±–æ—Ä–∞
app.get('/api/collect/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { secret } = req.query;

    console.log(`üîç –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—á–∫–µ - ID: ${id}`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!id || !secret) {
      return res.status(400).json({ error: 'Missing point ID or secret' });
    }

    const point = await ModelPoint.findOne({ 
      id: id.trim(), 
      qrSecret: secret.trim() 
    }).lean().exec();
    
    if (!point) {
      console.log(`‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: ID ${id}`);
      logUserAction('COLLECT_INVALID_QR', { pointId: id }, req);
      return res.status(404).json({ error: 'Point not found or invalid QR code' });
    }

    if (point.status === 'collected') {
      console.log(`‚ö†Ô∏è –¢–æ—á–∫–∞ —É–∂–µ —Å–æ–±—Ä–∞–Ω–∞: ${point.name} (ID: ${id})`);
      logUserAction('COLLECT_ALREADY_COLLECTED', { 
        pointId: id, 
        pointName: point.name,
        collectedAt: point.collectedAt 
      }, req);
      return res.status(400).json({ error: 'This model has already been collected' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ç–æ—á–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date();
    if (point.scheduledTime > now) {
      const minutesLeft = Math.ceil((point.scheduledTime - now) / (1000 * 60));
      console.log(`‚è∞ –¢–æ—á–∫–∞ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞: ${point.name}, –æ—Å—Ç–∞–ª–æ—Å—å ${minutesLeft} –º–∏–Ω—É—Ç`);
      return res.status(400).json({ 
        error: `This model will be available in ${minutesLeft} minutes` 
      });
    }

    console.log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–∫–µ –Ω–∞–π–¥–µ–Ω–∞: ${point.name} (ID: ${id})`);
    logUserAction('COLLECT_INFO_LOADED', { 
      pointId: id, 
      pointName: point.name 
    }, req);
    
    res.json({
      id: point.id,
      name: point.name,
      coordinates: point.coordinates
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—á–∫–µ:', error);
    res.status(500).json({ error: 'Error getting point information' });
  }
});

// –°–æ–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –£–ë–†–ê–ù–´ –í–°–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ü–û –†–ê–ó–ú–ï–†–£
app.post('/api/collect/:id', upload.single('selfie'), async (req, res) => {
  try {
    const { id } = req.params;
    const { secret, name, signature, authMethod, telegramData } = req.body;

    console.log(`üì¶ –ü–æ–ø—ã—Ç–∫–∞ —Å–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ - ID: ${id}, –ò–º—è: ${name}, –ú–µ—Ç–æ–¥: ${authMethod}`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!id || !secret || !name?.trim()) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    const point = await ModelPoint.findOne({ 
      id: id.trim(), 
      qrSecret: secret.trim() 
    });
    
    if (!point) {
      console.log(`‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞: ID ${id}`);
      logUserAction('COLLECT_FAILED_NOT_FOUND', { pointId: id }, req);
      return res.status(404).json({ error: 'Point not found or invalid QR code' });
    }

    if (point.status === 'collected') {
      console.log(`‚ùå –¢–æ—á–∫–∞ —É–∂–µ —Å–æ–±—Ä–∞–Ω–∞: ${point.name} (ID: ${id})`);
      logUserAction('COLLECT_FAILED_ALREADY_COLLECTED', { 
        pointId: id, 
        pointName: point.name 
      }, req);
      return res.status(400).json({ error: 'This model has already been collected' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date();
    if (point.scheduledTime > now) {
      const minutesLeft = Math.ceil((point.scheduledTime - now) / (1000 * 60));
      return res.status(400).json({ 
        error: `This model will be available in ${minutesLeft} minutes` 
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–ª—Ñ–∏ - –£–ë–†–ê–ù–´ –í–°–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ü–û –†–ê–ó–ú–ï–†–£
    let selfieBase64 = null;
    if (req.file) {
      console.log(`üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–ª—Ñ–∏: ${req.file.originalname}, —Ä–∞–∑–º–µ—Ä: ${req.file.size} –±–∞–π—Ç (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø —Ñ–∞–π–ª–∞, —Ä–∞–∑–º–µ—Ä –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
      if (!req.file.mimetype.startsWith('image/')) {
        return res.status(400).json({ error: 'Invalid file type, please upload an image' });
      }
      
      selfieBase64 = `data:${req.file.mimetype};base64,${req.file.buffer.toString('base64')}`;
      console.log(`‚úÖ –°–µ–ª—Ñ–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ, —Ä–∞–∑–º–µ—Ä –≤ base64: ${Math.round(selfieBase64.length / 1024)} –ö–ë`);
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
    const collectorInfo = {
      name: name.trim(),
      signature: signature?.trim() || '',
      selfie: selfieBase64,
      authMethod: authMethod || 'manual',
      ipAddress: req.ip || req.connection.remoteAddress,
      userAgent: req.get('User-Agent')
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram –¥–∞–Ω–Ω—ã—Ö
    if (authMethod === 'telegram' && telegramData) {
      try {
        const parsedTelegramData = JSON.parse(telegramData);
        
        console.log(`üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${parsedTelegramData.first_name}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!parsedTelegramData.id || !parsedTelegramData.first_name || !parsedTelegramData.auth_date) {
          console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ Telegram –¥–∞–Ω–Ω—ã—Ö');
          return res.status(400).json({ error: 'Invalid Telegram data: missing required fields' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö Telegram
        const isValid = verifyTelegramAuth(parsedTelegramData, process.env.TELEGRAM_BOT_TOKEN);
        if (!isValid && process.env.TELEGRAM_BOT_TOKEN) {
          console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram –¥–∞–Ω–Ω—ã—Ö');
          logUserAction('COLLECT_TELEGRAM_INVALID', { 
            pointId: id,
            telegramId: parsedTelegramData.id 
          }, req);
          return res.status(400).json({ error: 'Invalid Telegram authentication signature' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        const authAge = Date.now() / 1000 - parsedTelegramData.auth_date;
        if (authAge > 86400) {
          console.error(`‚ùå Telegram –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ: ${authAge} —Å–µ–∫—É–Ω–¥`);
          return res.status(400).json({ error: 'Telegram authentication data is too old' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —ç—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É
        const existingCollection = await ModelPoint.findOne({
          'collectorInfo.telegramData.id': parsedTelegramData.id,
          status: 'collected'
        });

        if (existingCollection) {
          console.log(`‚ö†Ô∏è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${parsedTelegramData.id} —É–∂–µ —Å–æ–±–∏—Ä–∞–ª —Ç–æ—á–∫—É ${existingCollection.id}`);
          // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          logUserAction('COLLECT_TELEGRAM_REUSE', {
            pointId: id,
            telegramId: parsedTelegramData.id,
            previousPoint: existingCollection.id
          }, req);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ hash –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        collectorInfo.telegramData = {
          id: parsedTelegramData.id,
          first_name: parsedTelegramData.first_name,
          last_name: parsedTelegramData.last_name,
          username: parsedTelegramData.username,
          photo_url: parsedTelegramData.photo_url,
          auth_date: parsedTelegramData.auth_date,
          language_code: parsedTelegramData.language_code,
          hash: parsedTelegramData.hash // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        };

        console.log(`‚úÖ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: ${parsedTelegramData.first_name} ${parsedTelegramData.last_name} (@${parsedTelegramData.username})`);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –¥–∞–Ω–Ω—ã—Ö:', error);
        return res.status(400).json({ error: 'Invalid Telegram data format' });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫—É
    point.status = 'collected';
    point.collectedAt = new Date();
    point.collectorInfo = collectorInfo;

    await point.save();
    
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å–±–æ—Ä
    logUserAction('COLLECT_SUCCESS', {
      pointId: id,
      pointName: point.name,
      collectorName: collectorInfo.name,
      authMethod: authMethod,
      telegramId: collectorInfo.telegramData?.id,
      telegramUsername: collectorInfo.telegramData?.username,
      hasSelfie: !!selfieBase64,
      selfieSize: selfieBase64 ? Math.round(selfieBase64.length / 1024) + 'KB' : 'none'
    }, req);
    
    console.log(`üéâ –¢–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞: ${point.name} (ID: ${id}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${collectorInfo.name} —á–µ—Ä–µ–∑ ${authMethod}`);
    
    res.json({ 
      success: true, 
      message: 'Model successfully collected!',
      pointName: point.name,
      collectorName: collectorInfo.name
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:', error);
    logUserAction('COLLECT_ERROR', { 
      pointId: req.params.id, 
      error: error.message 
    }, req);
    res.status(500).json({ error: 'Error collecting model' });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É (–∞–¥–º–∏–Ω)
app.delete('/api/admin/points/:id', async (req, res) => {
  try {
    const password = req.headers['x-admin-password'] 
      ? decodeURIComponent(req.headers['x-admin-password'])
      : req.headers.authorization;
      
    if (password !== process.env.ADMIN_PASSWORD) {
      logUserAction('ADMIN_DELETE_DENIED', { ip: req.ip }, req);
      return res.status(401).json({ error: 'Invalid password' });
    }

    const { id } = req.params;
    const deletedPoint = await ModelPoint.findOneAndDelete({ id: id.trim() });
    
    if (!deletedPoint) {
      return res.status(404).json({ error: 'Point not found' });
    }

    logUserAction('ADMIN_POINT_DELETED', { 
      pointId: id, 
      pointName: deletedPoint.name 
    }, req);
    
    console.log(`üóëÔ∏è –¢–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ${deletedPoint.name} (ID: ${id})`);
    res.json({ success: true, message: 'Point deleted' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏:', error);
    res.status(500).json({ error: 'Failed to delete point' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
app.get('/api/admin/stats', async (req, res) => {
  try {
    const password = req.headers['x-admin-password'] 
      ? decodeURIComponent(req.headers['x-admin-password'])
      : req.headers.authorization;
      
    if (password !== process.env.ADMIN_PASSWORD) {
      return res.status(401).json({ error: 'Invalid password' });
    }

    const now = new Date();
    const stats = await ModelPoint.aggregate([
      {
        $group: {
          _id: null,
          total: { $sum: 1 },
          collected: {
            $sum: {
              $cond: [{ $eq: ['$status', 'collected'] }, 1, 0]
            }
          },
          available: {
            $sum: {
              $cond: [{ $eq: ['$status', 'available'] }, 1, 0]
            }
          },
          scheduled: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $eq: ['$status', 'available'] },
                    { $gt: ['$scheduledTime', now] }
                  ]
                },
                1,
                0
              ]
            }
          },
          manualAuth: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $eq: ['$status', 'collected'] },
                    { $eq: ['$collectorInfo.authMethod', 'manual'] }
                  ]
                },
                1,
                0
              ]
            }
          },
          telegramAuth: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $eq: ['$status', 'collected'] },
                    { $eq: ['$collectorInfo.authMethod', 'telegram'] }
                  ]
                },
                1,
                0
              ]
            }
          },
          withSelfie: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $eq: ['$status', 'collected'] },
                    { $ne: ['$collectorInfo.selfie', null] },
                    { $ne: ['$collectorInfo.selfie', ''] }
                  ]
                },
                1,
                0
              ]
            }
          }
        }
      }
    ]);

    const result = stats[0] || {
      total: 0,
      collected: 0,
      available: 0,
      scheduled: 0,
      manualAuth: 0,
      telegramAuth: 0,
      withSelfie: 0
    };

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const recentCollections = await ModelPoint.find({
      status: 'collected',
      collectedAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
    }).countDocuments();

    result.recentCollections = recentCollections;

    logUserAction('ADMIN_STATS_VIEWED', result, req);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${result.total} –≤—Å–µ–≥–æ, ${result.collected} —Å–æ–±—Ä–∞–Ω–æ`);
    
    res.json(result);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: 'Failed to get statistics' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
app.get('/api/point/:id/info', async (req, res) => {
  try {
    const { id } = req.params;
    const point = await ModelPoint.findOne({ id: id.trim() })
      .select('-qrSecret -collectorInfo.telegramData.hash -collectorInfo.ipAddress -collectorInfo.userAgent')
      .lean()
      .exec();
    
    if (!point) {
      return res.status(404).json({ error: '–¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    logUserAction('POINT_INFO_VIEWED', { pointId: id }, req);
    res.json(point);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—á–∫–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (webhook endpoint)
app.post('/telegram-auth', (req, res) => {
  try {
    console.log('üì® Telegram auth webhook –ø–æ–ª—É—á–µ–Ω:', req.body);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (req.body && req.body.id) {
      logUserAction('TELEGRAM_AUTH_WEBHOOK', {
        telegramId: req.body.id,
        firstName: req.body.first_name,
        username: req.body.username
      }, req);
      
      console.log(`‚úÖ Telegram webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${req.body.first_name}`);
    }
    
    res.json({ success: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram auth webhook:', error);
    res.status(500).json({ error: 'Error processing authentication' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
app.get('/api/admin/top-collectors', async (req, res) => {
  try {
    const password = req.headers['x-admin-password'] 
      ? decodeURIComponent(req.headers['x-admin-password'])
      : req.headers.authorization;
      
    if (password !== process.env.ADMIN_PASSWORD) {
      return res.status(401).json({ error: 'Invalid password' });
    }

    const topCollectors = await ModelPoint.aggregate([
      { $match: { status: 'collected' } },
      {
        $group: {
          _id: {
            name: '$collectorInfo.name',
            telegramId: '$collectorInfo.telegramData.id',
            authMethod: '$collectorInfo.authMethod'
          },
          count: { $sum: 1 },
          lastCollection: { $max: '$collectedAt' },
          firstCollection: { $min: '$collectedAt' }
        }
      },
      { $sort: { count: -1 } },
      { $limit: 10 }
    ]);

    logUserAction('ADMIN_TOP_COLLECTORS_VIEWED', { count: topCollectors.length }, req);
    res.json(topCollectors);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤:', error);
    res.status(500).json({ error: 'Failed to get top collectors' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
app.get('/api/admin/activity', async (req, res) => {
  try {
    const password = req.headers['x-admin-password'] 
      ? decodeURIComponent(req.headers['x-admin-password'])
      : req.headers.authorization;
      
    if (password !== process.env.ADMIN_PASSWORD) {
      return res.status(401).json({ error: 'Invalid password' });
    }

    const { days = 7 } = req.query;
    const daysAgo = new Date();
    daysAgo.setDate(daysAgo.getDate() - parseInt(days));

    const activity = await ModelPoint.aggregate([
      {
        $match: {
          $or: [
            { createdAt: { $gte: daysAgo } },
            { collectedAt: { $gte: daysAgo } }
          ]
        }
      },
      {
        $facet: {
          created: [
            { $match: { createdAt: { $gte: daysAgo } } },
            {
              $group: {
                _id: {
                  $dateToString: { format: '%Y-%m-%d', date: '$createdAt' }
                },
                count: { $sum: 1 }
              }
            },
            { $sort: { _id: 1 } }
          ],
          collected: [
            { 
              $match: { 
                status: 'collected',
                collectedAt: { $gte: daysAgo } 
              } 
            },
            {
              $group: {
                _id: {
                  $dateToString: { format: '%Y-%m-%d', date: '$collectedAt' }
                },
                count: { $sum: 1 }
              }
            },
            { $sort: { _id: 1 } }
          ]
        }
      }
    ]);

    logUserAction('ADMIN_ACTIVITY_VIEWED', { days: parseInt(days) }, req);
    res.json(activity[0]);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    res.status(500).json({ error: 'Failed to get activity data' });
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–∞–¥–º–∏–Ω)
app.get('/api/admin/export', async (req, res) => {
  try {
    const password = req.headers['x-admin-password'] 
      ? decodeURIComponent(req.headers['x-admin-password'])
      : req.headers.authorization;
      
    if (password !== process.env.ADMIN_PASSWORD) {
      return res.status(401).json({ error: 'Invalid password' });
    }

    const { format = 'json' } = req.query;
    
    const points = await ModelPoint.find({})
      .select('-qrSecret -collectorInfo.telegramData.hash')
      .lean()
      .exec();

    logUserAction('ADMIN_DATA_EXPORTED', { 
      format, 
      pointsCount: points.length 
    }, req);

    if (format === 'csv') {
      // –ü—Ä–æ—Å—Ç–æ–π CSV —ç–∫—Å–ø–æ—Ä—Ç
      const csvHeader = 'ID,Name,Status,Created,Collected,Collector,AuthMethod,Lat,Lng\n';
      const csvData = points.map(point => {
        return [
          point.id,
          `"${point.name}"`,
          point.status,
          point.createdAt?.toISOString() || '',
          point.collectedAt?.toISOString() || '',
          `"${point.collectorInfo?.name || ''}"`,
          point.collectorInfo?.authMethod || '',
          point.coordinates.lat,
          point.coordinates.lng
        ].join(',');
      }).join('\n');

      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', 'attachment; filename="plasticboy-export.csv"');
      res.send(csvHeader + csvData);
    } else {
      res.json({
        exportDate: new Date().toISOString(),
        totalPoints: points.length,
        data: points
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ error: 'Failed to export data' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    version: '2.1.0',
    environment: process.env.NODE_ENV || 'development',
    features: {
      telegramAuth: {
        enabled: !!process.env.TELEGRAM_BOT_TOKEN,
        botUsername: process.env.TELEGRAM_BOT_USERNAME || 'not configured',
        configured: !!(process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_BOT_USERNAME)
      },
      mongodb: {
        connected: mongoose.connection.readyState === 1,
        host: mongoose.connection.host,
        name: mongoose.connection.name
      },
      admin: {
        configured: !!process.env.ADMIN_PASSWORD
      },
      uploads: {
        sizeLimits: 'removed',
        allowedFormats: 'all images',
        maxFileSize: 'unlimited'
      }
    },
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    nodeVersion: process.version
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use('*', (req, res) => {
  console.log(`‚ùå 404: ${req.method} ${req.originalUrl}`);
  res.status(404).json({ 
    error: 'Endpoint not found',
    path: req.originalUrl,
    method: req.method
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—à–∏–±–∫–∏
  logUserAction('SERVER_ERROR', {
    error: error.message,
    stack: error.stack,
    path: req.path,
    method: req.method
  }, req);

  res.status(500).json({ 
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'
  });
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('üõë SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  try {
    await mongoose.connection.close();
    console.log('‚úÖ MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error);
    process.exit(1);
  }
});

process.on('SIGINT', async () => {
  console.log('üõë SIGINT –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  try {
    await mongoose.connection.close();
    console.log('‚úÖ MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error);
    process.exit(1);
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log('üöÄ ==========================================');
  console.log(`üéØ PlasticBoy v2.1.0 –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('üöÄ ==========================================');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  console.log('\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
  console.log(`   üåê URL: http://localhost:${PORT}`);
  console.log(`   üóÑÔ∏è  MongoDB: ${process.env.MONGODB_URI ? '‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' : '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}`);
  console.log(`   üõ°Ô∏è  –ê–¥–º–∏–Ω: ${process.env.ADMIN_PASSWORD ? '‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
  console.log(`   üì∏ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–µ–ª—Ñ–∏: ‚ùå —É–±—Ä–∞–Ω—ã (–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_BOT_USERNAME) {
    console.log('   ‚úÖ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    console.log(`      ü§ñ Bot: @${process.env.TELEGRAM_BOT_USERNAME}`);
    console.log(`      üîë Token: ${process.env.TELEGRAM_BOT_TOKEN.substring(0, 10)}...`);
  } else if (process.env.TELEGRAM_BOT_TOKEN) {
    console.log('   ‚ö†Ô∏è  Telegram BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ BOT_USERNAME –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  } else if (process.env.TELEGRAM_BOT_USERNAME) {
    console.log('   ‚ö†Ô∏è  Telegram BOT_USERNAME —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  } else {
    console.log('   ‚ö†Ô∏è  Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    console.log('      üìö –°–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤ README.md');
  }
  
  console.log('\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:');
  console.log(`   üè† –ì–ª–∞–≤–Ω–∞—è: http://localhost:${PORT}`);
  console.log(`   üõ°Ô∏è  –ê–¥–º–∏–Ω: http://localhost:${PORT}/admin.html`);
  console.log(`   ‚ù§Ô∏è  Health: http://localhost:${PORT}/health`);
  console.log('üöÄ ==========================================\n');
});

module.exports = app;
