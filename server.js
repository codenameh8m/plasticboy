const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const path = require('path');
const QRCode = require('qrcode');
const crypto = require('crypto');
const cors = require('cors');
const axios = require('axios');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));
app.use(express.static('public'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB
  }
});

// === TELEGRAM BOT INTEGRATION ===
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async function sendTelegramMessage(chatId, message, options = {}) {
  if (!BOT_TOKEN) return;
  
  try {
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: chatId,
      text: message,
      parse_mode: 'Markdown',
      ...options
    });
    console.log(`üì± Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data || error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –∫–æ–º–∞–Ω–¥
async function handleTelegramUpdate(update) {
  try {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram:', JSON.stringify(update, null, 2));
    
    if (update.message) {
      const message = update.message;
      const chatId = message.chat.id;
      const text = message.text;
      const user = message.from;
      
      console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.first_name} (${user.id}): ${text}`);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (text && text.startsWith('/')) {
        const command = text.split(' ')[0].substring(1);
        
        switch (command) {
          case 'start':
            const welcomeMessage = `üéØ *PlasticBoy - Almaty Edition*\n\n–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ø–æ —Å–±–æ—Ä—É 3D –º–æ–¥–µ–ª–µ–π –≤ –ê–ª–º–∞—Ç—ã!\n\nüéÆ *–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*\n‚Ä¢ –ù–∞–π–¥–∏ QR-–∫–æ–¥—ã –º–æ–¥–µ–ª–µ–π –ø–æ –≥–æ—Ä–æ–¥—É\n‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π –∏—Ö –∏ —Å–æ–±–µ—Ä–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é\n‚Ä¢ –°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n\n–£–¥–∞—á–Ω–æ–π –æ—Ö–æ—Ç—ã! üéØ`;
            
            await sendTelegramMessage(chatId, welcomeMessage, {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', web_app: { url: process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000' } }],
                  [
                    { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥', callback_data: 'leaderboard' },
                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
                  ]
                ]
              }
            });
            break;
            
          case 'help':
            const helpMessage = `‚ùì *–ü–æ–º–æ—â—å PlasticBoy*\n\nüéØ *–¶–µ–ª—å –∏–≥—Ä—ã:* –°–æ–±–µ—Ä–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ 3D –º–æ–¥–µ–ª–µ–π!\n\nüì± *–ö–æ–º–∞–Ω–¥—ã:*\n/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/map - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É\n/leaderboard - –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤\n/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã\n/help - –≠—Ç–∞ –ø–æ–º–æ—â—å\n\n–£–¥–∞—á–∏! üöÄ`;
            await sendTelegramMessage(chatId, helpMessage);
            break;
            
          case 'map':
            const mapMessage = `üó∫Ô∏è *–ö–∞—Ä—Ç–∞ PlasticBoy*\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ 3D –º–æ–¥–µ–ª–µ–π –≤ –ê–ª–º–∞—Ç—ã!\n\nüéØ –ù–∞ –∫–∞—Ä—Ç–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ:\n‚Ä¢ üü¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏\n‚Ä¢ üî¥ –£–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏\n‚Ä¢ üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ`;
            
            await sendTelegramMessage(chatId, mapMessage, {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', web_app: { url: process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000' } }],
                  [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }]
                ]
              }
            });
            break;
            
          case 'leaderboard':
            const leaderboardMessage = `üèÜ *–†–µ–π—Ç–∏–Ω–≥ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤*\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ PlasticBoy!\n\n‚≠ê –í —Ä–µ–π—Ç–∏–Ω–≥–µ —É—á–∞—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Telegram\n\nü•áü•àü•â –ö—Ç–æ —Å–æ–±–µ—Ä–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π?`;
            
            await sendTelegramMessage(chatId, leaderboardMessage, {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üèÜ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–π—Ç–∏–Ω–≥', url: `${process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000'}/leaderboard.html` }],
                  [{ text: 'üó∫Ô∏è –ö –∫–∞—Ä—Ç–µ', web_app: { url: process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000' } }]
                ]
              }
            });
            break;
            
          case 'stats':
            try {
              const totalPoints = await ModelPoint.countDocuments();
              const collectedPoints = await ModelPoint.countDocuments({ status: 'collected' });
              const availablePoints = totalPoints - collectedPoints;
              
              // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
              const telegramStats = await ModelPoint.aggregate([
                {
                  $match: {
                    status: 'collected',
                    'collectorInfo.authMethod': 'telegram'
                  }
                },
                {
                  $group: {
                    _id: null,
                    telegramCollections: { $sum: 1 },
                    uniqueTelegramUsers: { $addToSet: '$collectorInfo.telegramData.id' }
                  }
                }
              ]);
              
              const tgStats = telegramStats[0] || { telegramCollections: 0, uniqueTelegramUsers: [] };
              const telegramUsers = tgStats.uniqueTelegramUsers.length;
              const telegramCollections = tgStats.telegramCollections;
              
              const statsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PlasticBoy*\n\nüì¶ –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: *${totalPoints}*\nüü¢ –î–æ—Å—Ç—É–ø–Ω–æ: *${availablePoints}*\nüî¥ –°–æ–±—Ä–∞–Ω–æ: *${collectedPoints}*\n\nüì± *Telegram –∏–≥—Ä–æ–∫–∏:*\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: *${telegramUsers}*\nüéØ –°–æ–±—Ä–∞–Ω–æ –∏–º–∏: *${telegramCollections}*\n\nüéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∏–≥—Ä–µ!`;
              
              await sendTelegramMessage(chatId, statsMessage, {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üó∫Ô∏è –ò–≥—Ä–∞—Ç—å', web_app: { url: process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000' } }],
                    [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥', url: `${process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000'}/leaderboard.html` }]
                  ]
                }
              });
            } catch (error) {
              await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            }
            break;
            
          default:
            const unknownMessage = `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /${command}\n\nüì± *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/map - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É\n/leaderboard - –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤\n/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã\n/help - –ü–æ–º–æ—â—å\n\nüéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!`;
            await sendTelegramMessage(chatId, unknownMessage, {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', web_app: { url: process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000' } }],
                  [
                    { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥', callback_data: 'leaderboard' },
                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
                  ]
                ]
              }
            });
        }
      } else if (text) {
        // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await sendTelegramMessage(chatId, `–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üó∫Ô∏è –ò–≥—Ä–∞—Ç—å', web_app: { url: process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000' } }]
            ]
          }
        });
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    if (update.callback_query) {
      const callbackQuery = update.callback_query;
      const chatId = callbackQuery.message.chat.id;
      const data = callbackQuery.data;
      const messageId = callbackQuery.message.message_id;
      
      console.log(`üîò Callback: ${data} –æ—Ç ${callbackQuery.from.first_name}`);
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
      try {
        await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`, {
          callback_query_id: callbackQuery.id
        });
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ answerCallbackQuery:', error);
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
      switch (data) {
        case 'leaderboard':
          await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/editMessageText`, {
            chat_id: chatId,
            message_id: messageId,
            text: 'üèÜ *–†–µ–π—Ç–∏–Ω–≥ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤*\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–æ–≤!',
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üèÜ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–π—Ç–∏–Ω–≥', url: `${process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000'}/leaderboard.html` }],
                [{ text: 'üó∫Ô∏è –ö –∫–∞—Ä—Ç–µ', web_app: { url: process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000' } }]
              ]
            }
          });
          break;
          
        case 'stats':
          try {
            const totalPoints = await ModelPoint.countDocuments();
            const collectedPoints = await ModelPoint.countDocuments({ status: 'collected' });
            const availablePoints = totalPoints - collectedPoints;
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const telegramStats = await ModelPoint.aggregate([
              {
                $match: {
                  status: 'collected',
                  'collectorInfo.authMethod': 'telegram'
                }
              },
              {
                $group: {
                  _id: null,
                  telegramCollections: { $sum: 1 },
                  uniqueTelegramUsers: { $addToSet: '$collectorInfo.telegramData.id' }
                }
              }
            ]);
            
            const tgStats = telegramStats[0] || { telegramCollections: 0, uniqueTelegramUsers: [] };
            const telegramUsers = tgStats.uniqueTelegramUsers.length;
            const telegramCollections = tgStats.telegramCollections;
            
            await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/editMessageText`, {
              chat_id: chatId,
              message_id: messageId,
              text: `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã*\n\nüì¶ –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: *${totalPoints}*\nüü¢ –î–æ—Å—Ç—É–ø–Ω–æ: *${availablePoints}*\nüî¥ –°–æ–±—Ä–∞–Ω–æ: *${collectedPoints}*\n\nüì± *Telegram –∏–≥—Ä–æ–∫–∏:*\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: *${telegramUsers}*\nüéØ –°–æ–±—Ä–∞–Ω–æ –∏–º–∏: *${telegramCollections}*`,
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üó∫Ô∏è –ò–≥—Ä–∞—Ç—å', web_app: { url: process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000' } }],
                  [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥', url: `${process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000'}/leaderboard.html` }]
                ]
              }
            });
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è callback:', error);
          }
          break;
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
  }
}

// === WEBHOOK –ú–ê–†–®–†–£–¢ –î–õ–Ø TELEGRAM ===
if (BOT_TOKEN) {
  app.post(`/${BOT_TOKEN}`, async (req, res) => {
    console.log('üì• Webhook –ø–æ–ª—É—á–µ–Ω –æ—Ç Telegram');
    
    try {
      await handleTelegramUpdate(req.body);
      res.status(200).send('OK');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
      res.status(500).send('Error');
    }
  });
  
  console.log(`üîó Telegram webhook –º–∞—Ä—à—Ä—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: /${BOT_TOKEN}`);
} else {
  console.log('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/plasticboy', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –ú–æ–¥–µ–ª—å —Ç–æ—á–∫–∏ —Å–±–æ—Ä–∞
const modelPointSchema = new mongoose.Schema({
  id: { type: String, required: true, unique: true, index: true },
  name: { type: String, required: true },
  coordinates: {
    lat: { type: Number, required: true },
    lng: { type: Number, required: true }
  },
  qrCode: { type: String, required: true },
  qrSecret: { type: String, required: true, index: true },
  status: { type: String, enum: ['available', 'collected'], default: 'available', index: true },
  createdAt: { type: Date, default: Date.now, index: true },
  scheduledTime: { type: Date, default: Date.now, index: true },
  collectedAt: { type: Date },
  collectorInfo: {
    name: String,
    signature: String,
    selfie: String,
    authMethod: { type: String, enum: ['manual', 'telegram'], default: 'manual' },
    telegramData: {
      id: Number,
      first_name: String,
      last_name: String,
      username: String,
      photo_url: String,
      auth_date: Number,
      hash: String
    }
  }
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
modelPointSchema.index({ id: 1, qrSecret: 1 });
modelPointSchema.index({ status: 1, scheduledTime: 1 });
modelPointSchema.index({ collectedAt: 1 });
modelPointSchema.index({ 'collectorInfo.telegramData.id': 1 });

const ModelPoint = mongoose.model('ModelPoint', modelPointSchema);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function logUserAction(action, data, req) {
  const timestamp = new Date().toISOString();
  const ip = req.ip || req.connection.remoteAddress || 'unknown';
  console.log(`üìù [${timestamp}] ${action} - IP: ${ip} - Data:`, JSON.stringify(data));
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è
function checkAdminPassword(req) {
  let password = null;
  
  if (req.headers.authorization) {
    password = req.headers.authorization;
  }
  
  if (!password && req.headers['x-admin-password']) {
    password = decodeURIComponent(req.headers['x-admin-password']);
  }
  
  if (!password && req.get('Authorization')) {
    password = req.get('Authorization');
  }
  
  const isValid = password && password === process.env.ADMIN_PASSWORD;
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è:', isValid ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
  
  return isValid;
}

// Health check
app.get('/health', async (req, res) => {
  try {
    const dbState = mongoose.connection.readyState === 1 ? 'connected' : 'disconnected';
    const totalPoints = await ModelPoint.countDocuments();
    
    res.json({
      status: 'OK',
      timestamp: new Date().toISOString(),
      database: dbState,
      totalPoints,
      environment: process.env.NODE_ENV || 'development',
      telegramWebhook: BOT_TOKEN ? 'configured' : 'not configured'
    });
  } catch (error) {
    res.status(500).json({
      status: 'ERROR',
      timestamp: new Date().toISOString(),
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ —Ç–æ—á–∫–∏
app.get('/api/points', async (req, res) => {
  try {
    const now = new Date();
    
    const points = await ModelPoint.find({
      scheduledTime: { $lte: now }
    })
    .select('-qrSecret')
    .lean()
    .exec();
    
    logUserAction('POINTS_LOADED', { count: points.length }, req);
    console.log(`üìç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${points.length} –ø—É–±–ª–∏—á–Ω—ã—Ö —Ç–æ—á–µ–∫`);
    
    res.json(points);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫:', error);
    res.status(500).json({ error: 'Failed to load points' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–µ –¥–ª—è —Å–±–æ—Ä–∞
app.get('/api/collect/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { secret } = req.query;
    
    if (!secret) {
      return res.status(400).json({ error: 'Secret is required' });
    }
    
    const point = await ModelPoint.findOne({
      id: id.trim(),
      qrSecret: secret.trim()
    }).lean().exec();
    
    if (!point) {
      logUserAction('COLLECT_NOT_FOUND', { pointId: id }, req);
      return res.status(404).json({ error: 'Point not found or invalid secret' });
    }
    
    if (point.status === 'collected') {
      logUserAction('COLLECT_ALREADY_COLLECTED', { pointId: id }, req);
      return res.status(409).json({ error: 'Point already collected' });
    }
    
    const now = new Date();
    if (new Date(point.scheduledTime) > now) {
      logUserAction('COLLECT_NOT_READY', { 
        pointId: id, 
        scheduledTime: point.scheduledTime,
        currentTime: now
      }, req);
      return res.status(423).json({ 
        error: 'Point not ready yet',
        scheduledTime: point.scheduledTime
      });
    }
    
    logUserAction('COLLECT_INFO_VIEWED', { pointId: id }, req);
    
    res.json({
      id: point.id,
      name: point.name,
      coordinates: point.coordinates,
      scheduledTime: point.scheduledTime
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—á–∫–µ:', error);
    res.status(500).json({ error: 'Failed to get point info' });
  }
});

// –°–æ–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å
app.post('/api/collect/:id', upload.single('selfie'), async (req, res) => {
  try {
    const { id } = req.params;
    const { secret, name, signature, authMethod, telegramData } = req.body;
    
    console.log('üì¶ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –º–æ–¥–µ–ª–∏:', { id, authMethod });
    
    if (!secret || !name) {
      return res.status(400).json({ error: 'Secret and name are required' });
    }
    
    const point = await ModelPoint.findOne({
      id: id.trim(),
      qrSecret: secret.trim()
    });
    
    if (!point) {
      logUserAction('COLLECT_FAILED_NOT_FOUND', { pointId: id }, req);
      return res.status(404).json({ error: 'Point not found or invalid secret' });
    }
    
    if (point.status === 'collected') {
      logUserAction('COLLECT_FAILED_ALREADY_COLLECTED', { pointId: id }, req);
      return res.status(409).json({ error: 'Point already collected' });
    }
    
    const now = new Date();
    if (new Date(point.scheduledTime) > now) {
      logUserAction('COLLECT_FAILED_NOT_READY', { 
        pointId: id, 
        scheduledTime: point.scheduledTime 
      }, req);
      return res.status(423).json({ 
        error: 'Point not ready yet',
        scheduledTime: point.scheduledTime
      });
    }
    
    const collectorInfo = {
      name: name.trim(),
      signature: signature ? signature.trim() : '',
      authMethod: authMethod || 'manual'
    };
    
    if (authMethod === 'telegram' && telegramData) {
      try {
        const parsedTelegramData = typeof telegramData === 'string' 
          ? JSON.parse(telegramData) 
          : telegramData;
        
        if (parsedTelegramData.id && parsedTelegramData.first_name && parsedTelegramData.auth_date) {
          collectorInfo.telegramData = {
            id: parsedTelegramData.id,
            first_name: parsedTelegramData.first_name,
            last_name: parsedTelegramData.last_name || '',
            username: parsedTelegramData.username || '',
            photo_url: parsedTelegramData.photo_url || '',
            auth_date: parsedTelegramData.auth_date,
            hash: parsedTelegramData.hash || ''
          };
          
          console.log('‚úÖ Telegram –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', parsedTelegramData.first_name);
        } else {
          console.warn('‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ Telegram –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º');
          collectorInfo.authMethod = 'manual';
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –¥–∞–Ω–Ω—ã—Ö:', error);
        collectorInfo.authMethod = 'manual';
      }
    }
    
    if (req.file) {
      try {
        const base64Image = `data:${req.file.mimetype};base64,${req.file.buffer.toString('base64')}`;
        collectorInfo.selfie = base64Image;
        console.log('üì∏ –°–µ–ª—Ñ–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä:', req.file.size);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–ª—Ñ–∏:', error);
      }
    }
    
    point.status = 'collected';
    point.collectedAt = now;
    point.collectorInfo = collectorInfo;
    
    await point.save();
    
    const logData = {
      pointId: id,
      pointName: point.name,
      collectorName: collectorInfo.name,
      authMethod: collectorInfo.authMethod,
      hasSelfie: !!collectorInfo.selfie,
      telegramUserId: collectorInfo.telegramData?.id
    };
    
    logUserAction('COLLECT_SUCCESS', logData, req);
    console.log(`üéØ –ú–æ–¥–µ–ª—å —Å–æ–±—Ä–∞–Ω–∞: ${point.name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${collectorInfo.name}`);
    
    res.json({
      success: true,
      message: 'Point collected successfully',
      point: {
        id: point.id,
        name: point.name,
        collectedAt: point.collectedAt,
        collectorName: collectorInfo.name
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:', error);
    res.status(500).json({ error: 'Failed to collect point' });
  }
});

// ============== –ê–î–ú–ò–ù–°–ö–ò–ï –ú–ê–†–®–†–£–¢–´ ==============

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
app.get('/api/admin/points', async (req, res) => {
  try {
    if (!checkAdminPassword(req)) {
      logUserAction('ADMIN_ACCESS_DENIED', { ip: req.ip }, req);
      return res.status(401).json({ error: 'Invalid admin password' });
    }
    
    const points = await ModelPoint.find({}).lean().exec();
    
    logUserAction('ADMIN_POINTS_LOADED', { count: points.length }, req);
    console.log(`üõ°Ô∏è –ê–¥–º–∏–Ω –∑–∞–≥—Ä—É–∑–∏–ª ${points.length} —Ç–æ—á–µ–∫`);
    
    res.json(points);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞:', error);
    res.status(500).json({ error: 'Failed to load points' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–æ—á–∫—É (–∞–¥–º–∏–Ω)
app.post('/api/admin/points', async (req, res) => {
  try {
    if (!checkAdminPassword(req)) {
      logUserAction('ADMIN_CREATE_DENIED', { ip: req.ip }, req);
      return res.status(401).json({ error: 'Invalid admin password' });
    }

    const { name, coordinates, delayMinutes } = req.body;
    
    if (!name || !coordinates || typeof coordinates.lat !== 'number' || typeof coordinates.lng !== 'number') {
      return res.status(400).json({ error: 'Invalid point data' });
    }

    const pointId = Date.now().toString();
    const qrSecret = crypto.randomBytes(16).toString('hex');
    
    const scheduledTime = new Date();
    if (delayMinutes && !isNaN(delayMinutes)) {
      scheduledTime.setMinutes(scheduledTime.getMinutes() + parseInt(delayMinutes));
    }

    const protocol = req.get('x-forwarded-proto') || req.protocol;
    const host = req.get('host');
    const collectUrl = `${protocol}://${host}/collect.html?id=${pointId}&secret=${qrSecret}`;
    
    const qrCodeDataUrl = await QRCode.toDataURL(collectUrl, {
      width: 400,
      margin: 2,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      }
    });

    const newPoint = new ModelPoint({
      id: pointId,
      name: name.trim(),
      coordinates: {
        lat: parseFloat(coordinates.lat),
        lng: parseFloat(coordinates.lng)
      },
      qrCode: qrCodeDataUrl,
      qrSecret,
      scheduledTime
    });

    await newPoint.save();
    
    logUserAction('ADMIN_POINT_CREATED', { 
      pointId, 
      name: name.trim(),
      scheduledTime: scheduledTime.toISOString()
    }, req);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–æ—á–∫–∞: ${name} (ID: ${pointId})`);
    res.json(newPoint);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏:', error);
    res.status(500).json({ error: 'Failed to create point' });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É (–∞–¥–º–∏–Ω)
app.delete('/api/admin/points/:id', async (req, res) => {
  try {
    if (!checkAdminPassword(req)) {
      logUserAction('ADMIN_DELETE_DENIED', { ip: req.ip, pointId: req.params.id }, req);
      return res.status(401).json({ error: 'Invalid admin password' });
    }

    const { id } = req.params;
    const deletedPoint = await ModelPoint.findOneAndDelete({ id: id.trim() });
    
    if (!deletedPoint) {
      return res.status(404).json({ error: 'Point not found' });
    }

    logUserAction('ADMIN_POINT_DELETED', { 
      pointId: id, 
      pointName: deletedPoint.name 
    }, req);
    
    console.log(`üóëÔ∏è –¢–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ${deletedPoint.name} (ID: ${id})`);
    res.json({ success: true, message: 'Point deleted successfully' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏:', error);
    res.status(500).json({ error: 'Failed to delete point' });
  }
});

// ============== TELEGRAM –ú–ê–†–®–†–£–¢–´ ==============

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/telegram/leaderboard', async (req, res) => {
  try {
    console.log('üèÜ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const leaderboard = await ModelPoint.aggregate([
      {
        $match: {
          status: 'collected',
          'collectorInfo.authMethod': 'telegram',
          'collectorInfo.telegramData.id': { $exists: true, $ne: null }
        }
      },
      {
        $group: {
          _id: '$collectorInfo.telegramData.id',
          totalCollections: { $sum: 1 },
          firstCollection: { $min: '$collectedAt' },
          lastCollection: { $max: '$collectedAt' },
          userData: { $first: '$collectorInfo.telegramData' }
        }
      },
      {
        $project: {
          _id: 0,
          telegramId: '$_id',
          totalCollections: 1,
          firstCollection: 1,
          lastCollection: 1,
          id: '$userData.id',
          first_name: '$userData.first_name',
          last_name: '$userData.last_name',
          username: '$userData.username',
          photo_url: '$userData.photo_url'
        }
      },
      {
        $sort: { totalCollections: -1, firstCollection: 1 }
      },
      {
        $limit: 50
      }
    ]);

    const stats = await ModelPoint.aggregate([
      {
        $match: {
          status: 'collected',
          'collectorInfo.authMethod': 'telegram'
        }
      },
      {
        $group: {
          _id: null,
          totalCollections: { $sum: 1 },
          uniqueUsers: { $addToSet: '$collectorInfo.telegramData.id' }
        }
      },
      {
        $project: {
          _id: 0,
          totalCollections: 1,
          totalUsers: { $size: '$uniqueUsers' }
        }
      }
    ]);

    const statsResult = stats[0] || { totalCollections: 0, totalUsers: 0 };

    const response = {
      leaderboard,
      stats: statsResult,
      timestamp: new Date().toISOString()
    };

    logUserAction('TELEGRAM_LEADERBOARD_VIEWED', { 
      leaderboardCount: leaderboard.length,
      ...statsResult 
    }, req);
    
    console.log(`üèÜ –†–µ–π—Ç–∏–Ω–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: ${leaderboard.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${statsResult.totalCollections} —Å–±–æ—Ä–æ–≤`);
    
    res.json(response);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
    res.status(500).json({ error: 'Failed to load leaderboard' });
  }
});

// ============== –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ ==============

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/admin', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

app.get('/admin.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

app.get('/collect.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'collect.html'));
});

app.get('/leaderboard.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'leaderboard.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
  console.log('‚ùå 404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', req.url);
  res.status(404).json({ error: 'Page not found' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  res.status(500).json({ 
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? error.message : undefined
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    await connectDB();
    
    app.listen(PORT, () => {
      console.log('üöÄ PlasticBoy Server –∑–∞–ø—É—â–µ–Ω');
      console.log(`üìç URL: http://localhost:${PORT}`);
      console.log(`üõ°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:${PORT}/admin.html`);
      console.log(`üèÜ –†–µ–π—Ç–∏–Ω–≥: http://localhost:${PORT}/leaderboard.html`);
      console.log(`üîê –ê–¥–º–∏–Ω –ø–∞—Ä–æ–ª—å: ${process.env.ADMIN_PASSWORD ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!'}`);
      console.log(`üì± Telegram –±–æ—Ç: ${process.env.TELEGRAM_BOT_USERNAME ? process.env.TELEGRAM_BOT_USERNAME : '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
      
      if (BOT_TOKEN) {
        console.log(`üîó Telegram webhook: /${BOT_TOKEN}`);
        console.log(`üì± Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ê–ö–¢–ò–í–ù–ê`);
      } else {
        console.log(`üì± Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ù–ï –ù–ê–°–¢–†–û–ï–ù–ê`);
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
};

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üìõ SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  mongoose.connection.close();
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üìõ SIGINT –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  mongoose.connection.close();
  process.exit(0);
});

startServer();
