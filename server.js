const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const multer = require('multer');
const QRCode = require('qrcode');
const path = require('path');
const compression = require('compression');

const app = express();
const PORT = process.env.PORT || 3000;

// –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–´–ï Middleware
app.use(compression({
    level: 6,
    threshold: 1024,
    filter: (req, res) => {
        if (req.headers['x-no-compression']) return false;
        return compression.filter(req, res);
    }
}));

app.use(cors({
    origin: true,
    credentials: true,
    optionsSuccessStatus: 200,
    methods: ['GET', 'POST', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Admin-Password', 'Accept', 'Cache-Control'],
    exposedHeaders: ['ETag', 'Last-Modified', 'Cache-Control']
}));

app.use(express.json({ limit: '5mb' }));
app.use(express.urlencoded({ extended: true, limit: '5mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
app.use(express.static('public', {
    maxAge: '1d',
    etag: true,
    lastModified: true
}));

// –ú–ì–ù–û–í–ï–ù–ù–´–ô –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´
class HighSpeedCache {
    constructor() {
        this.data = {
            public: null,
            admin: null,
            etag: null,
            lastUpdate: 0,
            version: 1
        };
        this.isUpdating = false;
    }
    
    isValid(maxAge = 30000) {
        return this.data.public && (Date.now() - this.data.lastUpdate) < maxAge;
    }
    
    getPublic() {
        return this.data.public || [];
    }
    
    getAdmin() {
        return this.data.admin || [];
    }
    
    async update() {
        if (this.isUpdating) return false;
        
        this.isUpdating = true;
        const startTime = Date.now();
        
        try {
            if (mongoose.connection.readyState !== 1) {
                console.log('‚ö†Ô∏è –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
                return false;
            }
            
            const [adminPoints, publicPoints] = await Promise.all([
                ModelPoint.find({}).lean().exec(),
                ModelPoint.find({
                    scheduledTime: { $lte: new Date() }
                }).select('-qrSecret').lean().exec()
            ]);
            
            this.data = {
                admin: adminPoints,
                public: publicPoints,
                lastUpdate: Date.now(),
                etag: `"${Date.now()}-${adminPoints.length}"`,
                version: this.data.version + 1
            };
            
            const updateTime = Date.now() - startTime;
            console.log(`‚ö° –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ ${updateTime}ms (${adminPoints.length} —Ç–æ—á–µ–∫)`);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞:', error);
            return false;
        } finally {
            this.isUpdating = false;
        }
    }
    
    invalidate() {
        this.data.lastUpdate = 0;
        setImmediate(() => this.update());
    }
}

const cache = new HighSpeedCache();

// Multer –¥–ª—è —Ñ–∞–π–ª–æ–≤
const upload = multer({
    storage: multer.memoryStorage(),
    limits: { fileSize: 3 * 1024 * 1024 },
    fileFilter: (req, file, cb) => {
        cb(null, file.mimetype.startsWith('image/'));
    }
});

// –ë–´–°–¢–†–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
async function connectDB() {
    try {
        const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/plasticboy', {
            maxPoolSize: 10,
            serverSelectionTimeoutMS: 5000,
            socketTimeoutMS: 45000,
            bufferCommands: false,
            bufferMaxEntries: 0
        });
        
        console.log(`‚ö° MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: ${conn.connection.host}`);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        await createTestDataIfNeeded();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
        await cache.update();
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MongoDB:', error);
        return false;
    }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ö–µ–º–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
const ModelPointSchema = new mongoose.Schema({
    id: { type: String, unique: true, required: true, index: true },
    name: { type: String, required: true },
    coordinates: {
        lat: { type: Number, required: true },
        lng: { type: Number, required: true }
    },
    status: { type: String, enum: ['available', 'collected'], default: 'available', index: true },
    qrCode: { type: String, required: true },
    qrSecret: { type: String, required: true, index: true },
    scheduledTime: { type: Date, default: Date.now, index: true },
    createdAt: { type: Date, default: Date.now, index: true },
    collectedAt: { type: Date },
    collectorInfo: {
        name: String,
        signature: String,
        selfie: String
    }
});

// –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
ModelPointSchema.index({ scheduledTime: 1, status: 1 });
ModelPointSchema.index({ id: 1, qrSecret: 1 });

const ModelPoint = mongoose.model('ModelPoint', ModelPointSchema);

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function createTestDataIfNeeded() {
    try {
        const count = await ModelPoint.countDocuments();
        if (count > 0) {
            console.log(`üìä –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å ${count} —Ç–æ—á–µ–∫`);
            return;
        }
        
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        const testPoints = [
            {
                id: 'almaty-001',
                name: '–ú–æ–¥–µ–ª—å "–ê–ª–º–∞—Ç—ã –ê—Ä–µ–Ω–∞"',
                coordinates: { lat: 43.2220, lng: 76.8512 },
                status: 'available',
                qrCode: await QRCode.toDataURL('http://localhost:3000/collect.html?id=almaty-001&secret=secret1'),
                qrSecret: 'secret1',
                scheduledTime: new Date()
            },
            {
                id: 'almaty-002',
                name: '–ú–æ–¥–µ–ª—å "–ü–ª–æ—â–∞–¥—å –†–µ—Å–ø—É–±–ª–∏–∫–∏"',
                coordinates: { lat: 43.2380, lng: 76.8840 },
                status: 'collected',
                qrCode: await QRCode.toDataURL('http://localhost:3000/collect.html?id=almaty-002&secret=secret2'),
                qrSecret: 'secret2',
                scheduledTime: new Date(),
                collectedAt: new Date(Date.now() - 3600000),
                collectorInfo: {
                    name: '–ê–π–¥–∞—Ä –ù—É—Ä–ª–∞–Ω–æ–≤',
                    signature: '–ü–µ—Ä–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞!'
                }
            },
            {
                id: 'almaty-003',
                name: '–ú–æ–¥–µ–ª—å "–ö–æ–∫-–¢–æ–±–µ"',
                coordinates: { lat: 43.2050, lng: 76.9080 },
                status: 'available',
                qrCode: await QRCode.toDataURL('http://localhost:3000/collect.html?id=almaty-003&secret=secret3'),
                qrSecret: 'secret3',
                scheduledTime: new Date()
            },
            {
                id: 'almaty-004',
                name: '–ú–æ–¥–µ–ª—å "–ú–µ–¥–µ—É"',
                coordinates: { lat: 43.1633, lng: 77.0669 },
                status: 'available',
                qrCode: await QRCode.toDataURL('http://localhost:3000/collect.html?id=almaty-004&secret=secret4'),
                qrSecret: 'secret4',
                scheduledTime: new Date()
            },
            {
                id: 'almaty-005',
                name: '–ú–æ–¥–µ–ª—å "–ü–∞—Ä–∫ 28 –ü–∞–Ω—Ñ–∏–ª–æ–≤—Ü–µ–≤"',
                coordinates: { lat: 43.2628, lng: 76.9569 },
                status: 'available',
                qrCode: await QRCode.toDataURL('http://localhost:3000/collect.html?id=almaty-005&secret=secret5'),
                qrSecret: 'secret5',
                scheduledTime: new Date()
            }
        ];
        
        await ModelPoint.insertMany(testPoints);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${testPoints.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    if (!cache.isValid(25000)) {
        cache.update();
    }
}, 30000);

// –ó–∞–ø—É—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
connectDB();

// –ú–ê–†–®–†–£–¢–´

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ú–ì–ù–û–í–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–µ–∫
app.get('/api/points', async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (cache.isValid()) {
            const points = cache.getPublic();
            
            res.set({
                'Content-Type': 'application/json; charset=utf-8',
                'Cache-Control': 'public, max-age=30',
                'ETag': cache.data.etag,
                'Last-Modified': new Date(cache.data.lastUpdate).toUTCString()
            });
            
            // 304 Not Modified
            if (req.get('If-None-Match') === cache.data.etag) {
                return res.status(304).end();
            }
            
            return res.json(points);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –µ—Å–ª–∏ —É—Å—Ç–∞—Ä–µ–ª
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è /api/points');
        await cache.update();
        
        const points = cache.getPublic();
        
        res.set({
            'Content-Type': 'application/json; charset=utf-8',
            'Cache-Control': 'public, max-age=15'
        });
        
        res.json(points);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ /api/points:', error);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const points = cache.getPublic();
        if (points.length > 0) {
            return res.json(points);
        }
        
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', points: [] });
    }
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ç–æ—á–∫–∏
app.get('/api/admin/points', async (req, res) => {
    try {
        const password = req.headers['x-admin-password'] || req.headers.authorization;
        
        if (!password || decodeURIComponent(password) !== process.env.ADMIN_PASSWORD) {
            return res.status(401).json({ error: 'Invalid password' });
        }
        
        if (!cache.isValid()) {
            await cache.update();
        }
        
        const points = cache.getAdmin();
        
        res.set({
            'Content-Type': 'application/json; charset=utf-8',
            'Cache-Control': 'private, max-age=10'
        });
        
        res.json(points);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–æ—á–µ–∫:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
app.post('/api/admin/points', async (req, res) => {
    try {
        const password = req.headers['x-admin-password'] || req.headers.authorization;
        
        if (!password || decodeURIComponent(password) !== process.env.ADMIN_PASSWORD) {
            return res.status(401).json({ error: 'Invalid password' });
        }

        const { name, coordinates, delayMinutes } = req.body;
        
        if (!name || !coordinates || !coordinates.lat || !coordinates.lng) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }
        
        const pointId = `point-${Date.now()}`;
        const qrSecret = Math.random().toString(36).substring(2, 15);
        
        const scheduledTime = new Date();
        if (delayMinutes && !isNaN(delayMinutes)) {
            scheduledTime.setMinutes(scheduledTime.getMinutes() + parseInt(delayMinutes));
        }

        const protocol = req.get('x-forwarded-proto') || req.protocol;
        const host = req.get('host');
        const collectUrl = `${protocol}://${host}/collect.html?id=${pointId}&secret=${qrSecret}`;
        
        const qrCodeDataUrl = await QRCode.toDataURL(collectUrl, {
            width: 300,
            margin: 2,
            color: {
                dark: '#000000',
                light: '#ffffff'
            }
        });

        const newPoint = new ModelPoint({
            id: pointId,
            name: name.trim(),
            coordinates: {
                lat: parseFloat(coordinates.lat),
                lng: parseFloat(coordinates.lng)
            },
            qrCode: qrCodeDataUrl,
            qrSecret,
            scheduledTime
        });

        await newPoint.save();
        cache.invalidate();
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–æ—á–∫–∞: ${name}`);
        res.status(201).json(newPoint);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏:', error);
        if (error.code === 11000) {
            res.status(409).json({ error: '–¢–æ—á–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        } else {
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏' });
        }
    }
});

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–æ—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è
app.post('/api/admin/points/create', async (req, res) => {
    try {
        const { name, coordinates, delayMinutes, adminPassword } = req.body;
        
        if (!adminPassword || adminPassword !== process.env.ADMIN_PASSWORD) {
            return res.status(401).json({ error: 'Invalid password' });
        }

        const pointId = `point-${Date.now()}`;
        const qrSecret = Math.random().toString(36).substring(2, 15);
        
        const scheduledTime = new Date();
        if (delayMinutes && !isNaN(delayMinutes)) {
            scheduledTime.setMinutes(scheduledTime.getMinutes() + parseInt(delayMinutes));
        }

        const protocol = req.get('x-forwarded-proto') || req.protocol;
        const host = req.get('host');
        const collectUrl = `${protocol}://${host}/collect.html?id=${pointId}&secret=${qrSecret}`;
        
        const qrCodeDataUrl = await QRCode.toDataURL(collectUrl, { width: 300, margin: 2 });

        const newPoint = new ModelPoint({
            id: pointId,
            name: name.trim(),
            coordinates,
            qrCode: qrCodeDataUrl,
            qrSecret,
            scheduledTime
        });

        await newPoint.save();
        cache.invalidate();
        
        res.status(201).json(newPoint);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ (–∞–ª—å—Ç):', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏' });
    }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–±–æ—Ä–∞
app.get('/collect.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'collect.html'));
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–±–æ—Ä–∞
app.get('/api/collect/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const { secret } = req.query;

        if (!id || !secret) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
        }

        const point = await ModelPoint.findOne({ 
            id, 
            qrSecret: secret 
        }).lean().exec();
        
        if (!point) {
            return res.status(404).json({ error: '–¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π QR –∫–æ–¥' });
        }

        if (point.status === 'collected') {
            return res.status(400).json({ error: '–≠—Ç–∞ –º–æ–¥–µ–ª—å —É–∂–µ —Å–æ–±—Ä–∞–Ω–∞' });
        }

        res.json({
            id: point.id,
            name: point.name,
            coordinates: point.coordinates
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—Ä–µ:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –°–±–æ—Ä –º–æ–¥–µ–ª–∏
app.post('/api/collect/:id', upload.single('selfie'), async (req, res) => {
    try {
        const { id } = req.params;
        const { secret, name, signature } = req.body;

        if (!id || !secret || !name) {
            return res.status(400).json({ error: '–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
        }

        const point = await ModelPoint.findOne({ 
            id, 
            qrSecret: secret 
        }).exec();
        
        if (!point) {
            return res.status(404).json({ error: '–¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π QR –∫–æ–¥' });
        }

        if (point.status === 'collected') {
            return res.status(400).json({ error: '–≠—Ç–∞ –º–æ–¥–µ–ª—å —É–∂–µ —Å–æ–±—Ä–∞–Ω–∞' });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–ª—Ñ–∏
        let selfieBase64 = null;
        if (req.file) {
            selfieBase64 = `data:${req.file.mimetype};base64,${req.file.buffer.toString('base64')}`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫—É
        point.status = 'collected';
        point.collectedAt = new Date();
        point.collectorInfo = {
            name: name.trim(),
            signature: signature ? signature.trim() : '',
            selfie: selfieBase64
        };

        await point.save();
        cache.invalidate();
        
        console.log(`‚úÖ –¢–æ—á–∫–∞ —Å–æ–±—Ä–∞–Ω–∞: ${name} ‚Üí ${point.name}`);
        
        res.json({ success: true, message: '–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞!' });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏' });
    }
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–∫–µ
app.get('/api/point/:id/info', async (req, res) => {
    try {
        const { id } = req.params;
        
        const point = await ModelPoint.findOne({ id })
            .select('-qrSecret')
            .lean()
            .exec();
        
        if (!point) {
            return res.status(404).json({ error: '–¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        res.set({
            'Cache-Control': 'public, max-age=300' // 5 –º–∏–Ω—É—Ç
        });

        res.json(point);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏
app.delete('/api/admin/points/:id', async (req, res) => {
    try {
        const password = req.headers['x-admin-password'] || req.headers.authorization;
        
        if (!password || decodeURIComponent(password) !== process.env.ADMIN_PASSWORD) {
            return res.status(401).json({ error: 'Invalid password' });
        }

        const { id } = req.params;
        
        const deletedPoint = await ModelPoint.findOneAndDelete({ id }).exec();
        
        if (!deletedPoint) {
            return res.status(404).json({ error: '–¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        cache.invalidate();

        res.json({ success: true, message: '–¢–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞' });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è' });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get('/health', (req, res) => {
    const memoryUsage = process.memoryUsage();
    const stats = cache.data;
    
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        uptime: Math.floor(process.uptime()),
        memory: {
            used: Math.round(memoryUsage.heapUsed / 1024 / 1024),
            total: Math.round(memoryUsage.heapTotal / 1024 / 1024)
        },
        cache: {
            publicPoints: stats.public ? stats.public.length : 0,
            adminPoints: stats.admin ? stats.admin.length : 0,
            lastUpdate: new Date(stats.lastUpdate).toISOString(),
            isValid: cache.isValid()
        },
        database: {
            connected: mongoose.connection.readyState === 1,
            state: mongoose.connection.readyState
        }
    });
});

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
app.get('/admin.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

// 404 –æ–±—Ä–∞–±–æ—Ç–∫–∞
app.use((req, res) => {
    res.status(404).json({ error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('üí• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// Graceful shutdown
const gracefulShutdown = async (signal) => {
    console.log(`‚ö° –ü–æ–ª—É—á–µ–Ω ${signal}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
    try {
        await mongoose.connection.close();
        console.log('‚úÖ MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:', error);
        process.exit(1);
    }
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`‚ö° PlasticBoy —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üöÄ –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
    console.log(`üíæ MongoDB: ${process.env.MONGODB_URI ? '–æ–±–ª–∞—á–Ω–∞—è' : '–ª–æ–∫–∞–ª—å–Ω–∞—è'}`);
    console.log(`üîß –ê–¥–º–∏–Ω –ø–∞—Ä–æ–ª—å: ${process.env.ADMIN_PASSWORD ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
});

module.exports = app;
