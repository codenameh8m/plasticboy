// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è - –ò–°–ü–†–ê–í–õ–ï–ù–ê
function checkAdminPassword(req) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–æ–ª—è
    let password = null;
    
    // 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
    if (req.headers.authorization) {
        password = req.headers.authorization;
    }
    
    // 2. –ó–∞–≥–æ–ª–æ–≤–æ–∫ X-Admin-Password (—Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    if (!password && req.headers['x-admin-password']) {
        password = decodeURIComponent(req.headers['x-admin-password']);
    }
    
    // 3. Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
    if (!password && req.get('Authorization')) {
        password = req.get('Authorization');
    }
    
    console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è...');
    console.log('   üìã Authorization header:', req.headers.authorization ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
    console.log('   üìã X-Admin-Password header:', req.headers['x-admin-password'] ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
    console.log('   üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', password ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('   ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π –ø–∞—Ä–æ–ª—å:', process.env.ADMIN_PASSWORD ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    const isValid = password && password === process.env.ADMIN_PASSWORD;
    console.log('   üîê –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', isValid ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
    
    return isValid;
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û
app.get('/api/admin/points', async (req, res) => {
  try {
    if (!checkAdminPassword(req)) {
      logUserAction('ADMIN_ACCESS_DENIED', { 
        ip: req.ip,
        headers: {
          authorization: req.headers.authorization ? 'present' : 'missing',
          xAdminPassword: req.headers['x-admin-password'] ? 'present' : 'missing'
        }
      }, req);
      return res.status(401).json({ error: 'Invalid admin password' });
    }
    
    const points = await ModelPoint.find({}).lean().exec();
    
    logUserAction('ADMIN_POINTS_LOADED', { count: points.length }, req);
    console.log(`üõ°Ô∏è –ê–¥–º–∏–Ω –∑–∞–≥—Ä—É–∑–∏–ª ${points.length} —Ç–æ—á–µ–∫`);
    
    res.json(points);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞:', error);
    res.status(500).json({ error: 'Failed to load points' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–æ—á–∫—É (–∞–¥–º–∏–Ω) - –ò–°–ü–†–ê–í–õ–ï–ù–û
app.post('/api/admin/points', async (req, res) => {
  try {
    if (!checkAdminPassword(req)) {
      logUserAction('ADMIN_CREATE_DENIED', { 
        ip: req.ip,
        headers: {
          authorization: req.headers.authorization ? 'present' : 'missing',
          xAdminPassword: req.headers['x-admin-password'] ? 'present' : 'missing'
        }
      }, req);
      return res.status(401).json({ error: 'Invalid admin password' });
    }

    const { name, coordinates, delayMinutes } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!name || !coordinates || typeof coordinates.lat !== 'number' || typeof coordinates.lng !== 'number') {
      return res.status(400).json({ error: 'Invalid point data' });
    }

    const pointId = Date.now().toString();
    const qrSecret = crypto.randomBytes(16).toString('hex');
    
    const scheduledTime = new Date();
    if (delayMinutes && !isNaN(delayMinutes)) {
      scheduledTime.setMinutes(scheduledTime.getMinutes() + parseInt(delayMinutes));
    }

    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞
    const protocol = req.get('x-forwarded-proto') || req.protocol;
    const host = req.get('host');
    const collectUrl = `${protocol}://${host}/collect.html?id=${pointId}&secret=${qrSecret}`;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
    const qrCodeDataUrl = await QRCode.toDataURL(collectUrl, {
      width: 400,
      margin: 2,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      }
    });

    const newPoint = new ModelPoint({
      id: pointId,
      name: name.trim(),
      coordinates: {
        lat: parseFloat(coordinates.lat),
        lng: parseFloat(coordinates.lng)
      },
      qrCode: qrCodeDataUrl,
      qrSecret,
      scheduledTime
    });

    await newPoint.save();
    
    logUserAction('ADMIN_POINT_CREATED', { 
      pointId, 
      name: name.trim(),
      scheduledTime: scheduledTime.toISOString()
    }, req);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–æ—á–∫–∞: ${name} (ID: ${pointId})`);
    res.json(newPoint);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏:', error);
    res.status(500).json({ error: 'Failed to create point' });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É (–∞–¥–º–∏–Ω) - –ò–°–ü–†–ê–í–õ–ï–ù–û
app.delete('/api/admin/points/:id', async (req, res) => {
  try {
    if (!checkAdminPassword(req)) {
      logUserAction('ADMIN_DELETE_DENIED', { 
        ip: req.ip,
        pointId: req.params.id,
        headers: {
          authorization: req.headers.authorization ? 'present' : 'missing',
          xAdminPassword: req.headers['x-admin-password'] ? 'present' : 'missing'
        }
      }, req);
      return res.status(401).json({ error: 'Invalid admin password' });
    }

    const { id } = req.params;
    const deletedPoint = await ModelPoint.findOneAndDelete({ id: id.trim() });
    
    if (!deletedPoint) {
      return res.status(404).json({ error: 'Point not found' });
    }

    logUserAction('ADMIN_POINT_DELETED', { 
      pointId: id, 
      pointName: deletedPoint.name 
    }, req);
    
    console.log(`üóëÔ∏è –¢–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ${deletedPoint.name} (ID: ${id})`);
    res.json({ success: true, message: 'Point deleted successfully' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏:', error);
    res.status(500).json({ error: 'Failed to delete point' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞) - –ò–°–ü–†–ê–í–õ–ï–ù–û
app.get('/api/admin/top-collectors', async (req, res) => {
  try {
    if (!checkAdminPassword(req)) {
      return res.status(401).json({ error: 'Invalid admin password' });
    }

    const topCollectors = await ModelPoint.aggregate([
      { $match: { status: 'collected' } },
      {
        $group: {
          _id: {
            name: '$collectorInfo.name',
            telegramId: '$collectorInfo.telegramData.id',
            authMethod: '$collectorInfo.authMethod'
          },
          count: { $sum: 1 },
          lastCollection: { $max: '$collectedAt' },
          firstCollection: { $min: '$collectedAt' }
        }
      },
      { $sort: { count: -1 } },
      { $limit: 10 }
    ]);

    logUserAction('ADMIN_TOP_COLLECTORS_VIEWED', { count: topCollectors.length }, req);
    res.json(topCollectors);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤:', error);
    res.status(500).json({ error: 'Failed to get top collectors' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –ò–°–ü–†–ê–í–õ–ï–ù–û
app.get('/api/admin/stats', async (req, res) => {
  try {
    if (!checkAdminPassword(req)) {
      return res.status(401).json({ error: 'Invalid admin password' });
    }

    const now = new Date();
    const stats = await ModelPoint.aggregate([
      {
        $group: {
          _id: null,
          total: { $sum: 1 },
          collected: {
            $sum: {
              $cond: [{ $eq: ['$status', 'collected'] }, 1, 0]
            }
          },
          available: {
            $sum: {
              $cond: [{ $eq: ['$status', 'available'] }, 1, 0]
            }
          },
          scheduled: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $eq: ['$status', 'available'] },
                    { $gt: ['$scheduledTime', now] }
                  ]
                },
                1,
                0
              ]
            }
          },
          manualAuth: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $eq: ['$status', 'collected'] },
                    { $eq: ['$collectorInfo.authMethod', 'manual'] }
                  ]
                },
                1,
                0
              ]
            }
          },
          telegramAuth: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $eq: ['$status', 'collected'] },
                    { $eq: ['$collectorInfo.authMethod', 'telegram'] }
                  ]
                },
                1,
                0
              ]
            }
          },
          withSelfie: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $eq: ['$status', 'collected'] },
                    { $ne: ['$collectorInfo.selfie', null] },
                    { $ne: ['$collectorInfo.selfie', ''] }
                  ]
                },
                1,
                0
              ]
            }
          }
        }
      }
    ]);

    const result = stats[0] || {
      total: 0,
      collected: 0,
      available: 0,
      scheduled: 0,
      manualAuth: 0,
      telegramAuth: 0,
      withSelfie: 0
    };

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const recentCollections = await ModelPoint.find({
      status: 'collected',
      collectedAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
    }).countDocuments();

    result.recentCollections = recentCollections;

    logUserAction('ADMIN_STATS_VIEWED', result, req);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${result.total} –≤—Å–µ–≥–æ, ${result.collected} —Å–æ–±—Ä–∞–Ω–æ`);
    
    res.json(result);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: 'Failed to get statistics' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º - –ò–°–ü–†–ê–í–õ–ï–ù–û
app.get('/api/admin/activity', async (req, res) => {
  try {
    if (!checkAdminPassword(req)) {
      return res.status(401).json({ error: 'Invalid admin password' });
    }

    const { days = 7 } = req.query;
    const daysAgo = new Date();
    daysAgo.setDate(daysAgo.getDate() - parseInt(days));

    const activity = await ModelPoint.aggregate([
      {
        $match: {
          $or: [
            { createdAt: { $gte: daysAgo } },
            { collectedAt: { $gte: daysAgo } }
          ]
        }
      },
      {
        $facet: {
          created: [
            { $match: { createdAt: { $gte: daysAgo } } },
            {
              $group: {
                _id: {
                  $dateToString: { format: '%Y-%m-%d', date: '$createdAt' }
                },
                count: { $sum: 1 }
              }
            },
            { $sort: { _id: 1 } }
          ],
          collected: [
            { 
              $match: { 
                status: 'collected',
                collectedAt: { $gte: daysAgo } 
              } 
            },
            {
              $group: {
                _id: {
                  $dateToString: { format: '%Y-%m-%d', date: '$collectedAt' }
                },
                count: { $sum: 1 }
              }
            },
            { $sort: { _id: 1 } }
          ]
        }
      }
    ]);

    logUserAction('ADMIN_ACTIVITY_VIEWED', { days: parseInt(days) }, req);
    res.json(activity[0]);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    res.status(500).json({ error: 'Failed to get activity data' });
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–∞–¥–º–∏–Ω) - –ò–°–ü–†–ê–í–õ–ï–ù–û
app.get('/api/admin/export', async (req, res) => {
  try {
    if (!checkAdminPassword(req)) {
      return res.status(401).json({ error: 'Invalid admin password' });
    }

    const { format = 'json' } = req.query;
    
    const points = await ModelPoint.find({})
      .select('-qrSecret -collectorInfo.telegramData.hash')
      .lean()
      .exec();

    logUserAction('ADMIN_DATA_EXPORTED', { 
      format, 
      pointsCount: points.length 
    }, req);

    if (format === 'csv') {
      // –ü—Ä–æ—Å—Ç–æ–π CSV —ç–∫—Å–ø–æ—Ä—Ç
      const csvHeader = 'ID,Name,Status,Created,Collected,Collector,AuthMethod,Lat,Lng\n';
      const csvData = points.map(point => {
        return [
          point.id,
          `"${point.name}"`,
          point.status,
          point.createdAt?.toISOString() || '',
          point.collectedAt?.toISOString() || '',
          `"${point.collectorInfo?.name || ''}"`,
          point.collectorInfo?.authMethod || '',
          point.coordinates.lat,
          point.coordinates.lng
        ].join(',');
      }).join('\n');

      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', 'attachment; filename="plasticboy-export.csv"');
      res.send(csvHeader + csvData);
    } else {
      res.json({
        exportDate: new Date().toISOString(),
        totalPoints: points.length,
        data: points
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ error: 'Failed to export data' });
  }
});
