// bot-server.js - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
require('dotenv').config();

console.log('üöÄ =================================================');
console.log('ü§ñ PlasticBoy Telegram Bot - –û–¢–õ–ê–î–û–ß–ù–ê–Ø –í–ï–†–°–ò–Ø');
console.log('üöÄ =================================================');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEB_APP_URL = process.env.WEB_APP_URL || process.env.RENDER_EXTERNAL_URL || 'http://localhost:3000';
const BOT_USERNAME = process.env.TELEGRAM_BOT_USERNAME;

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log(`   TELEGRAM_BOT_TOKEN: ${BOT_TOKEN ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
console.log(`   TELEGRAM_BOT_USERNAME: ${BOT_USERNAME ? `‚úÖ ${BOT_USERNAME}` : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
console.log(`   WEB_APP_URL: ${WEB_APP_URL}`);
console.log(`   NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
console.log(`   RENDER_EXTERNAL_URL: ${process.env.RENDER_EXTERNAL_URL || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!BOT_TOKEN) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    console.log('üìù –î–æ–±–∞–≤—å—Ç–µ –≤ Render Dashboard Environment Variables:');
    console.log('   TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_botfather');
    console.log('   TELEGRAM_BOT_USERNAME=–∏–º—è_–±–æ—Ç–∞_–±–µ–∑_@');
    process.exit(1);
}

console.log('\nü§ñ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞...');

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
const bot = new TelegramBot(BOT_TOKEN, { 
    polling: {
        interval: 1000,
        autoStart: true
    }
});

console.log('‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...');

// === –ü–†–û–°–¢–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò ===

bot.on('polling_error', (error) => {
    console.error('‚ùå –û–®–ò–ë–ö–ê POLLING:', error.code, error.message);
    if (error.response) {
        console.error('   Response:', error.response.statusCode, error.response.body);
    }
});

bot.on('error', (error) => {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ë–û–¢–ê:', error);
});

// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const userName = msg.from.first_name;
    
    console.log(`üëã –ü–û–õ–£–ß–ï–ù /START –æ—Ç ${userName} (ID: ${msg.from.id}, Chat: ${chatId})`);
    
    const message = `üéØ –ü—Ä–∏–≤–µ—Ç, ${userName}! 

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ

–≠—Ç–æ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è PlasticBoy –±–æ—Ç–∞.

üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ Bot ID: @${BOT_USERNAME}
‚Ä¢ Chat ID: ${chatId}
‚Ä¢ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

üéÆ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–º–æ—â—å
/test - —Ç–µ—Å—Ç –±–æ—Ç–∞
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ`;

    bot.sendMessage(chatId, message)
        .then(() => {
            console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userName}`);
        })
        .catch((error) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
        });
});

// –ö–æ–º–∞–Ω–¥–∞ /test
bot.onText(/\/test/, (msg) => {
    const chatId = msg.chat.id;
    console.log(`üß™ –¢–ï–°–¢ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç ${msg.from.first_name}`);
    
    bot.sendMessage(chatId, '‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.')
        .then(() => console.log('‚úÖ –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'))
        .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', error));
});

// –ö–æ–º–∞–Ω–¥–∞ /info
bot.onText(/\/info/, (msg) => {
    const chatId = msg.chat.id;
    console.log(`‚ÑπÔ∏è INFO –∫–æ–º–∞–Ω–¥–∞ –æ—Ç ${msg.from.first_name}`);
    
    const info = `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:

ü§ñ Username: @${BOT_USERNAME}
üåê Web App: ${WEB_APP_URL}
‚è∞ Uptime: ${Math.floor(process.uptime())} —Å–µ–∫—É–Ω–¥
üíæ Memory: ${Math.round(process.memoryUsage().rss / 1024 / 1024)} MB
üñ•Ô∏è Platform: ${process.platform}
üìç Environment: ${process.env.NODE_ENV || 'development'}`;

    bot.sendMessage(chatId, info)
        .then(() => console.log('‚úÖ Info —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'))
        .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ info —Å–æ–æ–±—â–µ–Ω–∏—è:', error));
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    console.log(`‚ùì HELP –∫–æ–º–∞–Ω–¥–∞ –æ—Ç ${msg.from.first_name}`);
    
    const help = `‚ùì –ü–æ–º–æ—â—å PlasticBoy Bot

üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/test - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/help - –≠—Ç–∞ –ø–æ–º–æ—â—å

üéØ –ò–≥—Ä–∞ PlasticBoy - —Å–±–æ—Ä 3D –º–æ–¥–µ–ª–µ–π –≤ –ê–ª–º–∞—Ç—ã!
–ù–∞–π–¥–∏ QR-–∫–æ–¥—ã –∏ —Å–æ–±–∏—Ä–∞–π –∫–æ–ª–ª–µ–∫—Ü–∏—é.

üåê Web –≤–µ—Ä—Å–∏—è: ${WEB_APP_URL}`;

    bot.sendMessage(chatId, help)
        .then(() => console.log('‚úÖ Help —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'))
        .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ help —Å–æ–æ–±—â–µ–Ω–∏—è:', error));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.on('message', (msg) => {
    console.log(`üì® –°–û–û–ë–©–ï–ù–ò–ï –ø–æ–ª—É—á–µ–Ω–æ:`, {
        from: msg.from.first_name,
        user_id: msg.from.id,
        chat_id: msg.chat.id,
        text: msg.text || msg.caption || '[–Ω–µ —Ç–µ–∫—Å—Ç]',
        type: msg.chat.type,
        date: new Date(msg.date * 1000).toLocaleString()
    });
});

// === HEALTH CHECK –î–õ–Ø RENDER ===

const express = require('express');
const healthApp = express();
const HEALTH_PORT = process.env.PORT || 10000;

healthApp.get('/', (req, res) => {
    res.json({
        status: 'OK',
        service: 'PlasticBoy Telegram Bot (DEBUG)',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        botStatus: 'running',
        config: {
            botUsername: BOT_USERNAME,
            webAppUrl: WEB_APP_URL,
            nodeEnv: process.env.NODE_ENV
        }
    });
});

healthApp.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        bot: BOT_USERNAME,
        webApp: WEB_APP_URL,
        timestamp: new Date().toISOString()
    });
});

healthApp.listen(HEALTH_PORT, () => {
    console.log(`üíö Health server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${HEALTH_PORT}`);
    console.log(`üìä Health check: http://localhost:${HEALTH_PORT}/health`);
});

// === –ü–†–û–í–ï–†–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø ===

console.log('\nüì° –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram...');

bot.getMe()
    .then(botInfo => {
        console.log('‚úÖ –£–°–ü–ï–®–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö TELEGRAM!');
        console.log(`üì± Bot Username: @${botInfo.username}`);
        console.log(`üìù Bot Name: ${botInfo.first_name}`);
        console.log(`üÜî Bot ID: ${botInfo.id}`);
        console.log(`üîß Can Join Groups: ${botInfo.can_join_groups}`);
        console.log(`üì¢ Can Read Messages: ${botInfo.can_read_all_group_messages}`);
        console.log(`üîó Supports Inline: ${botInfo.supports_inline_queries}`);
        
        console.log('\nüöÄ –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!');
        console.log(`üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É @${botInfo.username} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
        console.log(`üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/${botInfo.username}`);
    })
    .catch(error => {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö TELEGRAM:', error);
        console.error('   Code:', error.code);
        console.error('   Message:', error.message);
        if (error.response) {
            console.error('   Status:', error.response.statusCode);
            console.error('   Body:', error.response.body);
        }
        
        console.log('\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        
        process.exit(1);
    });

// === GRACEFUL SHUTDOWN ===

const gracefulShutdown = (signal) => {
    console.log(`\nüìõ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º –±–æ—Ç–∞...`);
    
    bot.stopPolling()
        .then(() => {
            console.log('‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling:', error);
            process.exit(1);
        });
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

console.log('\n‚è∞ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...');
console.log('üìù –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å');
