// bot-server.js - –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram –±–æ—Ç–∞ –Ω–∞ Render.com

const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
require('dotenv').config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEB_APP_URL = process.env.WEB_APP_URL || process.env.RENDER_EXTERNAL_URL || 'http://localhost:3000';
const BOT_USERNAME = process.env.TELEGRAM_BOT_USERNAME;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!BOT_TOKEN) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    console.log('üìù –î–æ–±–∞–≤—å—Ç–µ –≤ Render Dashboard:');
    console.log('   TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_botfather');
    console.log('   TELEGRAM_BOT_USERNAME=–∏–º—è_–±–æ—Ç–∞_–±–µ–∑_@');
    process.exit(1);
}

console.log('ü§ñ PlasticBoy Telegram Bot - –ó–∞–ø—É—Å–∫ –Ω–∞ Render.com');
console.log(`üì± Bot Username: @${BOT_USERNAME}`);
console.log(`üåê Web App URL: ${WEB_APP_URL}`);

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
require('./bot/bot.js')(bot, WEB_APP_URL);

// === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø RENDER ===

// Health check –¥–ª—è Render.com
const express = require('express');
const healthApp = express();
const HEALTH_PORT = process.env.PORT || 10000;

healthApp.get('/', (req, res) => {
    res.json({
        status: 'OK',
        service: 'PlasticBoy Telegram Bot',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        botStatus: 'running'
    });
});

healthApp.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        bot: BOT_USERNAME,
        webApp: WEB_APP_URL,
        timestamp: new Date().toISOString()
    });
});

// Webhook endpoint –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
healthApp.use(express.json());
healthApp.post('/webhook/notification', (req, res) => {
    const { type, data } = req.body;
    
    console.log(`üì¨ Webhook –ø–æ–ª—É—á–µ–Ω: ${type}`, data);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª—è—Ö
    
    res.json({ status: 'received', type, timestamp: new Date().toISOString() });
});

healthApp.listen(HEALTH_PORT, () => {
    console.log(`üíö Health server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${HEALTH_PORT}`);
});

// === –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ë–û–¢–ê ===

bot.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if (WEB_APP_URL) {
        axios.post(`${WEB_APP_URL}/api/bot/error`, {
            error: error.message,
            timestamp: new Date().toISOString()
        }).catch(err => {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        });
    }
});

bot.on('polling_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
    
    // –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å polling
    if (error.code === 'ETELEGRAM' && error.response?.statusCode >= 500) {
        console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å polling —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...');
        setTimeout(() => {
            bot.stopPolling().then(() => {
                bot.startPolling();
            });
        }, 30000);
    }
});

// === GRACEFUL SHUTDOWN ===

const gracefulShutdown = (signal) => {
    console.log(`üìõ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º –±–æ—Ç–∞...`);
    
    bot.stopPolling()
        .then(() => {
            console.log('‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling:', error);
            process.exit(1);
        });
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// === –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–û–ï–î–ò–ù–ï–ù–ò–Ø ===

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(async () => {
    try {
        await bot.getMe();
        console.log('üíö –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram OK');
    } catch (error) {
        console.error('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º Telegram:', error.message);
    }
}, 5 * 60 * 1000);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(async () => {
    try {
        const response = await axios.get(`${WEB_APP_URL}/health`, { timeout: 10000 });
        console.log('üíö –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ');
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:', error.message);
    }
}, 10 * 60 * 1000);

// === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===

let botStats = {
    startTime: new Date(),
    messagesSent: 0,
    messagesReceived: 0,
    errors: 0,
    lastActivity: new Date()
};

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
bot.on('message', () => {
    botStats.messagesReceived++;
    botStats.lastActivity = new Date();
});

// Endpoint –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
healthApp.get('/stats', (req, res) => {
    res.json({
        ...botStats,
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        env: {
            nodeVersion: process.version,
            platform: process.platform,
            renderService: process.env.RENDER_SERVICE_NAME || 'local'
        }
    });
});

console.log('üöÄ PlasticBoy Telegram Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
console.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ /stats');
console.log('üíö Health check –Ω–∞ /health');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
bot.getMe()
    .then(botInfo => {
        console.log(`‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @${botInfo.username} (ID: ${botInfo.id})`);
        console.log(`üìù –ò–º—è: ${botInfo.first_name}`);
    })
    .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error);
    });
