// bot-server.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è Render.com

const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');
require('dotenv').config();

console.log('üöÄ =================================================');
console.log('ü§ñ PlasticBoy Telegram Bot - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø');
console.log('üöÄ =================================================');

// –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEB_APP_URL = process.env.RENDER_EXTERNAL_URL || process.env.WEB_APP_URL || 'http://localhost:3000';
const BOT_USERNAME = process.env.TELEGRAM_BOT_USERNAME;
const PORT = process.env.PORT || 10000;
const IS_PRODUCTION = process.env.NODE_ENV === 'production';

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
console.log(`   TELEGRAM_BOT_TOKEN: ${BOT_TOKEN ? '‚úÖ –µ—Å—Ç—å' : '‚ùå –ù–ï–¢'}`);
console.log(`   TELEGRAM_BOT_USERNAME: ${BOT_USERNAME ? `‚úÖ ${BOT_USERNAME}` : '‚ùå –ù–ï–¢'}`);
console.log(`   WEB_APP_URL: ${WEB_APP_URL}`);
console.log(`   PORT: ${PORT}`);
console.log(`   NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
console.log(`   IS_PRODUCTION: ${IS_PRODUCTION}`);

// –ü–†–û–í–ï–†–ö–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–•
if (!BOT_TOKEN) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    console.error('üîß –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ Render Dashboard Environment Variables');
    process.exit(1);
}

if (!BOT_USERNAME) {
    console.error('‚ùå TELEGRAM_BOT_USERNAME –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    console.error('üîß –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ Render Dashboard Environment Variables');
    process.exit(1);
}

// EXPRESS –°–ï–†–í–ï–† –î–õ–Ø WEBHOOK –ò HEALTH CHECK
const app = express();
app.use(express.json());

// HEALTH CHECK ENDPOINT
app.get('/', (req, res) => {
    res.json({
        status: 'OK',
        service: 'PlasticBoy Telegram Bot',
        timestamp: new Date().toISOString(),
        uptime: Math.floor(process.uptime()),
        memory: Math.round(process.memoryUsage().rss / 1024 / 1024) + ' MB',
        bot: BOT_USERNAME,
        mode: IS_PRODUCTION ? 'webhook' : 'polling',
        webAppUrl: WEB_APP_URL
    });
});

app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        bot: BOT_USERNAME,
        timestamp: new Date().toISOString()
    });
});

// –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê –ò –ù–ê–°–¢–†–û–ô–ö–ê
let bot;

async function createBot() {
    try {
        console.log('ü§ñ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞...');
        
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ webhook
        try {
            await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`);
            console.log('üóëÔ∏è –°—Ç–∞—Ä—ã–µ webhook —É–¥–∞–ª–µ–Ω—ã');
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ webhook (–≤–æ–∑–º–æ–∂–Ω–æ –∏—Ö –Ω–µ –±—ã–ª–æ)');
        }
        
        if (IS_PRODUCTION) {
            console.log('üåê PRODUCTION MODE - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook');
            
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
            bot = new TelegramBot(BOT_TOKEN, { 
                polling: false,
                webHook: false
            });
            
            // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω–æ–π —Å–ª–µ—à –≤ URL
            const webhookPath = `/${BOT_TOKEN}`;
            const baseUrl = WEB_APP_URL.endsWith('/') ? WEB_APP_URL.slice(0, -1) : WEB_APP_URL;
            const webhookUrl = `${baseUrl}${webhookPath}`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
            app.post(webhookPath, (req, res) => {
                console.log('üì• Webhook –ø–æ–ª—É—á–µ–Ω:', JSON.stringify(req.body, null, 2));
                bot.processUpdate(req.body);
                res.sendStatus(200);
            });
            
            console.log(`üîó Base URL: ${baseUrl}`);
            console.log(`üîó Webhook path: ${webhookPath}`);
            console.log(`üîó Final webhook URL: ${webhookUrl}`);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ API
            try {
                const webhookResponse = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
                    url: webhookUrl,
                    allowed_updates: ['message', 'callback_query']
                });
                
                console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookResponse.data);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error.response?.data || error.message);
            }
            
        } else {
            console.log('üè† DEVELOPMENT MODE - –ò—Å–ø–æ–ª—å–∑—É–µ–º polling');
            
            // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
            bot = new TelegramBot(BOT_TOKEN, { 
                polling: {
                    interval: 2000,
                    autoStart: true,
                    params: {
                        timeout: 10
                    }
                }
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        const botInfo = await bot.getMe();
        console.log('‚úÖ –£–°–ü–ï–®–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö TELEGRAM!');
        console.log(`üì± Bot Username: @${botInfo.username}`);
        console.log(`üìù Bot Name: ${botInfo.first_name}`);
        console.log(`üÜî Bot ID: ${botInfo.id}`);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        setupBotHandlers();
        
        return botInfo;
        
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:', error);
        throw error;
    }
}

// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ë–û–¢–ê
function setupBotHandlers() {
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥...');
    
    // –ö–æ–º–∞–Ω–¥–∞ /start
    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;
        const firstName = msg.from.first_name;
        const userId = msg.from.id;
        
        console.log(`üëã /start –æ—Ç ${firstName} (ID: ${userId}, Chat: ${chatId})`);
        
        const welcomeMessage = `
üéØ *PlasticBoy - Almaty Edition*

–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ø–æ —Å–±–æ—Ä—É 3D –º–æ–¥–µ–ª–µ–π –≤ –ê–ª–º–∞—Ç—ã!

üéÆ *–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*
‚Ä¢ –ù–∞–π–¥–∏ QR-–∫–æ–¥—ã –º–æ–¥–µ–ª–µ–π –ø–æ –≥–æ—Ä–æ–¥—É
‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π –∏—Ö –∏ —Å–æ–±–µ—Ä–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é
‚Ä¢ –°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏

üöÄ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/map - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É —Å –º–æ–¥–µ–ª—è–º–∏
/leaderboard - –†–µ–π—Ç–∏–Ω–≥ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã
/help - –ü–æ–º–æ—â—å

–£–¥–∞—á–Ω–æ–π –æ—Ö–æ—Ç—ã! üéØ
        `;
        
        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', web_app: { url: WEB_APP_URL } }
                    ],
                    [
                        { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥', callback_data: 'leaderboard' },
                        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
                    ],
                    [
                        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
                    ]
                ]
            }
        };
        
        try {
            await bot.sendMessage(chatId, welcomeMessage, options);
            console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${firstName}`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:`, error);
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    bot.onText(/\/help/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`‚ùì /help –æ—Ç ${msg.from.first_name}`);
        
        const helpMessage = `
‚ùì *–ü–æ–º–æ—â—å PlasticBoy*

üéØ *–¶–µ–ª—å –∏–≥—Ä—ã:*
–°–æ–±–µ—Ä–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ 3D –º–æ–¥–µ–ª–µ–π, —Ä–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã—Ö –ø–æ –ê–ª–º–∞—Ç—ã!

üì± *–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*
1. –ò—Å–ø–æ–ª—å–∑—É–π /map –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
2. –ù–∞–π–¥–∏ QR-–∫–æ–¥ –º–æ–¥–µ–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ
3. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π –µ–≥–æ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ
4. –ó–∞–ø–æ–ª–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
5. –°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ —Å –º–µ—Å—Ç–∞ –Ω–∞—Ö–æ–¥–∫–∏
6. –ü–æ–ª—É—á–∏ –æ—á–∫–∏ –∏ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!

üèÜ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram:*
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –±–µ–∑ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

üó∫Ô∏è *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/map - –ö–∞—Ä—Ç–∞ —Å –º–æ–¥–µ–ª—è–º–∏
/leaderboard - –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã
/help - –≠—Ç–∞ –ø–æ–º–æ—â—å

üéÆ *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ß–∞—â–µ –ø—Ä–æ–≤–µ—Ä—è–π –∫–∞—Ä—Ç—É - –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Telegram –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
‚Ä¢ –î–µ–ª–∏—Å—å –Ω–∞—Ö–æ–¥–∫–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏!

–£–¥–∞—á–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏! üöÄ
        `;
        
        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üó∫Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', web_app: { url: WEB_APP_URL } }]
                ]
            }
        };
        
        try {
            await bot.sendMessage(chatId, helpMessage, options);
            console.log(`‚úÖ –ü–æ–º–æ—â—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${msg.from.first_name}`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–º–æ—â–∏:`, error);
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /map
    bot.onText(/\/map/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`üó∫Ô∏è /map –æ—Ç ${msg.from.first_name}`);
        
        const mapMessage = `
üó∫Ô∏è *–ö–∞—Ä—Ç–∞ PlasticBoy*

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –ê–ª–º–∞—Ç—ã!

üü¢ –ó–µ–ª–µ–Ω—ã–µ —Ç–æ—á–∫–∏ - –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–±–æ—Ä–∞
üî¥ –ö—Ä–∞—Å–Ω—ã–µ —Ç–æ—á–∫–∏ - —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É:
        `;
        
        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', web_app: { url: WEB_APP_URL } }],
                    [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_map' }]
                ]
            }
        };
        
        try {
            await bot.sendMessage(chatId, mapMessage, options);
            console.log(`‚úÖ –ö–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${msg.from.first_name}`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã:`, error);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    bot.on('callback_query', async (callbackQuery) => {
        const chatId = callbackQuery.message.chat.id;
        const data = callbackQuery.data;
        const messageId = callbackQuery.message.message_id;
        
        console.log(`üîò Callback: ${data} –æ—Ç ${callbackQuery.from.first_name}`);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
        try {
            await bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ answerCallbackQuery:', error);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã callback'–æ–≤
        try {
            switch (data) {
                case 'leaderboard':
                    await bot.editMessageText(
                        `üèÜ *–†–µ–π—Ç–∏–Ω–≥ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤*\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.`,
                        {
                            chat_id: chatId,
                            message_id: messageId,
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üèÜ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–π—Ç–∏–Ω–≥', url: `${WEB_APP_URL}/leaderboard.html` }],
                                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                                ]
                            }
                        }
                    );
                    break;
                    
                case 'stats':
                    await bot.editMessageText(
                        `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã*\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.`,
                        {
                            chat_id: chatId,
                            message_id: messageId,
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üìä –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', web_app: { url: WEB_APP_URL } }],
                                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                                ]
                            }
                        }
                    );
                    break;
                    
                case 'help':
                    await bot.editMessageText(
                        `‚ùì *–ü–æ–º–æ—â—å*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`,
                        {
                            chat_id: chatId,
                            message_id: messageId,
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                                ]
                            }
                        }
                    );
                    break;
                    
                case 'refresh_map':
                    await bot.editMessageText(
                        `üîÑ *–ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã:`,
                        {
                            chat_id: chatId,
                            message_id: messageId,
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', web_app: { url: WEB_APP_URL } }]
                                ]
                            }
                        }
                    );
                    break;
                    
                case 'back_to_menu':
                    const welcomeMessage = `
üéØ *PlasticBoy - Almaty Edition*

–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                    `;
                    
                    await bot.editMessageText(welcomeMessage, {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', web_app: { url: WEB_APP_URL } }],
                                [
                                    { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥', callback_data: 'leaderboard' },
                                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
                                ]
                            ]
                        }
                    });
                    break;
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback ${data}:`, error);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    bot.on('message', (msg) => {
        if (!msg.text || msg.text.startsWith('/')) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        
        console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from.first_name}: ${msg.text}`);
        
        // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.sendMessage(msg.chat.id, `–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${msg.text}"\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`);
    });

    // –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
    bot.on('polling_error', (error) => {
        console.error('‚ùå POLLING ERROR:', error);
    });

    bot.on('webhook_error', (error) => {
        console.error('‚ùå WEBHOOK ERROR:', error);
    });

    bot.on('error', (error) => {
        console.error('‚ùå BOT ERROR:', error);
    });
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–û–¢–ê
async function testBot() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç
        const botInfo = await bot.getMe();
        console.log('‚úÖ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:', botInfo.username);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook (–µ—Å–ª–∏ production)
        if (IS_PRODUCTION) {
            try {
                const webhookInfo = await bot.getWebHookInfo();
                console.log('üìã Webhook info:', {
                    url: webhookInfo.url,
                    has_custom_certificate: webhookInfo.has_custom_certificate,
                    pending_update_count: webhookInfo.pending_update_count,
                    last_error_date: webhookInfo.last_error_date,
                    last_error_message: webhookInfo.last_error_message
                });
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', error);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:', error);
    }
}

// –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –ò –ë–û–¢–ê
async function startBot() {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        const server = app.listen(PORT, () => {
            console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üìä Health check: http://localhost:${PORT}/health`);
        });
        
        // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
        await createBot();
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        setTimeout(testBot, 2000);
        
        console.log('\nüéâ –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!');
        console.log(`üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É @${BOT_USERNAME} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
        console.log(`üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/${BOT_USERNAME}`);
        
        // Graceful shutdown
        const gracefulShutdown = (signal) => {
            console.log(`\nüìõ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º...`);
            
            if (server) {
                server.close(() => {
                    console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                });
            }
            
            if (bot && !IS_PRODUCTION) {
                bot.stopPolling()
                    .then(() => {
                        console.log('‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                        process.exit(0);
                    })
                    .catch((error) => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling:', error);
                        process.exit(1);
                    });
            } else {
                process.exit(0);
            }
        };
        
        process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
        process.on('SIGINT', () => gracefulShutdown('SIGINT'));
        
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
}

// –ó–ê–ü–£–°–ö
startBot();
